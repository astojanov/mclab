%import "array.ast.*";

%package "array";

%class "ArrayParser";

%embed {:
    //TODO-AC: factor out common code

    //// Errors ////////////////////////////////////////////////////////////////

    //list of errors encountered while parsing
    private final java.util.List<String> errors = new java.util.ArrayList<String>();

    public java.util.List<String> getErrors() {
        return java.util.Collections.unmodifiableList(errors);
    }

    public boolean hasError() {
        return !errors.isEmpty();
    }

    //given a symbol, return a canonical string representation of it's position
    private static String getPosString(Symbol token) {
        return getPosString(token.getLine(token.getStart()), token.getColumn(token.getStart()));
    }

    //given a position, return a canonical string representation
    private static String getPosString(int line, int col) {
        return "[" + line + ", " + col + "]";
    }

    //override the default error handling:
    //  1) no writing to stderr
    //  2) no exceptions
    //  3) suggestions based on automatic corrections
    class Events extends Parser.Events {
        public void syntaxError(Symbol token) {
            errors.add(getPosString(token) + "  unexpected token " + Terminals.NAMES[token.getId()]);
        }
        public void scannerError(Scanner.Exception e) {
            errors.add(getPosString(e.line + 1, e.column + 1) + "  scanner error: " + e.getMessage());
        }
        public void unexpectedTokenRemoved(Symbol token) {
            errors.add(getPosString(token) + "  try deleting " + Terminals.NAMES[token.getId()]);
        }
        public void missingTokenInserted(Symbol token) {
            errors.add(getPosString(token) + "  try inserting " + Terminals.NAMES[token.getId()]);
        }
        public void misspelledTokenReplaced(Symbol token) {
            errors.add(getPosString(token) + "  try replacing with " + Terminals.NAMES[token.getId()]);
        }
    }

    //tell handler to use subclass defined above
    { report = new Events(); }

    //// AST helpers ///////////////////////////////////////////////////////////

    //add all elements of a util list to an ast list
    private static <T extends ASTNode<?>> array.ast.List<T> addAll(array.ast.List<T> node, java.util.List<T> children) {
        for(T child : children) {
            node.add(child);
        }
        return node;
    }

    //make a new ast list for a given util list
    private static <T extends ASTNode<?>> array.ast.List<T> makeListNode(java.util.List<T> children) {
        if(children == null) {
            return null;
        }
        return addAll(new array.ast.List<T>(), children);
    }

    //AST really doesn't like null nodes, but beaver returns null for empty optional lists
    //Create an appropriate empty node to replace the null
    private static <T extends ASTNode> List<T> nullToEmpty(List<T> original) {
        return original == null ? new List<T>() : original;
    }
:};

%terminals IDENTIFIER, NUMBER, STRING;
%terminals LPAREN, RPAREN, LSQUARE, RSQUARE, LCURLY, RCURLY;
%terminals PLUS, MINUS, MTIMES, ETIMES, MDIV, EDIV, MLDIV, ELDIV, MPOW, EPOW, MTRANSPOSE, ARRAYTRANSPOSE, LE, GE, LT, GT, EQ, NE, AND, OR, NOT, SHORTAND, SHORTOR;
%terminals DOT, COLON, AT;
%terminals COMMA, SEMICOLON, LINE_TERMINATOR;
%terminals COMMENT, ELLIPSIS_COMMENT, BRACKET_COMMENT;
%terminals OTHER_WHITESPACE;

// Precedence and associativity.
//NB: everything seems to be left associative in matlab (even pow and ldiv)
%left MPOW, EPOW;
%left MTIMES, MDIV, MLDIV, ETIMES, EDIV, ELDIV;
%left PLUS, MINUS;
%left LT, GT, LE, GE;
%left EQ, NE;
%left AND;
%left OR;
%left SHORTAND;
%left SHORTOR;

%typeof input_params, param_list = "List<Name>";

%typeof array = "Array";

%typeof expr, logic_expr, binary_expr, colon_expr, prefix_expr, postfix_expr, pow_expr, primary_expr = "Expr";
%typeof arg_list = "List<Expr>";
%typeof arg = "Expr";
%typeof matrix = "MatrixExpr";
%typeof cell_array = "CellArrayExpr";
%typeof row_list, optional_row_list = "List<Row>";
%typeof row = "Row";
%typeof literal = "LiteralExpr";
%typeof name = "Name";
%typeof access, cell_access, var_access = "LValueExpr";

%typeof IDENTIFIER, COMMENT, STRING, NUMBER = "String";

// Precedence and associativity.
//NB: everything seems to be left associative in matlab (even pow and ldiv)
%left MPOW, EPOW;
%left MTIMES, MDIV, MLDIV, ETIMES, EDIV, ELDIV;
%left PLUS, MINUS;
%left LT, GT, LE, GE;
%left EQ, NE;
%left AND;
%left OR;
%left SHORTAND;
%left SHORTOR;

%goal array;

array =
     matrix.m {: return new Matrix(m); :}
  |  cell_array.c {: return new CellArray(c); :}
  |  other_terminal {: return null; :}
  ;

//input parameter list for a function
input_params =
     LPAREN RPAREN {: return new List<Name>(); :}
  |  LPAREN param_list.l RPAREN
  ;

//Non-empty, comma-separated list of parameters (note: no trailing comma)
//shared by input and output parameters
param_list =
     IDENTIFIER.p {: return new List<Name>().add(new Name(p)); :}
  |  param_list.l COMMA IDENTIFIER.p {: return l.add(new Name(p)); :}
  ;

name =
     IDENTIFIER.id {: return new Name(id); :}
  ;

//precedence from: http://www.mathworks.com/access/helpdesk/help/techdoc/matlab_prog/f0-40063.html
expr =
     logic_expr.l
  |  AT input_params.params expr.body {: return new LambdaExpr(params, body); :}
  ;

logic_expr =
     colon_expr.e
  |  logic_expr.e1 LT logic_expr.e2 {: return new BinaryExpr(Terminals.LT, e1, e2); :}
  |  logic_expr.e1 GT logic_expr.e2 {: return new BinaryExpr(Terminals.GT, e1, e2); :}
  |  logic_expr.e1 LE logic_expr.e2 {: return new BinaryExpr(Terminals.LE, e1, e2); :}
  |  logic_expr.e1 GE logic_expr.e2 {: return new BinaryExpr(Terminals.GE, e1, e2); :}
  |  logic_expr.e1 EQ logic_expr.e2 {: return new BinaryExpr(Terminals.EQ, e1, e2); :}
  |  logic_expr.e1 NE logic_expr.e2 {: return new BinaryExpr(Terminals.NE, e1, e2); :}
  |  logic_expr.e1 AND logic_expr.e2 {: return new BinaryExpr(Terminals.AND, e1, e2); :}
  |  logic_expr.e1 OR logic_expr.e2 {: return new BinaryExpr(Terminals.OR, e1, e2); :}
  |  logic_expr.e1 SHORTAND logic_expr.e2 {: return new BinaryExpr(Terminals.SHORTAND, e1, e2); :}
  |  logic_expr.e1 SHORTOR logic_expr.e2 {: return new BinaryExpr(Terminals.SHORTOR, e1, e2); :}
  ;

colon_expr =
     binary_expr.e
  |  binary_expr.e1 COLON binary_expr.e3 {: return new RangeExpr(e1, new Opt(), e3); :}
  |  binary_expr.e1 COLON binary_expr.e2 COLON binary_expr.e3 {: return new RangeExpr(e1, new Opt(e2), e3); :}
  ;

binary_expr =
     prefix_expr.e
  |  binary_expr.e1 MTIMES binary_expr.e2 {: return new BinaryExpr(Terminals.MTIMES, e1, e2); :}
  |  binary_expr.e1 ETIMES binary_expr.e2 {: return new BinaryExpr(Terminals.ETIMES, e1, e2); :}
  |  binary_expr.e1 MDIV binary_expr.e2 {: return new BinaryExpr(Terminals.MDIV, e1, e2); :}
  |  binary_expr.e1 EDIV binary_expr.e2 {: return new BinaryExpr(Terminals.EDIV, e1, e2); :}
  |  binary_expr.e1 MLDIV binary_expr.e2 {: return new BinaryExpr(Terminals.MLDIV, e1, e2); :}
  |  binary_expr.e1 ELDIV binary_expr.e2 {: return new BinaryExpr(Terminals.ELDIV, e1, e2); :}
  |  binary_expr.e1 PLUS binary_expr.e2 {: return new BinaryExpr(Terminals.PLUS, e1, e2); :}
  |  binary_expr.e1 MINUS binary_expr.e2 {: return new BinaryExpr(Terminals.MINUS, e1, e2); :}
  ;

prefix_expr =
     pow_expr.e
  |  NOT prefix_expr.e {: return new PrefixExpr(Terminals.NOT, e); :}
  |  PLUS prefix_expr.e {: return new PrefixExpr(Terminals.PLUS, e); :}
  |  MINUS prefix_expr.e {: return new PrefixExpr(Terminals.MINUS, e); :}
  ;

pow_expr =
     postfix_expr.e
  |  pow_expr.e1 MPOW pow_expr.e2 {: return new BinaryExpr(Terminals.MPOW, e1, e2); :}
  |  pow_expr.e1 EPOW pow_expr.e2 {: return new BinaryExpr(Terminals.EPOW, e1, e2); :}
  ;

postfix_expr =
     primary_expr.e
  |  postfix_expr.e ARRAYTRANSPOSE {: return new PostfixExpr(Terminals.ARRAYTRANSPOSE, e); :}
  |  postfix_expr.e MTRANSPOSE {: return new PostfixExpr(Terminals.MTRANSPOSE, e); :}
  ;

primary_expr =
     literal.l
  |  LPAREN expr.e RPAREN {: return new ParenExpr(e); :}
  |  matrix.m
  |  cell_array.c
  |  access.a
  |  AT name.name {: return new FunctionHandleExpr(name); :} //TODO-AC: allow qualified name?
  ;

access =
     cell_access.c
  |  cell_access.c LPAREN RPAREN {: return new ParameterizedExpr(c, new List<Expr>()); :}
  |  cell_access.c LPAREN arg_list.l RPAREN {: return new ParameterizedExpr(c, l); :}
  ;

cell_access =
     var_access.v
  |  cell_access.v LCURLY arg_list.l RCURLY {: return new CellIndexExpr(v, l); :}
  ;

var_access =
     name.n {: return new NameExpr(n); :}
  |  var_access.v DOT name.n {: return new DotExpr(v, n); :}
  ;

literal =
     NUMBER.n {: return new LiteralExpr(n); :}
  |  STRING.s {: return new LiteralExpr(s); :}
  ;

matrix =
     LSQUARE optional_row_list.l RSQUARE {: return new MatrixExpr(l); :}
  ;

cell_array =
     LCURLY optional_row_list.l RCURLY {: return new CellArrayExpr(l); :}
  ;

optional_row_list =
     {: return new List<Row>(); :}
  |  row_separator {: return new List<Row>(); :}
  |  row_list.l {: return l; :}
  |  row_list.l row_separator {: return l; :}
  ;

row_list =
     row.r {: return new List<Row>().add(r); :}
  |  row_list.l row_separator row.r {: return l.add(r); :}
  ;

row =
     arg_list.l COMMA? {: return new Row(l); :}
  ;

row_separator =
     LINE_TERMINATOR
  |  SEMICOLON
  ;

arg_list =
     arg.a {: return new List<Expr>().add(a); :}
  |  arg_list.l COMMA arg.a {: return l.add(a); :}
  ;
  
arg =
     expr.e
  |  COLON.c {: return new ColonExpr(); :}
  ;

//terminals that we have to refer to in the grammar (so that beaver doesn't get rid of them)
//but which aren't used in other productions
other_terminal =
  |  COMMENT
  |  ELLIPSIS_COMMENT
  |  BRACKET_COMMENT
  |  OTHER_WHITESPACE
  ;
