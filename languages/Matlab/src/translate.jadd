aspect Translate {
    /**
     * Translate the contents of a node from Natlab to Matlab.
     * Both arguments are to be updated - offsetTracker with position changes
     *   and problems with problems encountered.
     * The default behaviour is to throw an UnsupportedOperationException.
     */
    public String ASTNode.translate(matlab.OffsetTracker offsetTracker, java.util.List<matlab.TranslationProblem> problems) {
        throw new UnsupportedOperationException(getClass().getName() + ".translate()");
    }
    
    public String Program.translate(matlab.OffsetTracker offsetTracker, java.util.List<matlab.TranslationProblem> problems) {
        return getListNode().translate(offsetTracker, problems);
    }
    
    public String ListNode.translate(matlab.OffsetTracker offsetTracker, java.util.List<matlab.TranslationProblem> problems) {
        StringBuffer buf = new StringBuffer();
        for(Node node : getNodes()) {
            buf.append(node.translate(offsetTracker, problems));
        }
        return buf.toString();
    }
    
    public String SymbolNode.translate(matlab.OffsetTracker offsetTracker, java.util.List<matlab.TranslationProblem> problems) {
        offsetTracker.advanceByTextSize(getText());
        return getText();
    }
    
    public String MaybeCmdExtract.translate(matlab.OffsetTracker offsetTracker, java.util.List<matlab.TranslationProblem> problems) {
        StringBuffer buf = new StringBuffer();
        String cmd = getCmd();
        buf.append(cmd);
        offsetTracker.advanceByTextSize(cmd);
        java.util.List<beaver.Symbol> originalArgSymbols = getArgs();
        StringBuffer textBuf = new StringBuffer();
        for(beaver.Symbol sym : originalArgSymbols) {
            if(sym instanceof ArrayExtract) {
                textBuf.append(((ArrayExtract) sym).getText()); //NB: do NOT translate
            } else {
                textBuf.append(sym.value);
            }
        }
        int basePos = originalArgSymbols.get(0).getStart();
        int baseLine = beaver.Symbol.getLine(basePos);
        int baseCol = beaver.Symbol.getColumn(basePos);
        String formattedArgs = matlab.CommandFormatter.format(textBuf.toString(), baseLine, baseCol, offsetTracker, problems);
        buf.append(formattedArgs);
        return buf.toString();
    }
    
    public String MatrixExtract.translate(matlab.OffsetTracker offsetTracker, java.util.List<matlab.TranslationProblem> problems) {
        int startPos = getStart();
        int startLine = beaver.Symbol.getLine(startPos);
        int startCol = beaver.Symbol.getColumn(startPos);
        return matlab.MatlabParser.translate(getText(), startLine, startCol, offsetTracker, problems);
    }
    
    public String CellArrayExtract.translate(matlab.OffsetTracker offsetTracker, java.util.List<matlab.TranslationProblem> problems) {
        int startPos = getStart();
        int startLine = beaver.Symbol.getLine(startPos);
        int startCol = beaver.Symbol.getColumn(startPos);
        return matlab.MatlabParser.translate(getText(), startLine, startCol, offsetTracker, problems);
    }
}