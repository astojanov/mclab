%import "annotations.ast.*";

%package "annotations";

%class "AnnotationsParser";

%embed {:
    //// Errors ////////////////////////////////////////////////////////////////

    //list of errors encountered while parsing
    private final java.util.List<String> errors = new java.util.ArrayList<String>();

    public java.util.List<String> getErrors() {
        return java.util.Collections.unmodifiableList(errors);
    }

    public boolean hasError() {
        return !errors.isEmpty();
    }

    //given a symbol, return a canonical string representation of it's position
    private static String getPosString(Symbol token) {
        return getPosString(token.getLine(token.getStart()), token.getColumn(token.getStart()));
    }

    //given a position, return a canonical string representation
    private static String getPosString(int line, int col) {
        return "[" + line + ", " + col + "]";
    }

    //override the default error handling:
    //  1) no writing to stderr
    //  2) no exceptions
    //  3) suggestions based on automatic corrections
    class Events extends Parser.Events {
        public void syntaxError(Symbol token) {
            errors.add(getPosString(token) + "  unexpected token " + Terminals.NAMES[token.getId()]);
        }
        public void scannerError(Scanner.Exception e) {
            errors.add(getPosString(e.line, e.column) + "  scanner error: " + e.getMessage());
        }
        public void unexpectedTokenRemoved(Symbol token) {
            errors.add(getPosString(token) + "  try deleting " + Terminals.NAMES[token.getId()]);
        }
        public void missingTokenInserted(Symbol token) {
            errors.add(getPosString(token) + "  try inserting " + Terminals.NAMES[token.getId()]);
        }
        public void misspelledTokenReplaced(Symbol token) {
            errors.add(getPosString(token) + "  try replacing with " + Terminals.NAMES[token.getId()]);
        }
    }

    //tell handler to use subclass defined above
    { report = new Events(); }
    
    //// AST helpers ///////////////////////////////////////////////////////////

    //add all elements of a util list to an ast list
    private static <T extends ASTNode<?>> annotations.ast.List<T> addAll(annotations.ast.List<T> node, java.util.List<T> children) {
        for(T child : children) {
            node.add(child);
        }
        return node;
    }

    //make a new ast list for a given util list
    private static <T extends ASTNode<?>> annotations.ast.List<T> makeListNode(java.util.List<T> children) {
        if(children == null) {
            return null;
        }
        return addAll(new annotations.ast.List<T>(), children);
    }

    //AST really doesn't like null nodes, but beaver returns null for empty optional lists
    //Create an appropriate empty node to replace the null
    private static <T extends ASTNode> List<T> nullToEmpty(List<T> original) {
        return original == null ? new List<T>() : original;
    }
:};

%terminals NUMBER, IDENTIFIER;
%terminals DOT, STMT_TERMINATOR, ELEMENT_SEPARATOR, SIZE_OF, EQ, HAS_TYPE;
%terminals LPAREN, RPAREN, LCURLY, RCURLY, LSQUARE, RSQUARE;
%terminals VARARG_MODIFIER, TYPE_VAR_MODIFIER, UNKNOWN_TYPE, ARROW;

%typeof NUMBER = "Integer";
%typeof IDENTIFIER = "String";

%goal annotation;

annotation =
     NUMBER
  |  IDENTIFIER
  |  DOT
  |  STMT_TERMINATOR
  |  ELEMENT_SEPARATOR
  |  SIZE_OF
  |  EQ
  |  HAS_TYPE
  |  LPAREN
  |  RPAREN
  |  LCURLY
  |  RCURLY
  |  LSQUARE
  |  RSQUARE
  |  VARARG_MODIFIER
  |  TYPE_VAR_MODIFIER
  |  UNKNOWN_TYPE
  ;

stmt =
     stmt_body STMT_TERMINATOR
  ;

stmt_body =
     type_stmt_body
     size_stmt_body
  ;

entity =
     IDENTIFIER
  ;

type_stmt_body =
     entity HAS_TYPE type
  ;

type =
     vararg_type
  |  list_type ARROW type //NB: not vararg_type on LHS
  ;

vararg_type =
     list_type
  |  list_type VARARG_MODIFIER
  ;

list_type =
     base_type
  |  tuple_type
  |  matrix_type
  |  cell_array_type
  ;

tuple_type =
     LPAREN base_type_list RPAREN
  ;

matrix_type =
     LSQUARE base_type RSQUARE
  ;

cell_array_type =
     LCURLY base_type RCURLY
  ;

base_type =
     IDENTIFIER
  |  UNKNOWN_TYPE
  |  HANDLE_MODIFIER LPAREN type RPAREN
  ;

base_type_list =
     base_type
  |  type_list ELEMENT_SEPARATOR base_type
  ;

size_stmt_body =
     SIZE_OF entity EQ size
  ;

size =
     LSQUARE num_list RSQUARE
  ;

num_list =
     NUMBER
  |  num_list ELEMENT_SEPARATOR NUMBER
  ;