import java.util.*;

aspect TypeQuery{

    //Collect all type information in this annotation into a map
    syn lazy Map<String,Type > Annotation.collectTypes(){
        Map<String,Type> types = new HashMap<String, Type>();
        
        for( Stmt stmt : getStmts() )
            if( stmt instanceof TypeStmt ){
                TypeStmt ts = (TypeStmt) stmt;
                //if( ts.getEntity() instanceof Variab
                types.put(ts.getEntity().string(), ts.getType());
            }

        return types;
    }

    //Used to query types
    syn Type Annotation.getTypeInfo( Entity e ) = collectTypes().get(e.string());

    //collect all size information
    syn lazy Map<String,Size > Annotation.collectSizes(){
        Map<String,Size> sizes = new HashMap<String, Size>();
        
        for( Stmt stmt : getStmts() )
            if( stmt instanceof SizeStmt ){
                SizeStmt ss = (SizeStmt) stmt;
                sizes.put(ss.getEntity().string(), ss.getSize());
            }

        return sizes;
    }

    //query sizes
    syn Size Annotation.getSizeInfo( Entity e ) = collectSizes().get(e.string());


}
               