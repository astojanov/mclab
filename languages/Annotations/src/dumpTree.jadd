import java.util.*;

aspect dumpTree{

  // dump the AST to standard output

  public String ASTNode.dumpTree() {
    StringBuffer s = new StringBuffer();
    dumpTree(s, 0);
    return s.toString();
  }

  public void ASTNode.dumpTree(StringBuffer s, int j) {
    for(int i = 0; i < j; i++) {
      s.append("  ");
    }
    s.append(dumpString() + "\n");
    for(int i = 0; i < getNumChild(); i++) {
      if (getChild(i)!=null)
      	getChild(i).dumpTree(s, j + 1);
    }
  }
  
  syn String ASTNode.dumpString() = getClass().getName() + " [" + toString() + "]";
  
  // ------------------------------------------------------------------
  // TODO: following should be put into another file into /src/
  // ------------------------------------------------------------------
  // For Type node, using getName to have the basic type-name
  syn String Type.getName() = "Type";
  syn String BaseType.getName() = "BaseType";
  public String MatrixType.getName() {
    	if(getSize()!=null) {
    		// This will show its size name 
    		// return getElementType().getName() + getSize().getStructureString();
    	}
  		return getElementType().getName();
  }
  // String PrimitiveType.getName() exist

  // ------------------------------------------------------------------
  // Finding the Size annotation for Matrix variable
  private Size MatrixType.size = null;
  public Size MatrixType.getSize() {
  	return size;
  }
  public void MatrixType.setSize(Size s)  {
  	this.size = s;
  }
  
  // The method that can invoke this process
  public void Annotation.setMatrixSize() {
	for(Stmt stmt : getStmts()) {
		String varName;
		if(stmt instanceof TypeStmt) {
			if(((TypeStmt) stmt).getType() instanceof MatrixType) {
				if(((MatrixType) ((TypeStmt) stmt).getType()).getSize()==null && 
						((TypeStmt) stmt).getEntity() instanceof Variable) {
					varName = ((Variable) ((TypeStmt) stmt).getEntity()).getName();
					((MatrixType) ((TypeStmt) stmt).getType()).setSize(getMatrixSize(varName));
				}				
			}	
		}
	}
  }
  public Size Annotation.getMatrixSize(String varName) {
	for(Stmt stmt : getStmts()) {
		if(stmt instanceof SizeStmt) {
			if(varName.equals(((Variable) ((SizeStmt)stmt).getEntity()).getName()))
				return ((SizeStmt)stmt).getSize();
		}
	}
	return null;
  }


	// ------------------------------------------------------------------
	// Adding name field, and using ArgTupleType as function signature type
	// ------------------------------------------------------------------
	public String Type.name="Type";

	public void ArgTupleType.setName(String name) {
		this.name = name;
	}
	public String ArgTupleType.getName() {
		return this.name;
	}

     // Add a list of arguments (variable name) used in the function call	
     java.util.ArrayList<String> ArgTupleType.argList = new java.util.ArrayList<String>();
     public String ArgTupleType.getStaticArgName(int i) {
         return argList.get(i);
     }     
     public void ArgTupleType.addStaticArgType(Type node, String name) {
    	 addStaticArgType(node);
    	 argList.add(name);
     }


	// ------------------------------------------------------------------
	// Support dynamic indexes, in Size. class
	// ------------------------------------------------------------------
	protected java.util.List<String> Size.String__Dims;
	protected java.util.List<ASTNode> Size.ASTNode__Dims;	// keep the index-node
	public void Size.setDynamicDims(java.util.List<String> value) {
		String__Dims = value;
	}
	public void Size.setNodeDims(java.util.List<ASTNode> value) {
		ASTNode__Dims = value;
	}
	public java.util.List<String> Size.getDynamicDims() {
		return String__Dims;
	}
	public java.util.List<ASTNode> Size.getNodeDims() {
		return ASTNode__Dims;
	}


	
}
