
import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;

aspect ASTtoXML {
	
	private long ASTNode.uID = -1;
	public void ASTNode.setuID(long id) {
		uID = id;
	}
	public long ASTNode.getuID() {
		return uID;
	}
	
	public long Annotation.nodeCounter = 0;
	public long Annotation.getNodeCounter(){
		return nodeCounter;
	}
	public void Annotation.getXML(Document doc, Element parent, long count){
		nodeCounter = count;
		getXML(doc, parent);
	}
  	public long ASTNode.nodeCounter() {
  		ASTNode node = this;
	    while(node != null && !(node instanceof Annotation))
	    	node = node.getParent();
	    
	    Annotation anno = (Annotation)node;
    	return anno.nodeCounter++;
  	}
    
	syn boolean ASTNode.getXML(Document doc, Element parent) { throw new UnsupportedOperationException(getClass().getName() + ".getXML()"); }
	
	eq Annotation.getXML(Document doc, Element parent) {
		long id = nodeCounter();
        setuID(id);
        
		Element e = doc.createElement("Annotation");
		e.setAttribute("id", Long.toString(id));

        for(Stmt stmt : getStmts()) {
            stmt.getXML(doc, e);
        }

		parent.appendChild(e);
        return true;
	}
	
	eq SizeStmt.getXML(Document doc, Element parent) {
		long id = nodeCounter();
        setuID(id);
        
        Element e = doc.createElement("SizeStmt");
		e.setAttribute("id", Long.toString(id));

        getEntity().getXML(doc, e);
        getSize().getXML(doc, e);
		
		parent.appendChild(e);
        return true;
	}
	
	eq TypeStmt.getXML(Document doc, Element parent) {
		long id = nodeCounter();
        setuID(id);
        
        Element e = doc.createElement("TypeStmt");
		e.setAttribute("id", Long.toString(id));

        getEntity().getXML(doc, e);
        getType().getXML(doc, e);
		
		parent.appendChild(e);
        return true;
	}
	
	eq Variable.getXML(Document doc, Element parent) {
		long id = nodeCounter();
        setuID(id);
        
        Element e = doc.createElement("Variable");
		e.setAttribute("id", Long.toString(id));
		e.setAttribute("name", getName());
		
		parent.appendChild(e);
        return true;
	}
	
	eq Field.getXML(Document doc, Element parent) {
		long id = nodeCounter();
        setuID(id);
        
        Element e = doc.createElement("Field");
		e.setAttribute("id", Long.toString(id));
		e.setAttribute("name", getFieldName());
		
		getEntity().getXML(doc, e);
		
		parent.appendChild(e);
        return true;
	}
	
	eq Cell.getXML(Document doc, Element parent) {
		long id = nodeCounter();
        setuID(id);
        
        Element e = doc.createElement("Cell");
		e.setAttribute("id", Long.toString(id));

		getEntity().getXML(doc, e);
        
		for(Integer index: getIndices()) {
			Element e1 = doc.createElement("Integer");
			
			e1.setAttribute("id", Long.toString(nodeCounter()));
			e1.setAttribute("name", "Index");
			e1.setAttribute("value", Integer.toString(index));
			
			e.appendChild(e1);
		}
        
		parent.appendChild(e);
        return true;
	}
	
	eq Size.getXML(Document doc, Element parent) {
		long id = nodeCounter();
        setuID(id);
		
		Element e = doc.createElement("Size");
		e.setAttribute("id", Long.toString(id));
        
		for(Integer dim: getDims()) {	
		    Element e1 = doc.createElement("Integer");
			
			e1.setAttribute("id", Long.toString(nodeCounter()));
			e1.setAttribute("name", "Dim");
			e1.setAttribute("value", Integer.toString(dim));
			
			e.appendChild(e1);	
		}
        
		parent.appendChild(e);
        return true;
	}
	
	eq IntersectionType.getXML(Document doc, Element parent) {
		long id = nodeCounter();
        setuID(id);
        
        Element e = doc.createElement("IntersectionType");
		e.setAttribute("id", Long.toString(id));
		
		for(Type type: getTypes()) {
			type.getXML(doc, e);
		}
        
		parent.appendChild(e);
        return true;
	}
	
	eq ArrowType.getXML(Document doc, Element parent) {
		long id = nodeCounter();
        setuID(id);
        
        Element e = doc.createElement("ArrowType");
		e.setAttribute("id", Long.toString(id));
		
		getArgType().getXML(doc, e);
		getResultType().getXML(doc, e);
        
		parent.appendChild(e);
        return true;
	}
	
	eq UnitType.getXML(Document doc, Element parent) {
		long id = nodeCounter();
        setuID(id);
        
        Element e = doc.createElement("UnitType");
		e.setAttribute("id", Long.toString(id));
        
		parent.appendChild(e);
        return true;
	}
	
	eq ArgTupleType.getXML(Document doc, Element parent) {
		long id = nodeCounter();
        setuID(id);
        
        Element e = doc.createElement("ArgTupleType");
		e.setAttribute("id", Long.toString(id));
		
		for(Type type: getStaticArgTypes()) {
			type.getXML(doc, e);
		}
		
		getVarArgType().getXML(doc, e);
        
		parent.appendChild(e);
        return true;
	}
	
	eq VarArgType.getXML(Document doc, Element parent) {
		long id = nodeCounter();
        setuID(id);
        
        Element e = doc.createElement("VarArgType");
		e.setAttribute("id", Long.toString(id));
		
		getType().getXML(doc, e);

		parent.appendChild(e);
        return true;
	}
	
	eq TupleType.getXML(Document doc, Element parent) {
		long id = nodeCounter();
        setuID(id);
        
        Element e = doc.createElement("TupleType");
		e.setAttribute("id", Long.toString(id));
		
		for(Type type: getElementTypes()) {
			type.getXML(doc, e);
		}

		parent.appendChild(e);
        return true;
	}
	
	eq UnionType.getXML(Document doc, Element parent) {
		long id = nodeCounter();
        setuID(id);
        
        Element e = doc.createElement("UnionType");
		e.setAttribute("id", Long.toString(id));
		
		for(Type type: getTypes()) {
			type.getXML(doc, e);
		}

		parent.appendChild(e);
        return true;
	}
	
	eq MatrixType.getXML(Document doc, Element parent) {
		long id = nodeCounter();
        setuID(id);
        
        Element e = doc.createElement("MatrixType");
		e.setAttribute("id", Long.toString(id));
		
		getElementType().getXML(doc, e);

		parent.appendChild(e);
        return true;
	}
	
	eq CellArrayType.getXML(Document doc, Element parent) {
		long id = nodeCounter();
        setuID(id);
        
        Element e = doc.createElement("CellArrayType");
		e.setAttribute("id", Long.toString(id));
		
		getDefaultElementType().getXML(doc, e);
        
		parent.appendChild(e);
        return true;
	}
	
	eq PrimitiveType.getXML(Document doc, Element parent) {
		long id = nodeCounter();
        setuID(id);
        
        Element e = doc.createElement("PrimitiveType");
		e.setAttribute("id", Long.toString(id));
		e.setAttribute("name", getName());

		parent.appendChild(e);
        return true;
	}
	
	eq TypeVarType.getXML(Document doc, Element parent) {
		long id = nodeCounter();
        setuID(id);
        
        Element e = doc.createElement("TypeVarType");
		e.setAttribute("id", Long.toString(id));
		e.setAttribute("name", getName());
		
		parent.appendChild(e);
        return true;
	}
	
	eq HandleType.getXML(Document doc, Element parent) {
		long id = nodeCounter();
        setuID(id);
        
        Element e = doc.createElement("HandleType");
		e.setAttribute("id", Long.toString(id));
		
		getArrowType().getXML(doc, e);

		parent.appendChild(e);
        return true;
	}
	
	eq UnknownType.getXML(Document doc, Element parent) {
		long id = nodeCounter();
        setuID(id);
        
        Element e = doc.createElement("UnknownType");
		e.setAttribute("id", Long.toString(id));
		
		parent.appendChild(e);
        return true;
	}
	
	eq StructType.getXML(Document doc, Element parent) {
		long id = nodeCounter();
        setuID(id);
        
        Element e = doc.createElement("StructType");
		e.setAttribute("id", Long.toString(id));
		
		for(FieldEntry entry: getFieldEntrys()) {
			entry.getXML(doc, e);
		}

		parent.appendChild(e);
        return true;
	}
	
	eq FieldEntry.getXML(Document doc, Element parent) {
		long id = nodeCounter();
        setuID(id);
        
        Element e = doc.createElement("FieldEntry");
		e.setAttribute("id", Long.toString(id));
		e.setAttribute("name", getName());
		
        getType().getXML(doc, e);

		parent.appendChild(e);
        return true;
	}
    
    eq LoopOptStmt.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);
        
        String className = getClass().getName();
        Element e = doc.createElement(className.substring(className.lastIndexOf('.') + 1));
        e.setAttribute("id", Long.toString(id));
        e.setAttribute("name", Long.toString(id));
        
        parent.appendChild(e);
        return true;
    }
}