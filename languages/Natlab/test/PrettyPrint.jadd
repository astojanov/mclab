/*
 *  Adapted for Natlab project 
 *  from PrettyPrint.jadd of JastAdd Extensible Java Compiler 
 *  (http://jastadd.org) created by Torbjorn Ekman.
 *
 */
import java.util.*;

aspect PrettyPrint {

  // Default output
  
  public String ASTNode.toString() {
    StringBuffer s = new StringBuffer();
    s.append(getStructureString());
    return s.toString().trim();
  }
  

  public void ASTNode.toString(StringBuffer s) {
    //  throw new Error("ERROR: toString(StringBuffer s) not implemented for " + getClass().getName());
    // no need to throw exception when building tree
    s.append("WARNING: toString(StringBuffer s) not implemented for " + getClass().getName()+"\n");
  }

  // dump the AST to standard output

  public String ASTNode.dumpTree() {
    StringBuffer s = new StringBuffer();
    dumpTree(s, 0);
    return s.toString();
  }

  public void ASTNode.dumpTree(StringBuffer s, int j) {
    for(int i = 0; i < j; i++) {
      s.append("  ");
    }
    s.append(dumpString() + "\n");
    for(int i = 0; i < getNumChild(); i++) {
      if (getChild(i)!=null)
      	getChild(i).dumpTree(s, j + 1);
    }
  }

  syn String ASTNode.dumpString() = getClass().getName() + " [" + toString() + "]";
  eq IntegerLiteral.dumpString() = getClass().getName() + " [" + getValue() + "]";
  eq DoubleLiteral.dumpString() = getClass().getName() + " [" + getValue() + "]";
  eq StringLiteral.dumpString() = getClass().getName() + " [" + getValue() + "]";
  eq ParseName.dumpString() = getClass().getName() + " [" + getID() + "]";
  eq ParameterizedAccess.dumpString() = getClass().getName() + " [" + getID() + "]";

  eq FunctionHandle.dumpString() = getClass().getName() + " [" + "@" + getName() + "]";
  eq LambdaDef.dumpString() = getClass().getName() + " [" + getStructureStringLessComments() + "]";

  public String Script.dumpTree() {
    StringBuffer s = new StringBuffer();
    for(Iterator iter = getStmts().iterator(); iter.hasNext(); ) {
      Stmt stmt = (Stmt)iter.next();
        s.append(stmt.dumpTree());
    }
    return s.toString();
  }
  public String EmptyProgram.dumpTree() {
    return "";
  }
  
}
