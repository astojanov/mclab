//TODO-AC: indentation?
//NB: output may not re-parse as same AST (esp comments, empty stmts)
aspect StructureString {
    syn String ASTNode.getStructureString() {
        StringBuffer buf = new StringBuffer();
        for(beaver.Symbol comment : getComments()) {
            buf.append(comment.value);
            buf.append('\n');
        }
        buf.append(getStructureStringLessComments());
        return buf.toString();
    }

    //default - exception
    syn String ASTNode.getStructureStringLessComments() { throw new UnsupportedOperationException(getClass().getName() + ".getStructureStringLessComments()"); }
    
    //program
    eq EmptyProgram.getStructureStringLessComments() {
        return "";
    }
    
    eq Script.getStructureStringLessComments() {
        StringBuffer buf = new StringBuffer();
        for(HelpComment comment : getHelpComments()) {
            buf.append(comment.getStructureString());
            buf.append('\n');
        }
        for(Stmt stmt : getStmts()) {
            buf.append(stmt.getStructureString());
            buf.append('\n');
        }
        return buf.toString();
    }
    
    eq FunctionList.getStructureStringLessComments() {
        StringBuffer buf = new StringBuffer();
        for(Function func : getFunctions()) {
            buf.append(func.getStructureString());
            buf.append('\n');
        }
        return buf.toString();
    }
    
    eq Function.getStructureStringLessComments() {
        StringBuffer buf = new StringBuffer();
        buf.append("function ");
        buf.append(" [");
        boolean first = true;
        for(Param param : getOutputParams()) {
            if(!first) {
                buf.append(", ");
            }
            buf.append(param.getStructureString());
            first = false;
        }
        buf.append("] = ");
        buf.append(getName());
        buf.append("(");
        first = true;
        for(Param param : getInputParams()) {
            if(!first) {
                buf.append(", ");
            }
            buf.append(param.getStructureString());
            first = false;
        }
        buf.append(")");
        buf.append('\n');
        for(HelpComment comment : getHelpComments()) {
            buf.append(comment.getStructureString());
            buf.append('\n');
        }
        for(Stmt stmt : getStmts()) {
            buf.append(stmt.getStructureString());
            buf.append('\n');
        }
        for(Function func : getNestedFunctions()) {
            buf.append(func.getStructureString());
            buf.append('\n');
        }
        buf.append("end");
        return buf.toString();
    }
    
    //help comments
    
    eq HelpComment.getStructureStringLessComments() = getText();
    
    //stmts
    eq EmptyStmt.getStructureStringLessComments() = (isOutputSuppressed() ? ";" : "");
    eq ExprStmt.getStructureStringLessComments() = getExpr().getStructureString() + (isOutputSuppressed() ? ";" : "");
    eq AssignStmt.getStructureStringLessComments() = getDest().getStructureString() + " = " + getSource().getStructureString() + (isOutputSuppressed() ? ";" : "");
    eq GlobalStmt.getStructureStringLessComments() {
        StringBuffer buf = new StringBuffer();
        buf.append("global");
        for(ParseName name : getNames()) {
            buf.append(" ");
            buf.append(name.getStructureString());
        }
        if(isOutputSuppressed()) {
            buf.append(";");
        }
        return buf.toString();
    }
    eq PersistentStmt.getStructureStringLessComments() {
        StringBuffer buf = new StringBuffer();
        buf.append("persistent");
        for(ParseName name : getNames()) {
            buf.append(" ");
            buf.append(name.getStructureString());
        }
        if(isOutputSuppressed()) {
            buf.append(";");
        }
        return buf.toString();
    }
    eq ShellCommandStmt.getStructureStringLessComments() = "!" + getCommand() + (isOutputSuppressed() ? ";" : "");
    
    eq BreakStmt.getStructureStringLessComments() = "break" + (isOutputSuppressed() ? ";" : "");
    eq ContinueStmt.getStructureStringLessComments() = "continue" + (isOutputSuppressed() ? ";" : "");
    eq ReturnStmt.getStructureStringLessComments() = "return" + (isOutputSuppressed() ? ";" : "");

    eq ForStmt.getStructureStringLessComments() {
        StringBuffer buf = new StringBuffer();
        buf.append("for ");
        buf.append(getAssignStmt().getStructureString());
        buf.append('\n');
        for(Stmt stmt : getStmts()) {
            buf.append('\t');
            buf.append(stmt.getStructureString());
            buf.append('\n');
        }
        buf.append("end");
        return buf.toString();
    }

    eq WhileStmt.getStructureStringLessComments() {
        StringBuffer buf = new StringBuffer();
        buf.append("where ");
        buf.append(getExpr());
        buf.append('\n');
        for(Stmt stmt : getStmts()) {
            buf.append(stmt.getStructureString());
            buf.append('\n');
        }
        buf.append("end");
        return buf.toString();
    }
    
    
    //exprs
    eq ColonExpr.getStructureStringLessComments() {
        StringBuffer buf = new StringBuffer();
        buf.append('(');
        buf.append(getBase().getStructureString());
        buf.append(" : ");
        if(hasIncr()) {
            buf.append(getIncr().getStructureString());
            buf.append(" : ");
        }
        buf.append(getLimit().getStructureString());
        buf.append(')');
        return buf.toString();
    }
    eq Colon.getStructureStringLessComments() = ":";
    
    //accesses
    eq IdUse.getStructureStringLessComments() = getID();
    eq ParseName.getStructureStringLessComments() = getID();
    eq ParameterizedAccess.getStructureStringLessComments() {
        StringBuffer buf = new StringBuffer();
        buf.append(getID());
        buf.append('(');
        boolean first = true;
        for(Expr arg : getArgs()) {
            if(!first) {
                buf.append(", ");
            }
            buf.append(arg.getStructureString());
            first = false;
        }
        buf.append(')');
        return buf.toString();
    }
    
    eq MatrixDecl.getStructureStringLessComments() {
        StringBuffer buf = new StringBuffer();
        buf.append('[');
        boolean first = true;
        for(MatrixRow row : getArgs()) {
            if(!first) {
                buf.append("; ");
            }
            buf.append(row.getStructureString());
            first = false;
        }
        buf.append(']');
        return buf.toString();
    }
    eq MatrixRow.getStructureStringLessComments() {
        StringBuffer buf = new StringBuffer();
        boolean first = true;
        for(Expr arg : getArgs()) {
            if(!first) {
                buf.append(", ");
            }
            buf.append(arg.getStructureString());
            first = false;
        }
        return buf.toString();
    }
    
    eq FunctionHandle.getStructureStringLessComments() = "@" + getName();
    
    //literals
    eq IntegerLiteral.getStructureStringLessComments() = getValue().getText();
    eq DoubleLiteral.getStructureStringLessComments() = getValue().getText();
    eq StringLiteral.getStructureStringLessComments() = "'" + getValue() + "'";
    
    eq MinusExpr.getStructureStringLessComments() = "(-" + getOperand().getStructureString() + ")";
    eq PlusExpr.getStructureStringLessComments() = "(+" + getOperand().getStructureString() + ")";
    eq LogNotExpr.getStructureStringLessComments() = "(~" + getOperand().getStructureString() + ")";
    eq TransposeExpr.getStructureStringLessComments() = "(" + getOperand().getStructureString() + "')";
    eq ArrayTransposeExpr.getStructureStringLessComments() = "(" + getOperand().getStructureString() + ".')";
    
    syn String Binary.getStructureStringLessComments(String op) = "(" + getLeftOperand().getStructureString() + " " + op + " " + getRightOperand().getStructureString() + ")";
    
    eq MulExpr.getStructureStringLessComments() = getStructureStringLessComments("*");
    eq DivExpr.getStructureStringLessComments() = getStructureStringLessComments("/");
    eq LeftDivExpr.getStructureStringLessComments() = getStructureStringLessComments("\\");
    eq PowExpr.getStructureStringLessComments() = getStructureStringLessComments("^");
    eq AddExpr.getStructureStringLessComments() = getStructureStringLessComments("+");
    eq SubExpr.getStructureStringLessComments() = getStructureStringLessComments("-");
    eq EMulExpr.getStructureStringLessComments() = getStructureStringLessComments(".*");
    eq EDivExpr.getStructureStringLessComments() = getStructureStringLessComments("./");
    eq ELeftDivExpr.getStructureStringLessComments() = getStructureStringLessComments(".\\");
    eq EPowExpr.getStructureStringLessComments() = getStructureStringLessComments(".^");
    
    eq AndLogicalExpr.getStructureStringLessComments() = getStructureStringLessComments("&");
    eq OrLogicalExpr.getStructureStringLessComments() = getStructureStringLessComments("|");
    eq ShortCircuitAndExpr.getStructureStringLessComments() = getStructureStringLessComments("&&");
    eq ShortCircuitOrExpr.getStructureStringLessComments() = getStructureStringLessComments("||");
    eq LTExpr.getStructureStringLessComments() = getStructureStringLessComments("<");
    eq GTExpr.getStructureStringLessComments() = getStructureStringLessComments(">");
    eq LEExpr.getStructureStringLessComments() = getStructureStringLessComments("<=");
    eq GEExpr.getStructureStringLessComments() = getStructureStringLessComments(">=");
    eq EQExpr.getStructureStringLessComments() = getStructureStringLessComments("==");
    eq NEExpr.getStructureStringLessComments() = getStructureStringLessComments("~=");
}