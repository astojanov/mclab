%import "natlab.ast.*";
%import "java.util.Collections";
%import "java.util.Iterator";
%import "java.util.List";

%package "natlab";

%class "NatlabParser";

%embed {:
    private final List<String> errors = new ArrayList<String>();

    public List<String> getErrors() {
        return Collections.unmodifiableList(errors);
    }

    public boolean hasError() {
        return !errors.isEmpty();
    }

    private static String getPosString(Symbol token) {
        return getPosString(token.getLine(token.getStart()), token.getColumn(token.getStart()));
    }

    private static String getPosString(int line, int col) {
        return "[" + line + ", " + col + "]";
    }

    class Events extends Parser.Events {
        public void syntaxError(Symbol token) {
            errors.add(getPosString(token) + "  unexpected token " + Terminals.NAMES[token.getId()]);
        }
        public void scannerError(Scanner.Exception e) {
            errors.add(getPosString(e.line + 1, e.column + 1) + "  scanner error: " + e.getMessage());
        }
        public void unexpectedTokenRemoved(Symbol token) {
            errors.add(getPosString(token) + "  try deleting " + Terminals.NAMES[token.getId()]);
        }
        public void missingTokenInserted(Symbol token) {
            errors.add(getPosString(token) + "  try inserting " + Terminals.NAMES[token.getId()]);
        }
        public void misspelledTokenReplaced(Symbol token) {
            errors.add(getPosString(token) + "  try replacing with " + Terminals.NAMES[token.getId()]);
        }
    }

    { report = new Events(); } // Use error handler in parser
:};

%terminals IDENTIFIER, LPAREN, RPAREN;
%typeof IDENTIFIER = "String";

%goal Start;

Start
  = NonTerm+
  ;

NonTerm
  = IDENTIFIER
  | LPAREN
  | RPAREN
  ;