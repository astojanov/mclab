%import "natlab.ast.*";
%import "java.util.Iterator";

%package "natlab";

%class "NatlabParser";

%embed {:
    private final java.util.List<String> errors = new java.util.ArrayList<String>();

    public java.util.List<String> getErrors() {
        return java.util.Collections.unmodifiableList(errors);
    }

    public boolean hasError() {
        return !errors.isEmpty();
    }

    private static String getPosString(Symbol token) {
        return getPosString(token.getLine(token.getStart()), token.getColumn(token.getStart()));
    }

    private static String getPosString(int line, int col) {
        return "[" + line + ", " + col + "]";
    }

    class Events extends Parser.Events {
        public void syntaxError(Symbol token) {
            errors.add(getPosString(token) + "  unexpected token " + Terminals.NAMES[token.getId()]);
        }
        public void scannerError(Scanner.Exception e) {
            errors.add(getPosString(e.line + 1, e.column + 1) + "  scanner error: " + e.getMessage());
        }
        public void unexpectedTokenRemoved(Symbol token) {
            errors.add(getPosString(token) + "  try deleting " + Terminals.NAMES[token.getId()]);
        }
        public void missingTokenInserted(Symbol token) {
            errors.add(getPosString(token) + "  try inserting " + Terminals.NAMES[token.getId()]);
        }
        public void misspelledTokenReplaced(Symbol token) {
            errors.add(getPosString(token) + "  try replacing with " + Terminals.NAMES[token.getId()]);
        }
    }

    { report = new Events(); } // Use error handler in parser
    
    private static <T extends ASTNode<?>> natlab.ast.List<T> addAll(natlab.ast.List<T> node, java.util.List<T> children) {
        for(T child : children) {
            node.add(child);
        }
        return node;
    }

    private static <T extends ASTNode<?>> natlab.ast.List<T> makeListNode(java.util.List<T> children) {
        return addAll(new natlab.ast.List<T>(), children);
    }
:};

%terminals IDENTIFIER;
%terminals INT_NUMBER, FP_NUMBER, IM_INT_NUMBER, IM_FP_NUMBER;
%terminals COMMENT, HELP_COMMENT, ELLIPSIS_COMMENT, BRACKET_COMMENT, BRACKET_HELP_COMMENT, SHELL_COMMAND;
%terminals LPAREN, RPAREN, LSQUARE, RSQUARE, LCURLY, RCURLY;
%terminals BREAK, CASE, CATCH, CLASSDEF, CONTINUE, ELSE, ELSEIF, END, FOR, FUNCTION, GLOBAL, IF, OTHERWISE, PARFOR, PERSISTENT, RETURN, SWITCH, TRY, WHILE;
%terminals PLUS, MINUS, MTIMES, ETIMES, MDIV, EDIV, MLDIV, ELDIV, MPOW, EPOW, MTRANSPOSE, ARRAYTRANSPOSE, LE, GE, LT, GT, EQ, NE, AND, OR, NOT, SHORTAND, SHORTOR, ASSIGN;
%terminals DOT, COMMA, SEMICOLON, LINE_TERMINATOR, COMMA_LINE_TERMINATOR, SEMICOLON_LINE_TERMINATOR;
%terminals COLON, AT;
%terminals STRING;
%terminals PROPERTIES, METHODS, EVENTS;

%typeof program = "Root";
%typeof stmt_list = "List<Stmt>";
%typeof stmt, stmt_body, last_stmt = "Stmt";
%typeof for_assign, assign = "AssignStmt";
%typeof expr, binary_expr, colon_expr, prefix_expr, postfix_expr, pow_expr, primary_expr = "Expr";
%typeof lvalue = "Access";
%typeof arg_list = "List<Expr>";
%typeof arg = "Expr";
%typeof matrix = "MatrixDecl";
%typeof row_list, optional_row_list = "List<MatrixRow>";
%typeof row = "MatrixRow";
%typeof literal = "Literal";
%typeof name, simple_name = "ParseName";

%typeof IDENTIFIER, COMMENT, HELP_COMMENT, STRING = "String";
%typeof INT_NUMBER, IM_INT_NUMBER = "IntNumericLiteralValue";
%typeof FP_NUMBER, IM_FP_NUMBER = "FPNumericLiteralValue";

// Precedence and associativity.
//NB: everything seems to be left associative in matlab (even pow and ldiv)
%left MPOW, EPOW;
%left MTIMES, MDIV, MLDIV, ETIMES, EDIV, ELDIV;
%left PLUS, MINUS;
%left LT, GT, LE, GE;
%left EQ, NE;
%left AND, SHORTAND;
%left OR, SHORTOR;

%goal program;

// Currently, a .m file is treated as a list of statements.
program = 
     stmt_list.list {: return new Root(list); :}
  |  OtherNonTerm {: return new Root(new List()); :} //TODO-AC: eventually remove this
  ;

stmt_list =
     stmt.stmts+ last_stmt.s {: return makeListNode(_list_stmts).add(s); :}
  |  last_stmt.s {: return new List<Stmt>().add(s); :}
  ;

last_stmt =
     stmt_body.s
  |  stmt
  ;

stmt =
     stmt_body.s stmt_separator
  |  stmt_separator {: return new EmptyStmt(""); :} //TODO-AC: do we really need this in the AST?
  ;

stmt_body =
     HELP_COMMENT.str {: return new CommentStmt(str); :} //TODO-AC: these aren't stmts
  |  BRACKET_HELP_COMMENT.str {: return new CommentStmt(str); :} //TODO-AC: these aren't stmts
  |  expr.e {: return new ExprStmt(e); :}
  |  assign.a
//  |  if_then_statement
//  |  if_then_else_statement
//  |  while_statement
//  |  switch_statement
//  |  do_statement
//  |  break_statement
//  |  continue_statement
//  |  try_statement
  | FOR for_assign.a stmt_separator stmt_list.l END {: return new ForStmt(a, l); :}
  ;

stmt_separator =
     LINE_TERMINATOR
  |  SEMICOLON
  |  SEMICOLON_LINE_TERMINATOR
  |  COMMA
  |  COMMA_LINE_TERMINATOR
//  |  EOF //TODO-AC
  ;

for_assign =
     assign.a
  |  LPAREN assign.a RPAREN
  ;

assign =
     lvalue.lhs ASSIGN expr.rhs {: return new AssignStmt(lhs, rhs); :}
  ;

lvalue =
     name.id
  |  access.a
  ;

access =
     name.n LPAREN RPAREN
     {:
         ParseName pn = (ParseName) n;
         return new MethodAccess(pn.getID(), new List());
     :}
  |  name.n LPAREN arg_list.l RPAREN
     {:
         ParseName pn = (ParseName) n;
         return new MethodAccess(pn.getID(), l);
     :}
  ;

name =
     simple_name.n
  ;

simple_name =
     IDENTIFIER.id {: return new ParseName(id); :}
  ;

//precedence from: http://www.mathworks.com/access/helpdesk/help/techdoc/matlab_prog/f0-40063.html
expr =
     colon_expr.e
  |  expr.e1 LT expr.e2 {: return new LTExpr(e1, e2); :}
  |  expr.e1 GT expr.e2 {: return new GTExpr(e1, e2); :}
  |  expr.e1 LE expr.e2 {: return new LEExpr(e1, e2); :}
  |  expr.e1 GE expr.e2 {: return new GEExpr(e1, e2); :}
  |  expr.e1 EQ expr.e2 {: return new EQExpr(e1, e2); :}
  |  expr.e1 NE expr.e2 {: return new NEExpr(e1, e2); :}
  |  expr.e1 AND expr.e2 {: return new AndLogicalExpr(e1, e2); :}
  |  expr.e1 OR expr.e2 {: return new OrLogicalExpr(e1, e2); :}
  |  expr.e1 SHORTAND expr.e2 {: return new ShortCircuitAndExpr(e1, e2); :}
  |  expr.e1 SHORTOR expr.e2 {: return new ShortCircuitOrExpr(e1, e2); :}
  ;

colon_expr =
     binary_expr.e
  |  binary_expr.e1 COLON binary_expr.e3 {: return new ColonExpr(e1, new Opt(), e3); :}
  |  binary_expr.e1 COLON binary_expr.e2 COLON binary_expr.e3 {: return new ColonExpr(e1, new Opt(e2), e3); :}
  ;

binary_expr =
     prefix_expr.e
  |  binary_expr.e1 MTIMES binary_expr.e2  {: return new MulExpr(e1, e2); :}
  |  binary_expr.e1 ETIMES binary_expr.e2  {: return new EMulExpr(e1, e2); :}
  |  binary_expr.e1 MDIV binary_expr.e2    {: return new DivExpr(e1, e2); :}
  |  binary_expr.e1 EDIV binary_expr.e2    {: return new EDivExpr(e1, e2); :}
  |  binary_expr.e1 MLDIV binary_expr.e2   {: return new LeftDivExpr(e1, e2); :}
  |  binary_expr.e1 ELDIV binary_expr.e2   {: return new ELeftDivExpr(e1, e2); :}
  |  binary_expr.e1 PLUS binary_expr.e2    {: return new AddExpr(e1, e2); :}
  |  binary_expr.e1 MINUS binary_expr.e2   {: return new SubExpr(e1, e2); :}
  ;

prefix_expr =
     pow_expr.e
  |  NOT prefix_expr.e {: return new LogNotExpr(e); :}
  |  PLUS prefix_expr.e {: return new PlusExpr(e); :}
  |  MINUS prefix_expr.e {: return new MinusExpr(e); :}
  ;

pow_expr =
     postfix_expr.e
  |  pow_expr.e1 MPOW pow_expr.e2    {: return new PowExpr(e1, e2); :}
  |  pow_expr.e1 EPOW pow_expr.e2    {: return new EPowExpr(e1, e2); :}
  ;

postfix_expr =
     primary_expr.e
  |  postfix_expr.e ARRAYTRANSPOSE {: return new ArrayTransposeExpr(e); :}
  |  postfix_expr.e MTRANSPOSE {: return new TransposeExpr(e); :}
  ;

primary_expr =
     literal.l
  |  LPAREN expr.e RPAREN
  |  matrix.m
  |  access.a
//  |  AT name.n //TODO-AC: return handle node 
  |  name.n
  ;

literal =
     INT_NUMBER.i {: return new IntegerLiteral(i); :}
  |  FP_NUMBER.f {: return new DoubleLiteral(f); :}
  |  STRING.s {: return new StringLiteral(s); :}
  ;

matrix =
     LSQUARE optional_row_list.l RSQUARE {: return new MatrixDecl(l); :}
  ;

optional_row_list =
     {: return new List<MatrixRow>(); :}
  |  row_separator {: return new List<MatrixRow>(); :}
  |  row_list.l {: return l; :}
  |  row_list.l row_separator {: return l; :}
  ;

row_list =
     row.r {: return new List<MatrixRow>().add(r); :}
  |  row_list.l row_separator row.r {: return l.add(r); :}
  ;

row =
     arg_list.l {: return new MatrixRow(l); :}
  ;

row_separator =
     LINE_TERMINATOR
  |  SEMICOLON
  |  SEMICOLON_LINE_TERMINATOR
  ;

arg_list =
     arg.a {: return new List<Expr>().add(a); :}
  |  arg_list.l COMMA arg.a {: return l.add(a); :}
  ;

arg =
     expr.e
  |  COLON.c {: return new Colon(":"); :}
  ;

OtherNonTerm =
    IM_INT_NUMBER
  | IM_FP_NUMBER
  | LCURLY
  | RCURLY
  | BREAK
  | CASE
  | CATCH
  | CLASSDEF
  | CONTINUE
  | ELSE
  | ELSEIF
  | FUNCTION
  | GLOBAL
  | IF
  | OTHERWISE
  | RETURN
  | PARFOR
  | PERSISTENT
  | SWITCH
  | TRY
  | WHILE
  | SHELL_COMMAND
  | ELLIPSIS_COMMENT
  | DOT
  | PROPERTIES
  | METHODS
  | EVENTS
  | COMMENT
  | BRACKET_COMMENT
  | AT
  ;
