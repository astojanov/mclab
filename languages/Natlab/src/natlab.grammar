%import "ast.*";

%package "natlab";

%class "NatlabParser";

%embed {:
    //// Errors ////////////////////////////////////////////////////////////////

    //list of errors encountered while parsing
    private final java.util.List<String> errors = new java.util.ArrayList<String>();

    public java.util.List<String> getErrors() {
        return java.util.Collections.unmodifiableList(errors);
    }

    public boolean hasError() {
        return !errors.isEmpty();
    }

    //given a symbol, return a canonical string representation of it's position
    private static String getPosString(Symbol token) {
        return getPosString(token.getLine(token.getStart()), token.getColumn(token.getStart()));
    }

    //given a position, return a canonical string representation
    private static String getPosString(int line, int col) {
        return "[" + line + ", " + col + "]";
    }

    //override the default error handling:
    //  1) no writing to stderr
    //  2) no exceptions
    //  3) suggestions based on automatic corrections
    class Events extends Parser.Events {
        public void syntaxError(Symbol token) {
            errors.add(getPosString(token) + "  unexpected token " + Terminals.NAMES[token.getId()]);
        }
        public void scannerError(Scanner.Exception e) {
            errors.add(getPosString(e.line, e.column) + "  scanner error: " + e.getMessage());
        }
        public void unexpectedTokenRemoved(Symbol token) {
            errors.add(getPosString(token) + "  try deleting " + Terminals.NAMES[token.getId()]);
        }
        public void missingTokenInserted(Symbol token) {
            errors.add(getPosString(token) + "  try inserting " + Terminals.NAMES[token.getId()]);
        }
        public void misspelledTokenReplaced(Symbol token) {
            errors.add(getPosString(token) + "  try replacing with " + Terminals.NAMES[token.getId()]);
        }
    }

    //tell handler to use subclass defined above
    { report = new Events(); }
    
    //// AST helpers ///////////////////////////////////////////////////////////

    //add all elements of a util list to an ast list
    private static <T extends ASTNode<?>> ast.List<T> addAll(ast.List<T> node, java.util.List<T> children) {
        for(T child : children) {
            node.add(child);
        }
        return node;
    }

    //make a new ast list for a given util list
    private static <T extends ASTNode<?>> ast.List<T> makeListNode(java.util.List<T> children) {
        if(children == null) {
            return null;
        }
        return addAll(new ast.List<T>(), children);
    }

    //// Stmt terminators //////////////////////////////////////////////////////

    //return type of statement terminators
    //need this because non-terminals must return symbols
    private static class BooleanFakeSymbol extends Symbol {
        private boolean value;
        BooleanFakeSymbol(boolean value) { this.value = value; }
        Stmt annotateStmt(Stmt stmt) { stmt.setOutputSuppressed(value); return stmt; }
    }

    //// Comments //////////////////////////////////////////////////////////////

    //comment buffer populated by scanner
    //should be non-null, but null is handled gracefully
    private CommentBuffer commentBuffer = null;

    public void setCommentBuffer(CommentBuffer commentBuffer) {
        this.commentBuffer = commentBuffer;
    }

    public CommentBuffer getCommentBuffer() {
        return commentBuffer;
    }

    //attach all comments since last request to provided node
    private <T extends ASTNode> T annotateWithComments(T node) {
        if(node != null && commentBuffer != null) {
            node.setComments(commentBuffer.pollAllComments());
        }
        return node;
    }

    //AST really doesn't like null nodes, but beaver returns null for empty optional lists
    //Create an appropriate empty node to replace the null
    private static <T extends ASTNode> List<T> nullToEmpty(List<T> original) {
        return original == null ? new List<T>() : original;
    }

    //helper for constructing an AST Function node
    //separates stmts from nested functions and attaches comments
    private Function function(List<Name> outParams, String name, List<Name> inParams, ArrayList<HelpComment> comments, ArrayList<Symbol> body) {
        List<Stmt> stmts = new List<Stmt>();
        List<Function> nestedFunctions = new List<Function>();
        if(body != null) {
            for(Symbol stmtOrFcn : body) {
                if(stmtOrFcn instanceof Stmt) {
                    stmts.add((Stmt) stmtOrFcn);
                } else if(stmtOrFcn instanceof Function) {
                    nestedFunctions.add((Function) stmtOrFcn);
                } else {
                    //NB: programmatic error, not parser error
                    int pos = stmtOrFcn.getStart();
                    int line = Symbol.getLine(pos);
                    int col = Symbol.getColumn(pos);
                    throw new RuntimeException("Symbol in body is neither a Stmt nor a Function: " + getPosString(stmtOrFcn) + "  " + stmtOrFcn);
                }
            }
        }
        return annotateWithComments(new Function(
                nullToEmpty(outParams),
                name,
                nullToEmpty(inParams),
                nullToEmpty(makeListNode(comments)),
                stmts,
                nestedFunctions));
    }
    
    //helper for constructing an AST ClassDef node
    //separates properties, methods and events
    private ClassDef classdef(List<Attribute> attr, String name, List<SuperClass> supClass, ArrayList<HelpComment> comments, ArrayList<Symbol> body) {
        List<Properties> prop = new List<Properties>();
        List<Methods> methods = new List<Methods>();
        List<ClassEvents> events = new List<ClassEvents>();
        
        if(body != null) {
            for(Symbol propOrMethodOrEvent : body) {
                if(propOrMethodOrEvent instanceof Properties) {
                    prop.add((Properties) propOrMethodOrEvent);
                } else if(propOrMethodOrEvent instanceof Methods) {
                    methods.add((Methods) propOrMethodOrEvent);
                } else if(propOrMethodOrEvent instanceof ClassEvents) {
                    events.add((ClassEvents) propOrMethodOrEvent);
                } else {
                    //NB: programmatic error, not parser error
                    int pos = propOrMethodOrEvent.getStart();
                    int line = Symbol.getLine(pos);
                    int col = Symbol.getColumn(pos);
                    throw new RuntimeException("Symbol in body is neither a Signature nor a Function: " + getPosString(propOrMethodOrEvent) + "  " + propOrMethodOrEvent);
                }
            }
        }
        return new ClassDef(nullToEmpty(attr), name, nullToEmpty(supClass), nullToEmpty(makeListNode(comments)), prop, methods, events);
    }
    
    //helper for constructing an AST Methods node
    //separates signatures from functions
    private Methods methods(List<Attribute> attr, ArrayList<Symbol> body) {
        List<Signature> sign = new List<Signature>();
        List<PropertyAccess> prop = new List<PropertyAccess>();
        List<Function> function = new List<Function>();
        if(body != null) {
            for(Symbol signOrFcn : body) {
                if(signOrFcn instanceof Signature) {
                    sign.add((Signature) signOrFcn);
                } else if(signOrFcn instanceof PropertyAccess) {
                    prop.add((PropertyAccess) signOrFcn);
                } else if(signOrFcn instanceof Function) {
                    function.add((Function) signOrFcn);
                } else {
                    //NB: programmatic error, not parser error
                    int pos = signOrFcn.getStart();
                    int line = Symbol.getLine(pos);
                    int col = Symbol.getColumn(pos);
                    throw new RuntimeException("Symbol in body is neither a Signature nor a Function: " + getPosString(signOrFcn) + "  " + signOrFcn);
                }
            }
        }
        return new Methods(nullToEmpty(attr), sign, prop, function);
    }
    
    //helper for constructing an AST PropertAccess node
    //separates stmts from nested functions and attaches comments
    private PropertyAccess propertyAccess(List<Name> outParams, String access, String name, List<Name> inParams, ArrayList<HelpComment> comments, ArrayList<Symbol> body) {
        List<Stmt> stmts = new List<Stmt>();
        List<Function> nestedFunctions = new List<Function>();
        if(body != null) {
            for(Symbol stmtOrFcn : body) {
                if(stmtOrFcn instanceof Stmt) {
                    stmts.add((Stmt) stmtOrFcn);
                } else if(stmtOrFcn instanceof Function) {
                    nestedFunctions.add((Function) stmtOrFcn);
                } else {
                    //NB: programmatic error, not parser error
                    int pos = stmtOrFcn.getStart();
                    int line = Symbol.getLine(pos);
                    int col = Symbol.getColumn(pos);
                    throw new RuntimeException("Symbol in body is neither a Stmt nor a Function: " + getPosString(stmtOrFcn) + "  " + stmtOrFcn);
                }
            }
        }
        return annotateWithComments(new PropertyAccess(
                nullToEmpty(outParams),
                access,
                name,
                nullToEmpty(inParams),
                nullToEmpty(makeListNode(comments)),
                stmts,
                nestedFunctions));
    }
:};

%terminals IDENTIFIER;
%terminals INT_NUMBER, FP_NUMBER, IM_INT_NUMBER, IM_FP_NUMBER;
%terminals COMMENT, HELP_COMMENT, ELLIPSIS_COMMENT, BRACKET_COMMENT, BRACKET_HELP_COMMENT, SHELL_COMMAND;
%terminals LPAREN, RPAREN, LSQUARE, RSQUARE, LCURLY, RCURLY;
%terminals BREAK, CASE, CATCH, CLASSDEF, CONTINUE, ELSE, ELSEIF, END, FOR, FUNCTION, GLOBAL, IF, OTHERWISE, PARFOR, PERSISTENT, RETURN, SWITCH, TRY, WHILE;
%terminals PLUS, MINUS, MTIMES, ETIMES, MDIV, EDIV, MLDIV, ELDIV, MPOW, EPOW, MTRANSPOSE, ARRAYTRANSPOSE, LE, GE, LT, GT, EQ, NE, AND, OR, NOT, SHORTAND, SHORTOR, ASSIGN;
%terminals DOT, COMMA, SEMICOLON, LINE_TERMINATOR, COMMA_LINE_TERMINATOR, SEMICOLON_LINE_TERMINATOR;
%terminals COLON, AT;
%terminals STRING;
%terminals PROPERTIES, METHODS, EVENTS;

//// ANNOTATION EXTENSION - START //////////////////////////////////////////////

%terminals ANNOTATION;
%typeof ANNOTATION = "String";

//// ANNOTATION EXTENSION - END ////////////////////////////////////////////////

%typeof program, program_before_comments = "Program";
%typeof script = "Script";
%typeof function_list = "FunctionList";
%typeof function, function_body = "Function";
%typeof stmt_or_function = "Symbol";
%typeof input_params, output_params, param_list = "List<Name>";

%typeof class_def = "ClassDef";
%typeof attribute = "Attribute";
%typeof attribute_list, attributes = "List<Attribute>";
%typeof superclass_list = "List<SuperClass>";
%typeof class_body = "ClassBody";
%typeof properties_block = "Properties";
%typeof methods_block = "Methods";
%typeof events_block = "ClassEvents";
%typeof properties_body = "Property";
%typeof methods_body = "Symbol";
%typeof events_body = "Event";
%typeof function_signature = "Signature";
%typeof property_access = "PropertAccess";

%typeof stmt_list = "List<Stmt>";
%typeof stmt, stmt_body, last_stmt, stmt_body_before_comments = "Stmt";
%typeof for_assign = "AssignStmt";
%typeof expr, logic_expr, binary_expr, colon_expr, prefix_expr, postfix_expr, pow_expr, prefix_exp_expr, primary_expr = "Expr";
%typeof arg, logic_arg, binary_arg, colon_arg, prefix_arg, postfix_arg, pow_arg, prefix_exp_arg, primary_arg = "Expr";
%typeof arg_list = "List<Expr>";
%typeof element_list = "List<Expr>";
%typeof element = "Expr";
%typeof matrix = "MatrixExpr";
%typeof row_list, optional_row_list = "List<Row>";
%typeof row = "Row";
%typeof literal = "LiteralExpr";
%typeof name = "Name";
%typeof stmt_separator = "BooleanFakeSymbol";
%typeof help_comment, help_comment_body, last_help_comment = "HelpComment";
%typeof else_clause = "ElseBlock";
%typeof else_if_clause = "IfBlock";
%typeof if_statement = "IfStmt";
%typeof switch_statement = "SwitchStmt";
%typeof switch_case = "SwitchCaseBlock";
%typeof default_case = "DefaultCaseBlock";
%typeof access, cell_access = "Expr";

%typeof IDENTIFIER, COMMENT, HELP_COMMENT, STRING = "String";
%typeof INT_NUMBER, IM_INT_NUMBER = "IntNumericLiteralValue";
%typeof FP_NUMBER, IM_FP_NUMBER = "FPNumericLiteralValue";

// Precedence and associativity.
//NB: everything seems to be left associative in matlab (even pow and ldiv)
%left MPOW, EPOW;
%left MTIMES, MDIV, MLDIV, ETIMES, EDIV, ELDIV;
%left PLUS, MINUS;
%left LT, GT, LE, GE;
%left EQ, NE;
%left AND;
%left OR;
%left SHORTAND;
%left SHORTOR;

%goal program;

//everything
program =
     //gather up any unclaimed comments
     program_before_comments.p {: return annotateWithComments(p); :}
  ;

//everything except left-over comments
program_before_comments = 
     script.s
  |  function_list.f
  |  class_def.c
  |  {: return new EmptyProgram(); :}
  |  OtherTerminal {: return new EmptyProgram(); :} //TODO-AC: eventually remove this
  ;

//script file: list of help comments followed by list of stmts
//NB: must be non-empty to avoid conflicting with EmptyProgram case above
script =
     //NB: can't use a stmt_list here - it causes a bunch of warnings (not sure why)
     stmt.stmts+ last_stmt.s {: return new Script(new List<HelpComment>(), makeListNode(_list_stmts).add(s)); :}
  |  last_stmt.s {: return new Script(new List<HelpComment>(), new List<Stmt>().add(s)); :}
  |  help_comment.comments+ stmt.stmts+ last_stmt.s {: return new Script(makeListNode(_list_comments), makeListNode(_list_stmts).add(s)); :}
  |  help_comment.comments+ last_stmt.s {: return new Script(makeListNode(_list_comments), new List<Stmt>().add(s)); :}
  |  help_comment.comments+ last_help_comment.c {: return new Script(makeListNode(_list_comments).add(c), new List<Stmt>()); :}
  |  last_help_comment.c {: return new Script(new List<HelpComment>().add(c), new List<Stmt>()); :}
  ;

//function file: list of functions, separated by whitespace
//NB: must be non-empty to avoid conflicting with EmptyProgram case above
function_list =
     function.functions+ {: return new FunctionList(makeListNode(_list_functions)); :}
  ;

//function followed by whitespace - only used by function_list (otherwise use function_body)
function =
     function_body.f LINE_TERMINATOR*
  ;

//a function with nothing following the final END
function_body =
     //output params
     FUNCTION output_params.out ASSIGN IDENTIFIER.name input_params.in? stmt_separator help_comment.comments* stmt_or_function.body* END
         {: return function(out, name, in, _list_comments, _list_body); :}
     //no output params
  |  FUNCTION IDENTIFIER.name input_params.in? stmt_separator help_comment.comments* stmt_or_function.body* END
         {: return function(null, name, in, _list_comments, _list_body); :}
  ;

//input parameter list for a function
input_params =
     LPAREN RPAREN {: return new List<Name>(); :}
  |  LPAREN param_list.l RPAREN
  ;

//output parameter list for a function
output_params =
     LSQUARE RSQUARE {: return new List<Name>(); :}
  |  LSQUARE param_list.l RSQUARE
  |  IDENTIFIER.p {: return new List<Name>().add(new Name(p)); :}
  ;

//Non-empty, comma-separated list of parameters (note: no trailing comma)
//shared by input and output parameters
param_list =
     IDENTIFIER.p {: return new List<Name>().add(new Name(p)); :}
  |  param_list.l COMMA IDENTIFIER.p {: return l.add(new Name(p)); :}
  ;

//used to mix stmts and nested functions in a containing function
stmt_or_function =
     stmt.s
     //NB: body since otherwise there is a conflict: function newline could be 
     //  (function, empty stmt) or (function with newline)
     //resolve as (function, empty stmt) because that's easier
     //TODO-AC: eliminate spurious empty stmts?
  |  function_body.f
  ;

//a classdef file
//NB: must be non-empty to avoid conflicting with EmptyProgram case above
class_def =
	 CLASSDEF attributes.attr? IDENTIFIER.name stmt_separator+ help_comment.comments* class_body.body* END 
	 	{: return classdef(attr, name, null, _list_comments, _list_body); :}
  |  CLASSDEF attributes.attr? IDENTIFIER.name LT superclass_list.superclasses stmt_separator+ help_comment.comments* class_body.body* END 
  		{: return classdef(attr, name, superclasses, _list_comments, _list_body); :}
  ;
  
attributes =
	 LPAREN attribute_list.a RPAREN
  ;
  
attribute_list =
	 attribute.a {: return new List<Attribute>().add(a); :}
  |  attribute_list.l COMMA attribute.a {: return l.add(a); :}
  ;
    
attribute =
	 IDENTIFIER.key {: return new Attribute(key, new NameExpr(new Name("true"))); :}
  |  NOT IDENTIFIER.key {: return new Attribute(key, new NameExpr(new Name("false"))); :}
  |  IDENTIFIER.key ASSIGN expr.value {: return new Attribute(key, value); :}
  ;
   
superclass_list =
	 IDENTIFIER.name {: return new List<SuperClass>().add(new SuperClass(name)); :}
  |  superclass_list.l AND IDENTIFIER.name {: return l.add(new SuperClass(name)); :}
  ;
  
class_body =
	 properties_block.p stmt_separator*
  |  methods_block.m stmt_separator*
  |  events_block.e stmt_separator*
  ;
  
properties_block =
	 PROPERTIES attributes.attr? stmt_separator+ properties_body.body* END
	 {: return new Properties(nullToEmpty(attr), nullToEmpty(makeListNode(_list_body))); :}
  ;
  
methods_block =
	 METHODS attributes.attr? stmt_separator+ methods_body.body* END
	 {: return methods(attr, _list_body); :}
  ;
    
events_block =
	 EVENTS attributes.attr? stmt_separator+ events_body.body* END 
	 {: return new ClassEvents(nullToEmpty(attr), makeListNode(_list_body)); :}
  ;
  
properties_body =
	 IDENTIFIER.name stmt_separator+ {: return new Property(name, new MatrixExpr()); :}
  |  IDENTIFIER.name ASSIGN expr.value stmt_separator+ {: return new Property(name, value); :}
  ;

methods_body =
	 function.f
  |  function_signature.s
  |  property_access.p stmt_separator*
  ;
  
function_signature =
	 IDENTIFIER.name input_params.in? stmt_separator+ {: return new Signature(new List<Name>(), name, in); :}
  |  output_params.out ASSIGN IDENTIFIER.name input_params.in? stmt_separator+ {: return new Signature(out, name, in); :}
  ;
  
property_access =
     FUNCTION output_params.out ASSIGN IDENTIFIER.acc DOT IDENTIFIER.name input_params.in? stmt_separator help_comment.comments* stmt_or_function.body* END
         {: return propertyAccess(out, acc, name, in, _list_comments, _list_body); :}
  |  FUNCTION IDENTIFIER.acc DOT IDENTIFIER.name input_params.in? stmt_separator help_comment.comments* stmt_or_function.body* END
         {: return propertyAccess(null, acc, name, in, _list_comments, _list_body); :}
  ;
  
events_body =
	 IDENTIFIER.name stmt_separator+ {: return new Event(name); :}
  ;
  
//usually help comments are followed by a newline, but the last one could be followed by EOF instead
last_help_comment =
     help_comment.c
  |  help_comment_body.c
  ;

//help comment with a newline
help_comment =
     help_comment_body.c LINE_TERMINATOR
  ;

//help comment without a newline
help_comment_body =
     HELP_COMMENT.c {: return new OneLineHelpComment(c); :}
  |  BRACKET_HELP_COMMENT.c {: return new MultiLineHelpComment(c); :}
  ;

//list of statements (each followed by a separator)
//may be empty
stmt_list =
     stmt.stmts+ {: return makeListNode(_list_stmts); :}
  |  {: return new List<Stmt>(); :}
  ;

//usually stmts are followed by separators, but the last one could be followed by EOF instead
last_stmt =
     stmt_body.s
  |  stmt.s
  ;

//stmt followed by separator
stmt =
     stmt_body.s stmt_separator.sep {: return sep.annotateStmt(s); :}
     //NB: not attaching comments to empty statements
  |  stmt_separator.sep {: return sep.annotateStmt(new EmptyStmt()); :} //TODO-AC: how do we discard this?
  ;

//stmt not followed by separator
//production just exists to attach comments to the real stmt bodies in stmt_body_before_comments
stmt_body =
     stmt_body_before_comments.s {: return annotateWithComments(s); :}
  ;

//stmt not followed by a separator and not having attached comments
stmt_body_before_comments =
     expr.e {: return new ExprStmt(e); :}
  |  expr.lhs ASSIGN expr.rhs {: return new AssignStmt(lhs, rhs); :}
  |  GLOBAL  name.names+ {: return new GlobalStmt(makeListNode(_list_names)); :}
  |  PERSISTENT name.names+ {: return new PersistentStmt(makeListNode(_list_names)); :}
  |  SHELL_COMMAND.c {: return new ShellCommandStmt(c); :}
  |  TRY stmt_separator stmt_list.tl END {: return new TryStmt(tl, new List()); :}
  |  TRY stmt_separator stmt_list.tl CATCH stmt_separator stmt_list.cl END {: return new TryStmt(tl, cl); :}
  |  switch_statement
  |  if_statement
  |  BREAK    {: return new BreakStmt(); :}
  |  CONTINUE {: return new ContinueStmt(); :}
  |  RETURN   {: return new ReturnStmt(); :}
  |  WHILE expr.e stmt_separator stmt_list.l END {: return new WhileStmt(e, l); :}
  |  FOR for_assign.a stmt_separator stmt_list.l END {: return new ForStmt(a, l); :}
//// ANNOTATION EXTENSION - START //////////////////////////////////////////////
  |  ANNOTATION.a {: return new Annotation(a); :}
//// ANNOTATION EXTENSION - END ////////////////////////////////////////////////
  ;

switch_statement = 
     SWITCH expr.e stmt_separator default_case.d? END
        {: return new SwitchStmt(e, new List<SwitchCaseBlock>(), d == null ? new Opt<DefaultCaseBlock>() : new Opt<DefaultCaseBlock>(d)); :}
  |  SWITCH expr.e stmt_separator switch_case.s+ default_case.d? END
        {: return new SwitchStmt(e, makeListNode(_list_s), d == null ? new Opt<DefaultCaseBlock>() : new Opt<DefaultCaseBlock>(d)); :}
  ;

switch_case	= 
     CASE expr.e stmt_separator stmt_list.l {: return new SwitchCaseBlock(e, l); :}
  ;
default_case = 
     OTHERWISE stmt_separator stmt_list.l  {: return new DefaultCaseBlock(l); :}
  ;
  
if_statement = 
     IF expr.e stmt_separator stmt_list.l else_clause.els? END
        {: return new IfStmt(new List<IfBlock>().add(new IfBlock(e, l)), els == null ? new Opt<ElseBlock>() : new Opt<ElseBlock>(els)); :}
  |  IF expr.e stmt_separator stmt_list.l else_if_clause.elseif+ else_clause.els? END
        {:
            List<IfBlock> ifBlocks = makeListNode(_list_elseif);
            ifBlocks.insertChild(new IfBlock(e, l), 0);
            return new IfStmt(ifBlocks, els == null ? new Opt<ElseBlock>() : new Opt<ElseBlock>(els));
        :}
  ;

else_if_clause = 
     ELSEIF expr.e stmt_separator stmt_list.l  {: return new IfBlock(e, l); :}
  ;
  
else_clause = 
     ELSE stmt_separator stmt_list.l {: return new ElseBlock(l); :}
  ;

stmt_separator =
     LINE_TERMINATOR {: return new BooleanFakeSymbol(false); :}
  |  SEMICOLON {: return new BooleanFakeSymbol(true); :}
  |  SEMICOLON_LINE_TERMINATOR {: return new BooleanFakeSymbol(true); :}
  |  COMMA {: return new BooleanFakeSymbol(false); :}
  |  COMMA_LINE_TERMINATOR {: return new BooleanFakeSymbol(false); :}
  ;

//assingment appearing in a for loop (i.e. optionally surrounded by parens)
for_assign =
     name.lhs ASSIGN expr.rhs {: return new AssignStmt(new NameExpr(lhs), rhs); :}
  |  LPAREN name.lhs ASSIGN expr.rhs RPAREN {: return new AssignStmt(new NameExpr(lhs), rhs); :}
  ;

name =
     IDENTIFIER.id {: return new Name(id); :}
  ;

//precedence from: http://www.mathworks.com/access/helpdesk/help/techdoc/matlab_prog/f0-40063.html
expr =
     logic_expr.l
  |  AT input_params.params expr.body {: return new LambdaExpr(params, body); :}
  ;

logic_expr =
     colon_expr.e
  |  logic_expr.e1 LT logic_expr.e2 {: return new LTExpr(e1, e2); :}
  |  logic_expr.e1 GT logic_expr.e2 {: return new GTExpr(e1, e2); :}
  |  logic_expr.e1 LE logic_expr.e2 {: return new LEExpr(e1, e2); :}
  |  logic_expr.e1 GE logic_expr.e2 {: return new GEExpr(e1, e2); :}
  |  logic_expr.e1 EQ logic_expr.e2 {: return new EQExpr(e1, e2); :}
  |  logic_expr.e1 NE logic_expr.e2 {: return new NEExpr(e1, e2); :}
  |  logic_expr.e1 AND logic_expr.e2 {: return new AndExpr(e1, e2); :}
  |  logic_expr.e1 OR logic_expr.e2 {: return new OrExpr(e1, e2); :}
  |  logic_expr.e1 SHORTAND logic_expr.e2 {: return new ShortCircuitAndExpr(e1, e2); :}
  |  logic_expr.e1 SHORTOR logic_expr.e2 {: return new ShortCircuitOrExpr(e1, e2); :}
  ;

colon_expr =
     binary_expr.e
  |  binary_expr.e1 COLON binary_expr.e3 {: return new RangeExpr(e1, new Opt(), e3); :}
  |  binary_expr.e1 COLON binary_expr.e2 COLON binary_expr.e3 {: return new RangeExpr(e1, new Opt(e2), e3); :}
  ;

binary_expr =
     prefix_expr.e
  |  binary_expr.e1 MTIMES binary_expr.e2  {: return new MTimesExpr(e1, e2); :}
  |  binary_expr.e1 ETIMES binary_expr.e2  {: return new ETimesExpr(e1, e2); :}
  |  binary_expr.e1 MDIV binary_expr.e2    {: return new MDivExpr(e1, e2); :}
  |  binary_expr.e1 EDIV binary_expr.e2    {: return new EDivExpr(e1, e2); :}
  |  binary_expr.e1 MLDIV binary_expr.e2   {: return new MLDivExpr(e1, e2); :}
  |  binary_expr.e1 ELDIV binary_expr.e2   {: return new ELDivExpr(e1, e2); :}
  |  binary_expr.e1 PLUS binary_expr.e2    {: return new PlusExpr(e1, e2); :}
  |  binary_expr.e1 MINUS binary_expr.e2   {: return new MinusExpr(e1, e2); :}
  ;

prefix_expr =
     pow_expr.e
  |  NOT prefix_expr.e {: return new NotExpr(e); :}
  |  PLUS prefix_expr.e {: return new UPlusExpr(e); :}
  |  MINUS prefix_expr.e {: return new UMinusExpr(e); :}
  ;

pow_expr =
     postfix_expr.e
  |  pow_expr.e1 MPOW prefix_exp_expr.e2    {: return new MPowExpr(e1, e2); :}
  |  pow_expr.e1 EPOW prefix_exp_expr.e2    {: return new EPowExpr(e1, e2); :}
  ;

prefix_exp_expr =
     postfix_expr.e
  |  NOT prefix_exp_expr.e {: return new NotExpr(e); :}
  |  PLUS prefix_exp_expr.e {: return new UPlusExpr(e); :}
  |  MINUS prefix_exp_expr.e {: return new UMinusExpr(e); :}
  ;

postfix_expr =
     primary_expr.e
  |  postfix_expr.e ARRAYTRANSPOSE {: return new ArrayTransposeExpr(e); :}
  |  postfix_expr.e MTRANSPOSE {: return new MTransposeExpr(e); :}
  ;

primary_expr =
     literal.l
  |  LPAREN expr.e RPAREN
  |  matrix.m
  |  cell_array.c
  |  access.a
  |  AT name.name {: return new FunctionHandleExpr(name); :} //TODO-AC: allow qualified name?
  ;

access =
     cell_access.c
  |  cell_access.c LPAREN RPAREN {: return new ParameterizedExpr(c, new List<Expr>()); :}
  |  cell_access.c LPAREN arg_list.l RPAREN {: return new ParameterizedExpr(c, l); :}
  ;

cell_access =
     name.n {: return new NameExpr(n); :}
  |  name.f AT name.c {: return new SuperClassMethodExpr(f, c); :}
  |  cell_access.v LCURLY arg_list.l RCURLY {: return new CellIndexExpr(v, l); :}
  |  access.v DOT name.n {: return new DotExpr(v, n); :}
  ;

literal =
     INT_NUMBER.i {: return new IntLiteralExpr(i); :}
  |  IM_INT_NUMBER.i {: return new IntLiteralExpr(i); :}
  |  FP_NUMBER.f {: return new FPLiteralExpr(f); :}
  |  IM_FP_NUMBER.f {: return new FPLiteralExpr(f); :}
  |  STRING.s {: return new StringLiteralExpr(s); :}
  ;

matrix =
     LSQUARE optional_row_list.l RSQUARE {: return new MatrixExpr(l); :}
  ;

cell_array =
     LCURLY optional_row_list.l RCURLY {: return new CellArrayExpr(l); :}
  ;

optional_row_list =
     {: return new List<Row>(); :}
  |  row_separator {: return new List<Row>(); :}
  |  row_list.l {: return l; :}
  |  row_list.l row_separator {: return l; :}
  ;

row_list =
     row.r {: return new List<Row>().add(r); :}
  |  row_list.l row_separator row.r {: return l.add(r); :}
  ;

row =
     element_list.l COMMA? {: return new Row(l); :}
  ;

row_separator =
     LINE_TERMINATOR
  |  SEMICOLON
  |  SEMICOLON_LINE_TERMINATOR
  |  COMMA_LINE_TERMINATOR 
  ;

element_list =
     element.e {: return new List<Expr>().add(e); :}
  |  element_list.l COMMA element.e {: return l.add(e); :}
  ;
  
element =
     expr.e
  ;

arg_list =
     arg.a {: return new List<Expr>().add(a); :}
  |  arg_list.l COMMA arg.a {: return l.add(a); :}
  ;

//precedence from: http://www.mathworks.com/access/helpdesk/help/techdoc/matlab_prog/f0-40063.html
//just like expr except for COLON at top level and END at base level
arg =
     logic_arg.l
  |  AT input_params.params arg.body {: return new LambdaExpr(params, body); :} //TODO-AC: expr instead of arg?
  |  COLON.c {: return new ColonExpr(); :}
  ;

logic_arg =
     colon_arg.e
  |  logic_arg.e1 LT logic_arg.e2 {: return new LTExpr(e1, e2); :}
  |  logic_arg.e1 GT logic_arg.e2 {: return new GTExpr(e1, e2); :}
  |  logic_arg.e1 LE logic_arg.e2 {: return new LEExpr(e1, e2); :}
  |  logic_arg.e1 GE logic_arg.e2 {: return new GEExpr(e1, e2); :}
  |  logic_arg.e1 EQ logic_arg.e2 {: return new EQExpr(e1, e2); :}
  |  logic_arg.e1 NE logic_arg.e2 {: return new NEExpr(e1, e2); :}
  |  logic_arg.e1 AND logic_arg.e2 {: return new AndExpr(e1, e2); :}
  |  logic_arg.e1 OR logic_arg.e2 {: return new OrExpr(e1, e2); :}
  |  logic_arg.e1 SHORTAND logic_arg.e2 {: return new ShortCircuitAndExpr(e1, e2); :}
  |  logic_arg.e1 SHORTOR logic_arg.e2 {: return new ShortCircuitOrExpr(e1, e2); :}
  ;

colon_arg =
     binary_arg.e
  |  binary_arg.e1 COLON binary_arg.e3 {: return new RangeExpr(e1, new Opt(), e3); :}
  |  binary_arg.e1 COLON binary_arg.e2 COLON binary_arg.e3 {: return new RangeExpr(e1, new Opt(e2), e3); :}
  ;

binary_arg =
     prefix_arg.e
  |  binary_arg.e1 MTIMES binary_arg.e2  {: return new MTimesExpr(e1, e2); :}
  |  binary_arg.e1 ETIMES binary_arg.e2  {: return new ETimesExpr(e1, e2); :}
  |  binary_arg.e1 MDIV binary_arg.e2    {: return new MDivExpr(e1, e2); :}
  |  binary_arg.e1 EDIV binary_arg.e2    {: return new EDivExpr(e1, e2); :}
  |  binary_arg.e1 MLDIV binary_arg.e2   {: return new MLDivExpr(e1, e2); :}
  |  binary_arg.e1 ELDIV binary_arg.e2   {: return new ELDivExpr(e1, e2); :}
  |  binary_arg.e1 PLUS binary_arg.e2    {: return new PlusExpr(e1, e2); :}
  |  binary_arg.e1 MINUS binary_arg.e2   {: return new MinusExpr(e1, e2); :}
  ;

prefix_arg =
     pow_arg.e
  |  NOT prefix_arg.e {: return new NotExpr(e); :}
  |  PLUS prefix_arg.e {: return new UPlusExpr(e); :}
  |  MINUS prefix_arg.e {: return new UMinusExpr(e); :}
  ;

pow_arg =
     postfix_arg.e
  |  pow_arg.e1 MPOW prefix_exp_arg.e2    {: return new MPowExpr(e1, e2); :}
  |  pow_arg.e1 EPOW prefix_exp_arg.e2    {: return new EPowExpr(e1, e2); :}
  ;

prefix_exp_arg =
     postfix_arg.e
  |  NOT prefix_exp_arg.e {: return new NotExpr(e); :}
  |  PLUS prefix_exp_arg.e {: return new UPlusExpr(e); :}
  |  MINUS prefix_exp_arg.e {: return new UMinusExpr(e); :}
  ;

postfix_arg =
     primary_arg.e
  |  postfix_arg.e ARRAYTRANSPOSE {: return new ArrayTransposeExpr(e); :}
  |  postfix_arg.e MTRANSPOSE {: return new MTransposeExpr(e); :}
  ;

primary_arg =
     literal.l
  |  LPAREN arg.a RPAREN
  |  matrix.m
  |  cell_array.c
  |  access.a
  |  AT name.name {: return new FunctionHandleExpr(name); :} //TODO-AC: allow qualified name?
  |  END {: return new EndExpr(); :}
  ;

//terminals that we have to refer to in the grammar (so that beaver doesn't get rid of them)
//but which aren't used in other productions
OtherTerminal =
     PARFOR
  |  COMMENT
  |  ELLIPSIS_COMMENT
  |  BRACKET_COMMENT
  ;
