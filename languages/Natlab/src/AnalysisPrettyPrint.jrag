// =========================================================================== //
//                                                                             //
// Copyright 2008-2011 Andrew Casey, Jun Li, Jesse Doherty,                    //
//   Maxime Chevalier-Boisvert, Toheed Aslam, Anton Dubrau, Nurudeen Lameed,   //
//   Amina Aslam, Rahul Garg, Soroush Radpour, Olivier Savary Belanger,        //
//   Laurie Hendren, Clark Verbrugge and McGill University.                    //
//                                                                             //
//   Licensed under the Apache License, Version 2.0 (the "License");           //
//   you may not use this file except in compliance with the License.          //
//   You may obtain a copy of the License at                                   //
//                                                                             //
//       http://www.apache.org/licenses/LICENSE-2.0                            //
//                                                                             //
//   Unless required by applicable law or agreed to in writing, software       //
//   distributed under the License is distributed on an "AS IS" BASIS,         //
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  //
//   See the License for the specific language governing permissions and       //
//   limitations under the License.                                            //
//                                                                             //
// =========================================================================== //

aspect AnalysisPrettyPrint {

    syn String ASTNode.getAnalysisPrettyPrinted( analysis.StructuralAnalysis analysis )
    {
        StringBuffer buf = new StringBuffer();
        for(beaver.Symbol comment : getComments()) {
            buf.append(comment.value);
            buf.append("\n");
        }
        buf.append( getAnalysisPrettyPrintedLessComments( analysis ) );
        return buf.toString();
    }

    syn String ASTNode.getAnalysisPrettyPrintedLessComments( analysis.StructuralAnalysis analysis )
    {
        //throw new UnsupportedOperationException( getClass().getName() + ".getAnalysisPrettyPrintedLessComments( analysis )");
        return getPrettyPrintedLessComments();
    }

    eq CompilationUnits.getAnalysisPrettyPrintedLessComments( analysis.StructuralAnalysis analysis )
    {
        StringBuffer buf = new StringBuffer();

        boolean first = true;
        for( Program p : getPrograms() ){
            if( first )
                first = false;
            else
                buf.append("\n\n");
            
            buf.append( p.getAnalysisPrettyPrinted( analysis ) );
        }
        return buf.toString();
    }

    //program
    eq EmptyProgram.getAnalysisPrettyPrintedLessComments( analysis.StructuralAnalysis analysis ) {
        return "";
    }
      
    // Variable Declaration
    eq VariableDecl.getAnalysisPrettyPrintedLessComments( analysis.StructuralAnalysis analysis ) = "%Declare " + getID();
    
    
    // Script    
    eq Script.getAnalysisPrettyPrintedLessComments( analysis.StructuralAnalysis analysis ) {
        StringBuffer buf = new StringBuffer();
        for(HelpComment comment : getHelpComments()) {
            buf.append(comment.getAnalysisPrettyPrinted( analysis ));
            buf.append('\n');
        }
        for(Stmt stmt : getStmts()) {
            String stmtStr = stmt.getAnalysisPrettyPrinted( analysis );         
            buf.append(stmtStr.equals("") ? "" : stmtStr + "\n" );
        }
        return buf.toString();
    }
    
    eq FunctionList.getAnalysisPrettyPrintedLessComments( analysis.StructuralAnalysis analysis ) {
        StringBuffer buf = new StringBuffer();
        for(Function func : getFunctions()) {
            buf.append(func.getAnalysisPrettyPrinted( analysis ));
            buf.append('\n');
        }
        return buf.toString();
    }
    
    eq FunctionList.getAnalysisPrettyPrinted( analysis.StructuralAnalysis analysis ) {
        StringBuffer buf = new StringBuffer();
        buf.append(getAnalysisPrettyPrintedLessComments( analysis ));
        for(beaver.Symbol comment : getComments()) {
            buf.append(comment.value);
            buf.append("\n");
        }
        return buf.toString();
    }
    
    eq FunctionDecl.getAnalysisPrettyPrinted( analysis.StructuralAnalysis analysis ) {
        StringBuffer buf = new StringBuffer();
        buf.append(getAnalysisPrettyPrintedLessComments( analysis ));
                
        //collect all comments     
        StringBuffer cbuf = new StringBuffer();
         
        for(beaver.Symbol comment : getComments()) {
            cbuf.append(comment.value);
            cbuf.append("\n");
        }
        if (cbuf.length() > 0) 
        {
          // insert the comments before "end"; length of end = 3
          buf.insert(buf.length() - getIndent().length() - 3 , cbuf.toString() );
        }
        return buf.toString();
    }
    
    eq Function.getAnalysisPrettyPrintedLessComments( analysis.StructuralAnalysis analysis ) {
        StringBuffer buf = new StringBuffer();
        String indent = getIndent();
        buf.append(indent + "function ");
        buf.append(" [");
        boolean first = true;
        for(Name param : getOutputParams()) {
            if(!first) {
                buf.append(", ");
            }
            buf.append(param.getAnalysisPrettyPrinted( analysis ));
            first = false;
        }
        buf.append("] = ");
        buf.append(getName());
        buf.append("(");
        first = true;
        for(Name param : getInputParams()) {
            if(!first) {
                buf.append(", ");
            }
            buf.append(param.getAnalysisPrettyPrinted( analysis ));
            first = false;
        }
        buf.append(")");
        buf.append('\n');
        for(HelpComment comment : getHelpComments()) {
            buf.append(comment.getAnalysisPrettyPrinted( analysis ));
            buf.append('\n');
        }
        for(Stmt stmt : getStmts()) {
            String stmtStr = stmt.getAnalysisPrettyPrinted( analysis );         
            buf.append(stmtStr.equals("") ? "" : stmtStr + "\n" );
        }
        for(Function func : getNestedFunctions()) {
            buf.append(func.getAnalysisPrettyPrinted( analysis ));
            buf.append('\n');
        }
        buf.append(indent + "end");
        return buf.toString();
    }
       
    //help comments
    
    eq HelpComment.getAnalysisPrettyPrintedLessComments( analysis.StructuralAnalysis analysis ) = getText();

    //Stmts

    eq Stmt.getAnalysisPrettyPrintedLessComments( analysis.StructuralAnalysis analysis )
    {
        StringBuffer buf = new StringBuffer();
        String indent = getIndent();
        buf.append( getPrettyPrintedLessComments() );
        Object in, out;
        in = (Object)analysis.getInFlowSets().get( this );
        out = (Object)analysis.getOutFlowSets().get( this );
        if( in != null && out != null ){
            buf.append( "\n" + indent + "% Data flow of " + this.getClass() + "\n" + indent + "%\n" );
            if( in != null ){
                buf.append( indent + "% In set\n" );
                Scanner inScanner = new Scanner( in.toString() );
                while( inScanner.hasNextLine() )
                    buf.append( indent + "% " + inScanner.nextLine() + "\n" );
                buf.append( indent + "% \n" );
            }
            if( out != null ){
                buf.append( indent + "% Out set\n" );
                Scanner outScanner = new Scanner( out.toString() );
                while( outScanner.hasNextLine() )
                    buf.append( indent + "% " + outScanner.nextLine() + "\n" );
                buf.append( indent + "% \n" );
            }
            //buf.append( indent + "% \n" );
        }
        return buf.toString();
    }
    eq EmptyStmt.getAnalysisPrettyPrintedLessComments( analysis.StructuralAnalysis analysis )
    {
        return getPrettyPrintedLessComments();
    }
    eq ForStmt.getAnalysisPrettyPrintedLessComments( analysis.StructuralAnalysis analysis ) {
        StringBuffer buf = new StringBuffer();
        String indent = getIndent();
        buf.append(indent + "for ");
        String assignStmt = getAssignStmt().getAnalysisPrettyPrinted( analysis );
        buf.append( assignStmt.trim() );   // remove all initial tabs
        buf.append('\n');
        for(Stmt stmt : getStmts()) {
            String stmtStr = stmt.getAnalysisPrettyPrinted( analysis );         
            buf.append(stmtStr.equals("") ? "" : stmtStr + "\n" );
        }
        buf.append(indent + "end");
        Object in, out;
        in = (Object)analysis.getInFlowSets().get( this );
        out = (Object)analysis.getOutFlowSets().get( this );
        if( in != null && out != null ){
            buf.append( "\n" + indent + "% Data flow of " + this.getClass() + "\n" + indent + "%\n" );
            if( in != null ){
                buf.append( indent + "% In set\n" );
                Scanner inScanner = new Scanner( in.toString() );
                while( inScanner.hasNextLine() )
                    buf.append( indent + "% " + inScanner.nextLine() + "\n" );
                buf.append( indent + "% \n" );
            }
            if( out != null ){
                buf.append( indent + "% Out set\n" );
                Scanner outScanner = new Scanner( out.toString() );
                while( outScanner.hasNextLine() )
                    buf.append( indent + "% " + outScanner.nextLine() + "\n" );
                buf.append( indent + "% \n" );
            }
            buf.append( "\n" );
        }        
        return buf.toString();
    }

    eq WhileStmt.getAnalysisPrettyPrintedLessComments( analysis.StructuralAnalysis analysis ) {
        StringBuffer buf = new StringBuffer();
        String indent = getIndent();
        buf.append(indent + "while ");
        buf.append(getExpr().getAnalysisPrettyPrinted( analysis ));
        buf.append('\n');
        for(Stmt stmt : getStmts()) {
            String stmtStr = stmt.getAnalysisPrettyPrinted( analysis );         
            buf.append(stmtStr.equals("") ? "" : stmtStr + "\n" );
        }
        buf.append(indent + "end");
        Object in, out;
        in = (Object)analysis.getInFlowSets().get( this );
        out = (Object)analysis.getOutFlowSets().get( this );
        if( in != null && out != null ){
            buf.append( "\n" + indent + "% Data flow of " +this.getClass() + "\n" + indent + "%\n" );
            if( in != null ){
                buf.append( indent + "% In set\n" );
                Scanner inScanner = new Scanner( in.toString() );
                while( inScanner.hasNextLine() )
                    buf.append( indent + "% " + inScanner.nextLine() + "\n" );
                buf.append( indent + "% \n" );
            }
            if( out != null ){
                buf.append( indent + "% Out set\n" );
                Scanner outScanner = new Scanner( out.toString() );
                while( outScanner.hasNextLine() )
                    buf.append( indent + "% " + outScanner.nextLine() + "\n" );
                buf.append( indent + "% \n" );
            }
            buf.append( "\n" );
        }
        return buf.toString();
    }

    // if-elseif-else
    eq IfStmt.getAnalysisPrettyPrintedLessComments( analysis.StructuralAnalysis analysis ) {
        StringBuffer buf = new StringBuffer();
        String indent = getIndent();
        boolean first = true;
        for(IfBlock block : getIfBlocks()) {
            if(!first) {
                buf.append( indent + "else" );
            }
            buf.append(block.getAnalysisPrettyPrinted( analysis ));
            first = false;
        }
        if(hasElseBlock()) {
            buf.append(getElseBlock().getAnalysisPrettyPrinted( analysis ));
        }
        buf.append(indent + "end");
        Object in, out;
        in = (Object)analysis.getInFlowSets().get( this );
        out = (Object)analysis.getOutFlowSets().get( this );
        if( in != null && out != null ){
            buf.append( "\n" + indent + "% Data flow of " + this.getClass() + "\n" + indent + "%\n" );
            if( in != null ){
                buf.append( indent + "% In set\n" );
                Scanner inScanner = new Scanner( in.toString() );
                while( inScanner.hasNextLine() )
                    buf.append( indent + "% " + inScanner.nextLine() + "\n" );
                buf.append( indent + "% \n" );
            }
            if( out != null ){
                buf.append( indent + "% Out set\n" );
                Scanner outScanner = new Scanner( out.toString() );
                while( outScanner.hasNextLine() )
                    buf.append( indent + "% " + outScanner.nextLine() + "\n" );
                buf.append( indent + "% \n" );
            }
            buf.append( "\n" );
        }
        return buf.toString();
    }

    eq IfBlock.getAnalysisPrettyPrintedLessComments( analysis.StructuralAnalysis analysis ) {
        StringBuffer buf = new StringBuffer();
        String indent = getIndent();
        buf.append(indent + "if ");
        buf.append(getCondition().getAnalysisPrettyPrinted( analysis ));
        buf.append('\n');
        for(Stmt stmt : getStmts()) {
            String stmtStr = stmt.getAnalysisPrettyPrinted( analysis );         
            buf.append(stmtStr.equals("") ? "" : stmtStr + "\n" );
        }
        return buf.toString();
    }

    eq ElseBlock.getAnalysisPrettyPrintedLessComments( analysis.StructuralAnalysis analysis ) {
        StringBuffer buf = new StringBuffer();
        String indent = getIndent();
        buf.append(indent + "else ");
        buf.append('\n');
        for(Stmt stmt : getStmts()) {
            String stmtStr = stmt.getAnalysisPrettyPrinted( analysis );         
            buf.append(stmtStr.equals("") ? "" : stmtStr + "\n" );
        }
        return buf.toString();
    }
/////////////////////////////////////////////
    // switch-case
    eq SwitchStmt.getAnalysisPrettyPrintedLessComments( analysis.StructuralAnalysis analysis ) {
        StringBuffer buf = new StringBuffer();
        String indent = getIndent();
        buf.append(indent + "switch ");
        buf.append(getExpr().getAnalysisPrettyPrinted( analysis ));
        buf.append('\n');
        for(SwitchCaseBlock scase : getSwitchCaseBlocks()) {
            buf.append(scase.getAnalysisPrettyPrinted( analysis ));
        }
        if(hasDefaultCaseBlock()) {
            buf.append(getDefaultCaseBlock().getAnalysisPrettyPrinted( analysis ));
        }
        buf.append( indent + "end");
        Object in, out;
        in = (Object)analysis.getInFlowSets().get( this );
        out = (Object)analysis.getOutFlowSets().get( this );
        if( in != null && out != null ){
            buf.append( "\n" + indent + "% Data flow of " + this.getClass() + "\n" + indent + "%\n" );
            if( in != null ){
                buf.append( indent + "% In set\n" );
                Scanner inScanner = new Scanner( in.toString() );
                while( inScanner.hasNextLine() )
                    buf.append( indent + "% " + inScanner.nextLine() + "\n" );
                buf.append( indent + "% \n" );
            }
            if( out != null ){
                buf.append( indent + "% Out set\n" );
                Scanner outScanner = new Scanner( out.toString() );
                while( outScanner.hasNextLine() )
                    buf.append( indent + "% " + outScanner.nextLine() + "\n" );
                buf.append( indent + "% \n" );
            }
            buf.append( "\n" );
        }
        return buf.toString();
    }
    eq SwitchCaseBlock.getAnalysisPrettyPrintedLessComments( analysis.StructuralAnalysis analysis ) {
        StringBuffer buf = new StringBuffer();
        String indent = getIndent();
        buf.append(indent + "case ");
        buf.append(getExpr().getAnalysisPrettyPrinted( analysis ));
        buf.append('\n');
        for(Stmt stmt : getStmts()) {
            String stmtStr = stmt.getAnalysisPrettyPrinted( analysis );         
            buf.append(stmtStr.equals("") ? "" : stmtStr + "\n" );
        }
        return buf.toString();
    }
    eq DefaultCaseBlock.getAnalysisPrettyPrintedLessComments( analysis.StructuralAnalysis analysis ) {
        StringBuffer buf = new StringBuffer();
        String indent = getIndent();
        buf.append(indent + "otherwise ");
        buf.append('\n');
        for(Stmt stmt : getStmts()) {
            String stmtStr = stmt.getAnalysisPrettyPrinted( analysis );         
            buf.append(stmtStr.equals("") ? "" : stmtStr + "\n" );
        }
        return buf.toString();
    }

    // try-catch
    eq TryStmt.getAnalysisPrettyPrintedLessComments( analysis.StructuralAnalysis analysis ) {
        StringBuffer buf = new StringBuffer();
        String indent = getIndent();
        buf.append( indent + "try ");
        buf.append('\n');
        for(Stmt stmt : getTryStmts()) {
            String stmtStr = stmt.getAnalysisPrettyPrinted( analysis );         
            buf.append(stmtStr.equals("") ? "" : stmtStr + "\n" );
        }
        List<Stmt> catchList = getCatchStmts();
        if (catchList.getNumChild()>0) {
            buf.append( indent + "catch ");
            buf.append('\n');        
            for(Stmt stmt : catchList) {
                String stmtStr = stmt.getAnalysisPrettyPrinted( analysis );         
            	buf.append(stmtStr.equals("") ? "" : stmtStr + "\n" );
            }
        }
        buf.append( indent + "end" );
        Object in, out;
        in = (Object)analysis.getInFlowSets().get( this );
        out = (Object)analysis.getOutFlowSets().get( this );
        if( in != null && out != null ){
            buf.append( "\n" + indent + "% Data flow of " + this.getClass() + "\n" + indent + "%\n" );
            if( in != null ){
                buf.append( indent + "% In set\n" );
                Scanner inScanner = new Scanner( in.toString() );
                while( inScanner.hasNextLine() )
                    buf.append( indent + "% " + inScanner.nextLine() + "\n" );
                buf.append( indent + "% \n" );
            }
            if( out != null ){
                buf.append( indent + "% Out set\n" );
                Scanner outScanner = new Scanner( out.toString() );
                while( outScanner.hasNextLine() )
                    buf.append( indent + "% " + outScanner.nextLine() + "\n" );
                buf.append( indent + "% \n" );
            }
            buf.append( "\n" );
        }
        return buf.toString();
    }
}