aspect PrettyPrinter{
	public void ASTNode.pp() {}
	public void Program.pp() {}
	public void SubProgram.pp() {
		getProgramTitle().pp();
		getDeclarationSection().pp();
		getStatementSection().pp();
	}
	public void ProgramTitle.pp() {
	    System.out.print(getProgramType()+" "+getProgramName());
	    if(hasProgramParameterList()) {
	    	System.out.print("(");
	    	getProgramParameterList().pp();
	    	System.out.print(")");
	    }
	    System.out.println("\nimplict none");
	}
    public void ProgramParameterList.pp() {
        int size = getNumParameter();
        for(int i=0;i<size;i++) {
        	getParameter(i).pp();
        	if(i<size-1) {
        		System.out.print(",");
        	}
        }
    }
    public void Parameter.pp() {
    	System.out.print(getName());
    }
    public void DeclarationSection.pp() {
    	int size = getNumDeclStmt();
    	for(int i=0;i<size;i++) {
    		getDeclStmt(i).pp();
    		System.out.println("");
    	}    
    }
    public void DeclStmt.pp() {
    	System.out.print(getType());
    	if(hasKeywordList()) {
    	    System.out.print(" , ");
    		getKeywordList().pp();
    	}
    	if(hasShapeInfo()) {
    		System.out.print(" , ");
    		getShapeInfo().pp();
    	}
    	System.out.print(" :: ");
    	getVariableList().pp();
    }
    public void KeywordList.pp() {
    	int size = getNumKeyword();
        for(int i=0;i<size;i++) {
        	getKeyword(i).pp();
        	if(i<size-1) {
        		System.out.print(" , ");
        	}
        }
    }
    public void Keyword.pp() {
    	System.out.print(getName());
    }
    public void ShapeInfo.pp() {
    	System.out.print(getName());
    }
    public void VariableList.pp() {
    	int size = getNumVariable();
        for(int i=0;i<size;i++) {
        	getVariable(i).pp();
        	if(i<size-1) {
        		System.out.print(", ");
        	}
        }
    }
    public void Variable.pp() {
    	System.out.print(getName());
    }
    public void StatementSection.pp() {
    	int size = getNumStatement();
    	for(int i=0;i<size;i++) {
    		getStatement(i).pp();
    		System.out.println("");
    	}
    }
    public void Statement.pp() {}
    public void AssignLiteralStmt.pp() {
    	if(hasRuntimeCheck()) {
    		System.out.println(getRuntimeCheck());
    	}
    	getVariable().pp();
    	System.out.print(" = "+getLiteral()+";");
    }
    public void AbstractAssignToVarStmt.pp() {
    	if(hasRuntimeCheck()) {
    		System.out.println(getRuntimeCheck());
    	}
    	System.out.print(getTargetVariable()+" = "+getSourceVariable()+";");
    }
    public void AbstractAssignToListStmt.pp() {
    	if(hasRuntimeCheck()) {
    		System.out.println(getRuntimeCheck());
    	}
    	getExpression().pp();
    }
    public void Expression.pp() {}
    public void BinaryExpr.pp() {
    	int size = getNumVariable();
    	for(int i=0;i<size;i++) {
    		getVariable(i).pp();
    		if(i<size-1) {
        		System.out.print(",");
        	}
    	}
    	System.out.print(" = "+getOperand1()+" "+getOperator()+" "+getOperand2());
    }
    
    
    
    
    
}
