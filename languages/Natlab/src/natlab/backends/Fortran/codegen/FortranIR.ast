Program ::= SubProgram*;
SubProgram ::= ProgramTitle DeclarationSection StatementSection;

ProgramTitle ::= <ProgramType> <ProgramName> [ProgramParameterList];
ProgramParameterList ::= Parameter*;
Parameter ::= <Name: String>;

DeclarationSection ::= DeclStmt*;
DeclStmt ::= <Type> [KeywordList] [ShapeInfo] VariableList;
KeywordList ::= Keyword*;
VariableList ::= Variable*;
Keyword ::= <Name: String>;
Variable ::= <Name: String>;
ShapeInfo ::= <Name: String>;

StatementSection ::= Statement*;
abstract Statement;

AssignLiteralStmt: Statement ::= <RuntimeCheck> Variable <Literal>;

AbstractAssignToVarStmt: Statement ::= <RuntimeCheck> <TargetVariable> <SourceVariable>;

AbstractAssignToListStmt: Statement ::= <RuntimeCheck> Variable* Expression;
abstract Expression;
BinaryExpr: Expression ::= <Operand1> <Operation> <Operand2>;
UnaryExpr: Expression ::= <Operation> <Operand>;
DirectBuiltinExpr: Expression ::= <BuiltinFunc> <ArgsList>;
NotDirectBuiltinExpr: Expression ::= <CodeInline>;
BuiltinConstantExpr: Expression ::= <BuiltinFunc>;
IOOperationExpr: Expression ::= <IOOperation> Variable;
UserDefinedFunction: Expression ::= <FuncName> <ArgsList>;

Subroutines: Statement ::= <FuncName> <InputArgsList> <OutputArgsList>;

IfStmt: Statement ::= <Condition> IfBlock: StatementSection [ElseBlock: StatementSection];

WhileStmt: Statement ::= <Condition> WhileBlock: StatementSection;

ForStmt: Statement ::= <LoopVar> <LowBoundary> [Inc] <HighBoundary> ForBlock: StatementSection;
Inc ::= <Name: String>;
