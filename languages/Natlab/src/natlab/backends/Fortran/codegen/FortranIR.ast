Program ::= SubProgram*;
SubProgram ::= ProgramTitle DeclarationSection StatementSection <ProgramEnd>;

ProgramTitle ::= <ProgramType> <ProgramName> [ProgramParameterList];
ProgramParameterList ::= Parameter*;
Parameter ::= <Name: String>;

DeclarationSection ::= DeclStmt*;
DeclStmt ::= <Type> [KeywordList] [ShapeInfo] VariableList;
KeywordList ::= Keyword*;
VariableList ::= Variable*;
Keyword ::= <Name: String>;
Variable ::= <Name: String>;
ShapeInfo ::= <Name: String>;

StatementSection ::= Statement*;
abstract Statement;

CommentStmt: Statement ::= <Comment>;

AssignLiteralStmt: Statement ::= <Indent> [RuntimeCheck] Variable <Literal>;
RuntimeCheck ::= <Name: String>;

AbstractAssignToVarStmt: Statement ::= <Indent> [RuntimeCheck] <TargetVariable> <SourceVariable>;

AbstractAssignToListStmt: Statement ::= <Indent> [RuntimeCheck] Expression;
abstract Expression;
BinaryExpr: Expression ::= Variable* <Operand1> <Operator> <Operand2>;
UnaryExpr: Expression ::= Variable* <Operator> <Operand>;
DirectBuiltinExpr: Expression ::= Variable* <BuiltinFunc> <ArgsList>;
NoDirectBuiltinExpr: Expression ::= <CodeInline>;
BuiltinConstantExpr: Expression ::= Variable* <BuiltinFunc>;
IOOperationExpr: Expression ::= <IOOperator> <ArgsList>;
UserDefinedFunction: Expression ::= Variable* <FuncName> <ArgsList>;

Subroutines: Expression ::= <Indent> <FuncName> <InputArgsList> <OutputArgsList>;

IfStmt: Statement ::= <Indent> <Condition> IfBlock: StatementSection [ElseBlock: StatementSection];

WhileStmt: Statement ::= <Indent> <Condition> WhileBlock: StatementSection;

ForStmt: Statement ::= <Indent> <LoopVar> <LowBoundary> [Inc] <UpperBoundary> ForBlock: StatementSection;
Inc ::= <Name: String>;

ArrayGetStmt: Statement ::= <Indent> <lhsVariable> [lhsIndex] <rhsVariable> <rhsIndex>;
lhsIndex ::= <Name: String>;

ArraySetStmt: Statement ::= <Indent> <lhsVariable> <lhsIndex> <rhsVariable>;
