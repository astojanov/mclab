import natlab.backends.javascript.pretty.*;

aspect PrettyPrinter {

    public PrettyBase Program.pp() {
        PrettyBase[] ppFunctions = new PrettyBase[this.getNumFunction()];
        int i = 0;
        for (Function f: this.getFunctionList()) {
            ppFunctions[i] = f.pp();
            i++;
        }
        return new PrettySeparatedBy("\n\n", ppFunctions);
    }

    public PrettyBase Function.pp() {
        // Formal parameters
        PrettyBase[] ppParams = new PrettyBase[this.getNumParam()];
        int i = 0;
        for (FormalParam param: this.getParamList()) {
            ppParams[i] = param.pp();
            ++i;
        }

        return new PrettyConcat(
            new PrettyText("function "),
            this.hasFunctionName() ? this.getFunctionName().pp() : new PrettyText(""),
            new PrettyParenthesized(new PrettySeparatedBy(", ", ppParams)),
            new PrettyText(" {"),
            PrettyLine.getInstance(),
            new PrettyIndent(this.getFunctionBody().pp()),
            new PrettyText("}")
            );
    }

    public PrettyBase FunctionName.pp() {
        return new PrettyText(this.getName());
    }

    public PrettyBase FunctionBody.pp() {
        PrettyBase[] prettyStmts = new PrettyBase[this.getNumStmt()];
        int i = 0;
        for (Stmt stmt: this.getStmtList()) {
            prettyStmts[i] = new PrettyConcat(stmt.pp(), PrettyLine.getInstance());
            ++i;
        }
        return new PrettyConcat(prettyStmts);
    }

    public PrettyBase FormalParam.pp() {
        return new PrettyText(this.getName());
    }

    public PrettyBase Stmt.pp() {
        return new PrettyText("STMT SHOULD NOT BE GENERATED");
    }

    public PrettyBase StmtNull.pp() {
        return new PrettyText(";");
    }

    public PrettyBase StmtExpr.pp() {
        return new PrettyConcat(this.getExpr().pp(),
                                new PrettyText(";"));
    }

    public PrettyBase StmtReturn.pp() {
        return new PrettyConcat(new PrettyText("return "),
                                this.hasExpr() ? this.getExpr().pp() : new PrettyText(""),
                                new PrettyText(";"));
    }


    public PrettyBase Expr.pp() {
        return new PrettyText("EXPR SHOULD NOT BE GENERATED");
    }

    public PrettyBase ExprInt.pp() {
        return new PrettyText(this.getValue().toString());
    }

    public PrettyBase ExprCall.pp() {
        PrettyBase[] args = new PrettyBase[this.getNumArgument()];
        int i = 0;
        for (Expr arg : this.getArgumentList()) {
            args[i] = arg.pp();
            ++i;
        }
        return new PrettyConcat(this.getFunctionName().pp(),
                                new PrettyParenthesized(
                                    new PrettySeparatedBy(", ", args)));
    }

}
