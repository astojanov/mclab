import natlab.backends.javascript.pretty.Pretty;
import natlab.backends.javascript.pretty.PrettyBase;

aspect PrettyPrinter {

    public PrettyBase Program.pp() {
        PrettyBase[] ppFunctions = new PrettyBase[this.getNumFunction()];
        int i = 0;
        for (Function f: this.getFunctionList()) {
            ppFunctions[i] = f.pp();
            i++;
        }
        return Pretty.separateBy(Pretty.concat(Pretty.NEWLINE, Pretty.NEWLINE),
                                 ppFunctions);
    }

    public PrettyBase Function.pp() {
        // Formal parameters
        PrettyBase[] ppParams = new PrettyBase[this.getNumParam()];
        int i = 0;
        for (Variable param: this.getParamList()) {
            ppParams[i] = param.pp();
            ++i;
        }

        return Pretty.concat(Pretty.text("function "),
                             this.hasFunctionName() ? this.getFunctionName().pp() : Pretty.EMPTY,
                             Pretty.argList(ppParams),
                             Pretty.text(" "),
                             Pretty.block(Pretty.indent(this.getFunctionBody().pp())));
    }

    public PrettyBase FunctionName.pp() {
        return Pretty.text(this.getName());
    }

    public PrettyBase FunctionBody.pp() {
        PrettyBase[] prettyStmts = new PrettyBase[this.getNumStmt()];
        int i = 0;
        for (Stmt stmt: this.getStmtList()) {
            prettyStmts[i] = stmt.pp();
            ++i;
        }
        return Pretty.separateBy(Pretty.NEWLINE, prettyStmts);

    }

    public PrettyBase Variable.pp() {
        return Pretty.text(this.getName());
    }

    public PrettyBase Stmt.pp() {
        return Pretty.text("STMT SHOULD NOT BE GENERATED");
    }

    public PrettyBase StmtNull.pp() {
        return Pretty.text(";");
    }

    public PrettyBase StmtExpr.pp() {
        return Pretty.concat(this.getExpr().pp(), Pretty.text(";"));
    }

    public PrettyBase StmtReturn.pp() {
        return Pretty.concat(Pretty.text("return "),
                             this.hasExpr() ? this.getExpr().pp() : Pretty.EMPTY,
                             Pretty.text(";"));
    }


    public PrettyBase Expr.pp() {
        return Pretty.text("EXPR SHOULD NOT BE GENERATED");
    }

    public PrettyBase ExprInt.pp() {
        return Pretty.text(this.getValue() + "");
    }

    // FIXME: handle escaping.
    public PrettyBase ExprString.pp() {
        return Pretty.text('"' + this.getValue() + '"');
    }

    public PrettyBase ExprVar.pp() {
        return this.getVariable().pp();
    }

    public PrettyBase ExprCall.pp() {
        PrettyBase[] args = new PrettyBase[this.getNumArgument()];
        int i = 0;
        for (Expr arg : this.getArgumentList()) {
            args[i] = arg.pp();
            ++i;
        }
        return Pretty.concat(this.getFunctionName().pp(),
                             Pretty.argList(args));
    }

    public PrettyBase ExprAssign.pp() {
        return Pretty.concat(this.getLValue().pp(),
                             Pretty.text(" = "),
                             this.getExpr().pp());
    }

}
