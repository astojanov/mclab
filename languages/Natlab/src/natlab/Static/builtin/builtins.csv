# specifies builtins, in a tree structure, with annotated information
# this list is used to generate the java code for the builtins (via 'genBuiltin.py') 
# Syntax:
# <name>; <parent>; <tag1>; <tag2>; ... ; <tagn>
# - if no parent is specified then the most recent name is assumed
# - the most recent comment gets preserved and annotated to the java code
# - all parent classes will be renamed as Abstract<Name>, except the root
# - all classes will have their first letter capitalized
# - the overall parent class 'Builtin' - is treated specially, so doesn't need to
#   specifically listed
# - Tags are optional -- they specify extra properties that the builtins have.
#   Both internal nodes (abstract builtins) and leafs (actual
#   builtins) can have tags. a tag will force some extra code to be
#   inserted into the buitin, and/or force it to implement some extra interface.
#
# tags:
# - args, args(), args(n), args(m,n)
#     Defines the allowable number of parameters, via the interface
#     ArityDefined. args, args() will add the interface for abstract
#     builtins, args(n) sets a fixed arity, args(m,n) a variadic
#     range, 'inf' is infinity (i.e. args(2,inf) means 2 or more args)
# - Class(<expr>)
#     Defines what the Matlab classes of outputs are, given the classes of the
#     input arguments. The language is defined in ClassTagLanguage.txt. Examples:
#        Class((double|single)&(double|single)>double)
#        Class(coerce(char|logical>double, numeric>0))
#        Class(char&char>char, numeric&(0|double)>0,  (double|1)&numeric>1)
#        Class(none>double)
#        Class(parent&opt(any))
#
# TODO
# - class is not impure
# - mfilename is matlab system
# - better categorize matlab system stuff
# - better categorize operator vs matrix operator, and the binary vs
#     unary, and elementwise vs matrix
#     also group by type (numerical, float, etc.)
# - an operator is something that takes the same number of args,
#     always ?
# - group explicit indexing
# - should I name <type>Result<..>?
# - decide between 'elemental' and 'elementwise', matrix, matrixwise? array... matrix... ?
# - change script to allow lines to start with "- x", to mark continuations
# - change tag processing to annotate 'args' if classes are defined
# - new tag "outs"?


#pure functions have no side effects and always return the same value
pureFunction; builtin

# function operates on matrizes
matrixFunction; pureFunction


# ****************************************************************************************
# general function - operates on any matrix, sometimes with restrictions
anyMatrixFunction; matrixFunction

# constant function
constant; anyMatrixFunction
pi


# any matrix functions with fixed arity, where all arguments are numeric operands
strictAnyMatrixFunction; anyMatrixFunction

# unary function operating on a general matrix
unaryAnyMatrixFunction; strictAnyMatrixFunction


# elemental unary function operating on a general matrix
elementalUnaryAnyMatrixFunction; unaryAnyMatrixFunction

# matrix-wise unary function operating on a general matrix
matrixUnaryAnyMatrixFunction; unaryAnyMatrixFunction;; Class(double>double)
transpose;; Class(double,int)
ctranspose


# TODO take optional 2nd parameter k:
tril
triu



# non-strict numerical matrix functions don't have a fixed arity, and take (optional) extra
# arguments that either options or different possible operands.
flexibleAnyMatrixFunction; anyMatrixFunction

# numeric function that collapses a dimension (optional second arg tells which)
dimensionCollapsingAnyMatrixFunction; flexibleAnyMatrixFunction




# ***************************************************************************************
# numeric function - operatoes on any numeric matrix, chars and logicals are coerced to double
# with the restriction that integer or single argument types need to agree
# - some Matlab functions don't actually coerce logicals and or chars!
numericMatrixFunction; matrixFunction


# numeric matrix functions with fixed arity, where all arguments are numeric operands
# should this be called something related to operator?
strictNumericMatrixFunction; numericMatrixFunction

# unary numeric matrix function
unaryNumericMatrixFunction; strictNumericMatrixFunction

# elemental unary numeric matrix function
elementalUnaryNumericMatrixFunction; unaryNumericMatrixFunction

RoundingOperation; elementalUnaryNumericMatrixFunction
# fix takes logicals, the others don't
fix
round
floor
ceil

# matrix-wise unary numeric matrix function
matrixUnaryNumericMatrixFunction; unaryNumericMatrixFunction

# binary numeric matrix function
binaryNumericMatrixFunction; strictNumericMatrixFunction; Class(coerce(logical|char>double,(numeric&(double|0)>0)|((double|1)&numeric>1)))

# elemental binary numeric matrix function
elementalBinaryNumericMatrixFunction; binaryNumericMatrixFunction

# binary elemental arithmetic - doesn't mix integer types
elemnetalBinaryArithmeticFunction; elementalBinaryNumericMatrixFunction
plus
minus
times
# the following do not allow both args to be double
ldivide
rdivide
mod
rem

# matrix wise binary numeric matrix function
matrixBinaryNumericMatrixFunction; binaryNumericMatrixFunction

# binary matrix arithmetic - doesn't mix integer types
matrixBinaryArithmeticFunction; matrixBinaryNumericMatrixFunction
mtimes
# the following do not allow both args to be double
mldivide
mrdivide


# non-strict numerical matrix functions don't have a fixed arity, and take (optional) extra
# arguments that either options or different possible operands.
flexibleNumericMatrixFunction; numericMatrixFunction

# numeric function that collapses a dimension (optional second arg tells which)
dimensionCollapsingNumericMatrixFunction; flexibleNumericMatrixFunction
min
max



# ***************************************************************************************
# operatoes on floating point matrizes
floatMatrixFunction; matrixFunction

# strict float functions have a fixed arity, and all operands are floats
strictFloatMatrixFunction; floatMatrixFunction

# unary functions operating on floating point matrizes
unaryFloatMatrixFunction; strictFloatMatrixFunction

# elemental unary functions operating on floating point matrizes
elementalUnaryFloatMatrixFunction; unaryFloatMatrixFunction
sqrt
realsqrt
erf
erfinv
erfc
erfcinv
gamma
gammainc
betainc
gammaln
exp
log
log2
log10

forwardTrigonometricFunction; elementalUnaryFloatMatrixFunction
trigonometricFunction; forwardTrigonometricFunction
sin
cos
tan
cot
sec
csc

decimalTrigonometricFunction; forwardTrigonometricFunction
sind
cosd
tand
cotd
secd
cscd

hyperbolicTrigonometricFunction; forwardTrigonometricFunction
sinh
cosh
tanh
coth
sech
csch

inverseTrigonmetricFunction; elementalUnaryFloatMatrixFunction
standardInverseTrigonmetricFunction; inverseTrigonmetricFunction
asin
acos
atan
atan2
acot
asec
acsc

decimalInverseTrigonmetricFunction; inverseTrigonmetricFunction
asind
acosd
atand
acotd
asecd
acscd

hyperbolicInverseTrigonmetricFunction; inverseTrigonmetricFunction
asinh
acosh
atanh
acoth
asech
acsch




# matrix-wise unary function operating on floating point matrizes
matrixUnaryFloatMatrixFunction; unaryFloatMatrixFunction

# unary function operating on square floating point matrix
squareMatrixUnaryFloatMatrixFunction; matrixUnaryFloatMatrixFunction
logm
sqrtm
expm

# binary matrix function operaitng on float matrices
binaryFloatMatrixFunction; strictFloatMatrixFunction

# matrix-wise binary funciton operating on float matrices
matrixBinaryFloatMatrixFunction; binaryFloatMatrixFunction
hypot

# flexible float matrix functions do not have a fixed arity, and extra arguments are either
# options or different possible operands.
flexibleFloatMatrixFunction; floatMatrixFunction


# numeric function that collapses a dimension (optional second arg tells which)
dimensionCollapsingFloaMatrixFunction; flexibleFloatMatrixFunction
# cumsum coerces logicals to double
cumsum


# standard matrix math functions with optional arguments
matrixLibaryFunction; flexibleFloatMatrixFunction
eig
norm
cond
rcond
det
# has 2 operands
linsolve

# factorization functions
facotorizationFunction; flexibleFloatMatrixFunction
schur
# ordschur is not a factorization per se, it massages schur result
ordschur
lu
chol
svd
qr



# ***************************************************************************************
# bit functions - usually operates on ints or logicals, some exceptions
bitMatrixFunction; matrixFunction
# pure bit functions - bitand, bitor, bitxor
# impure bit functions - bitcmp (with one arg is pure), bitset


# ***************************************************************************************
# char functions operate on strings - is this necessary or desired?
charMatrixFunction; matrixFunction




# **************************************************************************************
# functions that convert values to different classes
conversionFunction; matrixFunction



# functions that convert values to logicals
conversionToLogicalFunction; conversionFunction


binaryConversionToLogicalFunction; conversionToLogicalFunction

# elemental binary functions resulting in logicals
elementalBinaryConversionToLogicalFunction; binaryConversionToLogicalFunction

# relational operators
relationalOperator; elementalBinaryConversionToLogicalFunction
eq
ne
lt
gt
le
ge

# logical operators
logicalOperator; elementalBinaryConversionToLogicalFunction
and
or
xor





# constructors
constructor; conversionFunction



# **************************************************************************************
# functions that return scalar or vector values describing matrizes
arrayQuery; matrixFunction


# return numericals
doubleResultArrayQuery; arrayQuery

# scalar numerical 
ScalarDoubleResultArrayQuery; doubleResultArrayQuery
nnz

# return logicals
logicalResultArrayQuery; arrayQuery

# return scalar doubles
scalarLogicalResultArrayQuery; logicalResultArrayQuery
not
any
all



# ***************************************************************************************
# function operates on cell arrays
cellFunction; pureFunction

# ***************************************************************************************
# function operates on structures
structFunction; pureFunction

# ***************************************************************************************
# function operates on objects
objectFunction; pureFunction

# ***************************************************************************************
# function operates on a mixtures of matrizes, cell arrays, structures and/or objects
versatileFunction; pureFunction

# takes in a matrix or cells of strings
matrixOrCellOfStringsFunction; versatileFunction


# *** constants **************************************************
#constant; pureFunction;
#
#numericalConstant; constant; args(0)
#i
#j



# #matlab operators
# operator; pureFunction

# # special operators ... not sure what to do with them
# colon
# horzcat
# vertcat
# cat
# nargin
# nargout
# mfilename
# end


# # other operators
# isequalwithequalnans
# # same as isequal; but nan == nan
# isequal
# # recursive equal all
# subsasgn
# # explicit indexingops
# subsref

# histc


# mapOperator; operator;
# structfun
# arrayfun
# cellfun


# # *** binary ops *************************************************
# binaryOperator; operator





# #numerical binary oprators
# numericalBinaryOperator; binaryOperator
# #matrix operators
# matrixBinaryOperator; numericalBinaryOperator
# #array operators
# elementwiseBinaryOperator; numericalBinaryOperator
# power
# pow2
# #scalbn; ldexp
# # only works with single; double
# hypot

# # *** unary operators ***************************************************
# unaryOperator; operator

# numericalUnaryOperator; unaryOperator
# elementwiseUnaryOperator; numericalUnaryOperator
# uplus
# uminus
# conj
# real
# imag
# abs

# matrixUnaryOperator; numericalUnaryOperator
# transpose
# ctranspose
# # analytical matrix operators





# logicalUnaryOperator; unaryOperator
# not


# # *** matrix operations ************************************************
# matrixOperation; pureFunction
# elementwiseMatrixOperation; matrixOperation




# # matrix computation algorithms
# matrixComputation; matrixOperation
# inv
# eig
# norm
# rank
# det
# dot
# cross
# # factorization
# linsolve
# # linear solve
# # n dimensional discrete fourier transform
# rcond
# # condition number estimate
# tril
# triu
# eps

# fourierFunction; matrixComputation
# ifftn
# fftn
# fft


# factorization; matrixComputation
# schur
# #factorization
# ordschur
# lu
# chol
# qr
# svd



# # bit operators
# bitOperation; pureFunction
# bitand
# bitor
# bitxor
# bitcmp
# bitget
# bitshift
# bitset


# # *** string operations **************************************************
# stringOperation; pureFunction
# strncmpi
# strcmp
# strcmpi
# strtrim
# strfind
# findstr
# strrep
# upper
# lower
# deblank


# # regulat expressions
# regexpOperation; stringOperation
# regexptranslate
# regexp
# regexpi
# tegexprep


# # *** Constructors *****************************************************
# constructor; pureFunction
# primitiveConstructor; constructor
# double
# single
# char
# logical
# int8
# int16
# int32
# int64
# uint8
# uint16
# uint32
# uint64


# compoundConstructor; constructor
# cell
# struct


# conversionFunction; constructor
# cell2struct
# struct2cell
# typecast
# cast


# # *** struct operations ************************************************
# structOperation; pureFunction
# isfield


# # *** class operations **************************************************
# classOperation; pureFunction
# class

# classQueryOperation; classOperation
# methodnames
# fieldnames

# logicalClassQueryOperation; classQueryOperation
# isempty
# isobject
# isfloat
# isinteger
# islogical
# isstruct
# ischar
# iscell
# isa


# # *** Array operations **************************************************
# arrayOperation; pureFunction
# sort
# unique
# find

# arrayConstructor; arrayOperation
# diag
# # changing arrays
# reshape
# permute
# squeeze
# complex

# dimensionCollapsingOperation; arrayOperation
# prod - only floats?
# sum
# mean
# min
# max
# cumprod
# cumsum
# median

# ShapeArrayConstructor; arrayConstructor
# # construct arrays via their dimensions; and possibly a type
# NumericalShapeAndTypeArrayConstructor; ShapeArrayConstructor
# ones
# zeros
# # eye takes at most 2 dims
# eye
# FloatShapeAndTypeArrayConstructor; NumericalShapeAndTypeArrayConstructor
# inf
# nan
# LogicalShapeArrayConstructor; ShapeArrayConstructor
# true
# false



# arrayQuery; arrayOperation
# size
# nonzeros
# sign


# scalarResultArrayQuery; arrayQuery
# numericalScalarResultArrayQuery; scalarResultArrayQuery
# length
# ndims
# numel
# nnz

# logicalScalarResultArrayQuery; scalarResultArrayQuery
# any
# all
# isemtpy
# isnan
# isinf
# isfinite
# isvector
# isscalar
# isreal
# isnumeric




# *** opposite of pure functions *****************************************
impureFunction; builtin

# dunnno what to do with these
superiorto
#set superior to relationship in oldclass constructor
exit
quit
# only really need one of quit/exit
builtin
# calls builtin - strict

timeFunction; impureFunction
clock
tic
toc
cputime


matlabSystemFunction; impureFunction
assert
nargoutchk
nargchk
str2func
pause


dynamicMatlabFunction; matlabSystemFunction
eval
evalin
feval
assignin
inputname

matlabEnvironmentFunction; matlabSystemFunction
import
cd
exist
matlabroot
whos
which
version
clear


reportFunction; impureFunction
# errors should be seprated from warnings and displaying stuff?
disp
display
clc
error
warning
echo
# should this be here? - this could be a strict lib function?
diary
# something logging related
lastwarn
lasterror
format


randomFunction; impureFunction
rand
randi
randn


systemFunction; impureFunction
# should there be a separated operating system category?
computer
beep
dir

operatingSystemCallFunction; systemFunction
unix
dos
system


ioFunction; systemFunction
load
save
input
textscan


posixIoFunction; ioFunction
sprintf
sscanf
fprintf
ftell
ferror
fopen
fread
frewind
fscanf
fseek
fwrite
fgetl
fgets
fclose


# *** library funcitons that are not builtins!! TODO **********************
#notABuiltin, builtin
#conv
#toeplitz
#dyaddown
#flipud
#linspace
#imwrite


