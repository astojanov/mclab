# specifies builtins, in a tree structure, with annotated information
# this list is used to generate the java code for the builtins (via 'genBuiltin.py') 
# Syntax:
# <name>; <parent>; <tag_1>; <tag_2>; ... ; <tag_n>
# [  - <tag_n+1>; <tag_n+2>; ... ; <tag_n+m>]
# [  - <tag_n+m+1>; ... ]
# [  ...]
#
# - if no parent is specified then the most recent name is assumed
# - the most recent comment gets preserved and annotated to the java code
# - all parent classes will be renamed as Abstract<Name>, except the root, "builtin"
# - all classes will have their first letter capitalized
# - the overall parent class 'Builtin' - is treated specially, so doesn't need to
#   specifically listed - we nevertheless use an explitic root
# - Tags are optional -- they specify extra properties that the builtins have.
#   Both internal nodes (abstract builtins) and leafs (actual
#   builtins) can have tags. a tag will force some extra code to be
#   inserted into the buitin, and/or force it to implement some extra interface.
# - if a line gets too long, tags can be continued on the next lines, all starting
#   with '-'. It is assumed that a line starting with whitespace+'-' continues the
#   tag definitions of the previous builtin
#
# tags:
# - args, args(), args(n), args(m,n)
#     Defines the allowable number of parameters, via the interface
#     ArityDefined. args, args() will add the interface for abstract
#     builtins, args(n) sets a fixed arity, args(m,n) a variadic
#     range, 'inf' is infinity (i.e. args(2,inf) means 2 or more args)
# - Class(<expr>)
#     Defines what the Matlab classes of outputs are, given the classes of the
#     input arguments. The language is defined in ClassTagLanguage.txt. Examples:
#        Class((double|single)&(double|single)>double)
#        Class(coerce(char|logical>double, numeric>0))
#        Class(char&char>char, numeric&(0|double)>0,  (double|1)&numeric>1)
#        delete(none>double)
#        delete(parent&opt(any))
# - matlabdelete(<expr>)
#     Allows alternative definition of class propagation that more exacty follows
#     Matlab semantics. This can only be defined for builtins for which 'Class' is defined.
# -abstract
#     makes this builtin abstract. By default, all non-terminal node in the builtin tree are abstract
#
# Categories of functions
# - pure/impure: pure functions have no side effects, change no state, always return the same result
# - matrix:      args/operands/results are of class numerical, char, logical
# - cell:        operates on cells
# - struct:      operates on structs
# - object:      operates on objects
# - versatile:   operates on multiple kinds of classes - or subgroup of functions operates on multiple kinds of classes
# - anyMatrix:   operates on any matrix class
# - numeric:     operates on numerical classes - char/logical may get coerced to double
# - float:       operates on floats
# - proper/improper: proper functions have strict arity, and the arguments are operands, rather than options
# - unary, binary: function takes in exactly one, two operatnds, respectively
# - elemental:   operates on matrizes (or expanded scalars) elemental, and the result has the same shape as the arg
# - array:       operates on a whole matrix
# - dimensionSensitive: function is of the form f(M,[dim]), i.e. there is a second optional parameter specifying along which dimension to operate
# - dimensionCollapsing: function that collapses a dimension (optional second arg tells which)

# TODO
# - class is not impure
# - mfilename is matlab system
# - better categorize matlab system stuff
# - better categorize operator vs matrix operator, and the binary vs
# - group explicit indexing
# - should it be named <type>Result<..>?
# - change tag processing to annotate 'args' if classes are defined
# - new tag "outs"?
# - need a category for function_handle functions?
# - append multiple comments together -> should they become javadoc?
# - create a new class like MatlabClass - if defined, the actual matlab behavior is different, this also needs
#    - a way to refer to the 'simlified' declaration, maybe? - like the 'parent' node
#    - an output called 'error' - if any output is 'error', the result is error
# - create categories relating to complex vs real
# - conversion vs query, what's the same, what's different?? define properly
# - investigate whether query, constructor etc. functions need the proper/improper categories
# - create a way of just returning the dominant arg, where a list of dominant args is given


root; builtin

# pure functions have no side effects and always return the same value, depending only on arguments
pureFunction; root


# function operates on matrizes (numerical,char,logical)
matrixFunction; pureFunction

# **************************************************************************************
# constant function - there are few of these, most 'constants' take optional shape args
constant; matrixFunction

doubleConstant; constant; delete(none>double)
-Class(none -> double)
pi
i
j


# ****************************************************************************************
# general function - operates on any matrix, sometimes with restrictions
anyMatrixFunction; matrixFunction


# any matrix functions with fixed arity, where all arguments are numeric operands
properAnyMatrixFunction; anyMatrixFunction

# unary function operating on a general matrix
unaryAnyMatrixFunction; properAnyMatrixFunction


# elemental unary function operating on a general matrix
elementalUnaryAnyMatrixFunction; unaryAnyMatrixFunction; abstract

# matrix-wise unary function operating on a general matrix
arrayUnaryAnyMatrixFunction; unaryAnyMatrixFunction; abstract

# binary function operating on a general matrix
binaryAnyMatrixFunction; properAnyMatrixFunction


# elemental binary function operating on a general matrix
elementalBinaryAnyMatrixFunction; binaryAnyMatrixFunction; abstract

# matrix-wise unary function operating on a general matrix
arrayBinaryAnyMatrixFunction; binaryAnyMatrixFunction; abstract



# improper numerical matrix functions don't have a fixed arity, and take (optional) extra
# arguments that either options or different possible operands.
improperAnyMatrixFunction; anyMatrixFunction



diagonalSensitive; improperAnyMatrixFunction
-delete(matrix&opt(matrix)>0)
-Class(matrix matrix? -> 0)
tril
triu
diag


# functions of the form f(matrix,[dimension]), where matrix is any matrix
dimensionSensitiveAnyMatrixFunction; improperAnyMatrixFunction

# functions that collapse the specified dimension
dimensionCollapsingAnyMatrixFunction; dimensionSensitiveAnyMatrixFunction; abstract



# ***************************************************************************************
# numeric function - operates on any numeric matrix, chars and logicals are coerced to double
# with the restriction that int or single argument types need to agree
# - some actual Matlab functions don't actually coerce logicals and or chars!
numericFunction; matrixFunction


# numeric matrix functions with fixed arity, where all arguments are numeric operands
# should this be called something related to operator?
properNumericFunction; numericFunction

# unary numeric function
unaryNumericFunction; properNumericFunction
-delete(numeric>0, char|logical>double)
-Class(numeric -> 0, char|logical -> double)

elementalUnaryNumericFunction; unaryNumericFunction; abstract
real
imag
abs
conj;; delete2(logical>error,natlab)
-MatlabClass(logical->error, natlab)
sign;; delete2(logical>error,natlab)
-MatlabClass(logical -> error, natlab)

elementalUnaryArithmetic; elementalUnaryNumericFunction
uplus
uminus

RoundingOperation; elementalUnaryNumericFunction
-delete2(logical>error,natlab)
-MatlabClass(logical -> error, natlab)
fix;; delete2(logical>double,natlab)
-MatlabClass(logical->double, natlab)
round
floor
ceil

arrayUnaryNumericFunction; unaryNumericFunction

arrayUnaryArithmetic; arrayUnaryNumericFunction; abstract


# binary numeric function - doesn't mix integers
binaryNumericFunction; properNumericFunction
-delete(coerce(logical|char>double, (numeric&(double|0)>0) | ((double|1)&numeric>1)))
-Class(coerce(logical|char->double, (numeric double|0->0) | (double|1 numeric->1)))
-delete2((int&logical)|(logical&int)>error, natlab)
-MatlabClass((int logical)|(logical int)->error, natlab)

# elemental binary numeric matrix function
elementalBinaryNumericFunction; binaryNumericFunction
#imporoper? - supports 1 arg
complex
-delete(coerce(logical|char>double, (numeric&opt(double|0)>0) | ((double|1)&numeric>1)))
-Class(coerce(logical|char->double, (numeric (double|0)? ->0) | (double|1 numeric->1)))
-delete2((char|logical)> error, (char|logical)&any>error, any&(char|logical)>error, natlab)
-MatlabClass(char|logical -> error, char|logical any->error, any char|logical->error, natlab)


# elemewise binary arithmetic
elementalBinaryArithmetic; elementalBinaryNumericFunction
plus
minus
times
# integers can only be combined with scalar doubles
power
-delete2(logical&0>error, parent)
-MatlabClass(logical 0->error, parent)

dividingElementalArithmetic; elementalBinaryArithmetic
-delete2(logical&0>error, parent)
-MatlabClass(logical 0->error, parent)
# the following do not allow both args to be double under certain circumstances (...)
ldivide
rdivide
mod
rem

# array wise binary numeric matrix function
arrayBinaryNumericFunction; binaryNumericFunction
cross


# binary matrix arithmetic - doesn't mix integer types
arrayBinaryArithmetic; arrayBinaryNumericFunction
-delete2(logical&0>error, parent)
-MatlabClass(logical 0->error, parent)

mtimes;; delete2(logical&0>double, parent)
-MatlabClass(logical 0->double, parent)
-delete2(logical&0>double, parent)
# integers can only be comibned with scalar doubles -- or not?
mpower
dividingArrayArithmetic; arrayBinaryArithmetic
mldivide
mrdivide


# improper numerical matrix functions don't have a fixed arity, and take (optional) extra
# arguments that either options or different possible operands.
improperNumericFunction; numericFunction

# functions of the form f(matrix1,matrix2,...,matrixk,[dimension]), where matrix is any matrix
dimensionSensitiveNumericFunction; improperNumericFunction
# TODO dot results in floats - but has the same input constraints as numeric - different category? not a builtin?
dot
-delete(coerce(logical|char>double,((single&(float|single))|(float&single)>single) | (numeric&(double|0)>double) | ((double|1)&numeric>double))&opt(numeric|logical))
-Class(coerce(logical|char->double,(single float)|(float single)->single || numeric double|0->double || double|1 numeric->double) (numeric|logical)?)
-delete2(logical&any>error, natlab)
-MatlabClass(logical any->error, natlab)


# functions that collapse the specified dimension
dimensionCollapsingNumericFunction; dimensionSensitiveNumericFunction

minOrMax; dimensionCollapsingNumericFunction
-delete(matrix&any&(numeric|logical)>0&double, logical&logical>logical&double, coerce(logical|char>double, (numeric&opt(double|0)>0&double) | ((double|1)&numeric>1&double)), matrix>0&double)
-Class(matrix any (numeric|logical)->0 double, logical logical->logical double, coerce(logical|char->double, numeric (double|0)?->0 double || double|1 numeric->1 double), matrix->0 double)
-delete2(logical&logical>logical&double, (char|logical)> error, (char|logical)&any>error, any&(char|logical)>error, natlab)
-MatlabClass(logical logical->logical double, char|logical -> error, char|logical any->error, any char|logical->error, natlab)
min
max

# median does not support logical matrizes
median




# ***************************************************************************************
# operatoes on floating point matrizes
floatFunction; matrixFunction

# proper float functions have a fixed arity, and all operands are floats
properFloatFunction; floatFunction

# unary functions operating on floating point matrizes
unaryFloatFunction; properFloatFunction
-delete(float>0)
-Class(float->0)

# elemental unary functions operating on floating point matrizes
elementalUnaryFloatFunction; unaryFloatFunction
sqrt
realsqrt
erf
erfinv
erfc
erfcinv
gamma
gammaln
exp
log
log2
log10

forwardTrigonometricFunction; elementalUnaryFloatFunction
radianTrigonometricFunction; forwardTrigonometricFunction
sin
cos
tan
cot
sec
csc

degreeTrigonometricFunction; forwardTrigonometricFunction
sind
cosd
tand
cotd
secd
cscd

hyperbolicTrigonometricFunction; forwardTrigonometricFunction
sinh
cosh
tanh
coth
sech
csch

inverseTrigonmetricFunction; elementalUnaryFloatFunction
radianInverseTrigonmetricFunction; inverseTrigonmetricFunction
asin
acos
atan
acot
asec
acsc

degreeInverseTrigonmetricFunction; inverseTrigonmetricFunction
asind
acosd
atand
acotd
asecd
acscd

hyperbolicInverseTrigonmetricFunction; inverseTrigonmetricFunction
asinh
acosh
atanh
acoth
asech
acsch




# matrix-wise unary function operating on floating point matrizes
arrayUnaryFloatFunction; unaryFloatFunction

# unary function operating on square floating point matrix
squareArrayUnaryFloatFunction; arrayUnaryFloatFunction
logm
sqrtm
expm
inv


# binary matrix function operaitng on float matrices
binaryFloatFunction; properFloatFunction
-delete(float&(double|0)>0,(double|1)&float>1)
-Class(float double|0 -> 0, double|1 float -> 1)

# elemental binary functino operating on floats matrizes
elementalBinaryFloatFunction; binaryFloatFunction
atan2

# matrix-wise binary funciton operating on float matrices
arrayBinaryFloatFunction; binaryFloatFunction
hypot


# improper float matrix functions do not have a fixed arity, and extra arguments are either
# options or different possible operands.
improperFloatFunction; floatFunction
eps
-delete(none>double,float>0,typeString(float))
-Class(none->double, float->0, typeString(float))

# functions of the form f(matrix,[dimension])
dimensionSensitiveFloatFunction; improperFloatFunction
-delete(float&opt(numeric|logical)>0)
-Class(float (numeric|logical)? -> 0)
# cumsum coerces logicals to double
cumsum;;delete(coerce(logical>double,parent))
-Class(coerce(logical->double, parent))
cumprod

# numeric function that collapses a dimension (optional second arg tells which)
dimensionCollapsingFloatFunction; dimensionSensitiveFloatFunction
mode
prod
#TODO - sum takes a possible string parameter
sum;;delete(coerce(int|char|logical>double,parent))
-Class(coerce(int|char|logical->double,parent))
mean;;delete(coerce(int|char|logical>double,parent))
-Class(coerce(int|char|logical->double,parent))



# standard matrix math functions with optional arguments
matrixLibaryFunction; improperFloatFunction
eig
norm;;delete(float&opt(float|logical|char)>0)
-Class(float (float|logical|char)?->0)
# query?
rank;;delete(float&opt(matrix)>double)
-Class(float matrix?->double)

# optional 2 args
cond
# square float -> salar double - should probably be proper
det
rcond
# has 2 operands
linsolve

# TODO
# cros

# factorization functions
facotorizationFunction; improperFloatFunction
schur
# ordschur is not a factorization per se, it massages schur result
ordschur
lu
chol
svd
qr;;delete(float&opt(float|logical)>arg(0)&0&0)
-Class(float (float|logical)?->0 0 0)



# ***************************************************************************************
# bit functions - usually operates on ints or logicals, some exceptions
bitFunction; matrixFunction
properBitFunction; bitFunction
-delete(uint&(double|0)>0, (double|1)&uint>1, logical&logical>logical, (double|logical)&(double|logical)>double)
-Class(uint double|0->0, double|1 uint->1, logical logical->logical, double|logical double|logical->double)
bitand
bitor
bitxor

improperBitFunciton; bitFunction
bitcmp
bitset
bitget
bitshift






# **************************************************************************************
# functions that return doubles or logicals about given values
# TODO - some support only matrizes, others anything
# TODO impure/pure unary for scalar?
matrixQuery; matrixFunction


# return doubles
toDoubleMatrixQuery; matrixQuery
find
-delete(matrix&opt(matrix&opt(char))>double&double&double)
-Class(matrix (matrix char?)?->double double double)

unaryToScalarDoubleMatrixQuery; toDoubleMatrixQuery
-delete(matrix>double)
-Class(matrix->double)

toScalarDoubleMatrixQuery; unaryToScalarDoubleMatrixQuery;
nnz



# return logicals
toLogicalMatrixQuery; matrixQuery

# unary return logicals
unaryToLogicalMatrixQuery; toLogicalMatrixQuery
-delete(matrix>logical)
-Class(matrix->logical)

scalarUnaryToLogicalMatrixQuery; unaryToLogicalMatrixQuery
not
any
all
isreal


elementalUnaryToLogicalMatrixQuery; unaryToLogicalMatrixQuery
isinf
isfinite
isnan


# binary return logicals
binaryToLogicalMatrixQuery; toLogicalMatrixQuery
-delete(matrix&matrix>logical)
-Class(matrix matrix -> logical)

elementalBinaryToLogicalMatrixQuery; binaryToLogicalMatrixQuery

# relational operators
relationalOperator; elementalBinaryToLogicalMatrixQuery
eq
ne
lt
gt
le
ge

# logical operators
logicalOperator; elementalBinaryToLogicalMatrixQuery
and
or
xor




# **************************************************************************************
# functions that create matrix arrays from vectors or values describing the matrizes
matrixCreation; matrixFunction
colon
-delete(coerce(logical>double,matlab))
-Class(coerce(logical -> double, matlab))
-delete2(logical&logical&opt(logical)>error, (logical|double) & (double|logical) & opt(double|logical) > double, (numeric & (double|0) & opt(double|0)) > 0, ((double|-1) & ((double|-1)&numeric | numeric)) > -1, (double|1) & numeric & (double|1) > 1, char & ((char|double)&char | char) > char)
-MatlabClass(logical logical logical?->error, logical|double double|logical  (double|logical)? -> double, numeric double|0  (double|0)? -> 0, double|-1 (double|-1 numeric) | numeric -> -1, double|1 numeric double|1 -> 1, char (char|double char)|char -> char)



# construct arrays via their dimensions; and possibly a type
byShapeAndTypeMatrixCreation; matrixCreation

numericalByShapeAndTypeMatrixCreation; byShapeAndTypeMatrixCreation;
-delete(star(numeric|logical)&(typeString(numeric)|(none>double)))
-Class((numeric|logical)* typeString(numeric)|(none->double))
ones
zeros
# eye takes at most 2 dims
eye

floatByShapeAndTypeMatrixCreation; numericalByShapeAndTypeMatrixCreation;
-delete(star(numeric|logical)&(typeString(float)|(none>double)))
-Class((numeric|logical)* typeString(float)|(none->double))
inf
nan



# there is no optional type argument
logicalByShapeAndTypeMatrixCreation; byShapeAndTypeMatrixCreation;
-delete(star(numeric|logical)>logical)
-Class((numeric|logical)*->logical)
true
false


# **************************************************************************************
# matrix constructors
matrixConstructor; matrixFunction
double ;;delete(any>double);Class(any->double)
single ;;delete(any>single);Class(any->single)
char   ;;delete(any>char);Class(any->char)
logical;;delete(any>logical);Class(any->logical)
int8   ;;delete(any>int8);Class(any->int8)
int16  ;;delete(any>int16);Class(any->int16)
int32  ;;delete(any>int32);Class(any->int32)
int64  ;;delete(any>int64);Class(any->int64)
uint8  ;;delete(any>uint8);Class(any->uint8)
uint16 ;;delete(any>uint16);Class(any->uint16)
uint32 ;;delete(any>uint32);Class(any->uint32)
uint64 ;;delete(any>uint64);Class(any->uint64)


# ***************************************************************************************
# function operates on cell arrays
cellFunction; pureFunction
cell

cellCat; cellFunction
cellhorzcat
cellvertcat


# ***************************************************************************************
# function operates on structures
structFunction; pureFunction
isfield
struct

# ***************************************************************************************
# function operates on objects
objectFunction; pureFunction
# TODO - should there be the whole pure/impure spiel?


# ***************************************************************************************
# function operates on a mixtures of matrizes, cell arrays, structures and/or objects
versatileFunction; pureFunction

# takes in a matrix or cells of strings
matrixOrCellOfCharFunction; versatileFunction
-delete(any>0)
-Class(any->0)
sort;;delete(any&opt(numeric)&opt(char) > 0&double)
-Class(any numeric? char? -> 0 double)
unique

# ***************************************************************************************
# char functions operate on strings, or cells of strings
# TODO should it be called string function?
charFunction; matrixOrCellOfCharFunction
properCharFunction; charFunction;
unaryProperCharFunction; properCharFunction;
upper
lower
deblank
# strip
strtrim

improperCharFunction; charFunction
strfind
findstr
strrep

# str[n]cmp[i]
stringCompare; improperCharFunction
strcmp
strcmpi
strncmpi
strncmp

# regular expression functions
regexpFunction; improperCharFunction
regexptranslate
regexp
regexpi
regexprep



# query functions that operate not just on matrizes (c.f. matrixQueryFunction)
versatileQuery; versatileFunction
class
# overloaded for struct for within constructors - struct,char,char..
-delete(any>char)
-Class(any -> char)

# return numericals
doubleResultVersatileQuery; versatileQuery
-delete(any>double)
-Class(any -> double)
# TODO fix this output?!
size;;delete(any&opt(numeric|logical)>double&double&double&double&double&double&double&double&double&double&double&double&double&double&double)
-Class(any (numeric|logical)? -> double double double double double double double double double double double double double double double)

# scalar numerical 
scalarDoubleResultVersatileQuery; doubleResultVersatileQuery
length
ndims
numel;;delete(any&star(matrix)>double)
-Class(any matrix* -> double)
end;;delete(any&numeric&numeric>double)
-Class(any numeric numeric -> double)

# return logicals
logicalResultVersatileQuery; versatileQuery
-delete(any>logical)
-Class(any -> logical)


# return scalar logicals
scalarLogicalResultVersatileQuery; logicalResultVersatileQuery
classQuery; scalarLogicalResultVersatileQuery
isobject
isfloat
isinteger
islogical
isstruct
ischar
iscell
isnumeric

# TODO impure?
isa
-delete(any&char>logical)
-Class(any char -> logical)

scalarLogicalShapeQuery; scalarLogicalResultVersatileQuery
isempty
isvector
isscalar


multiaryToScalarLogicalVersatileQuery; versatileQuery
-delete(any&any&star(any)>logical)
-Class(any any any*->logical)
# same as isequal; but nan == nan
isequalwithequalnans
# recursive equal all
isequal




versatileConversion; versatileFunction
# TODO improper?
# functions that change the shape
shapeTransformation; versatileConversion
reshape
-delete(any&matrix&star(matrix)>0)
-Class(any matrix matrix* -> 0)
permute
-delete(any&double>0)
-Class(any double -> 0)

unaryShapeTransformation; shapeTransformation
-delete(any>0)
-Class(any -> 0)
squeeze
transpose
ctranspose




# all these take multiple args
Concatenation; versatileFunction
horzcat
vertcat
# generalization of horz/vert cat
cat

indexing; versatileFunction
subsasgn
subsref


mapOperator; versatileFunction
structfun
arrayfun
cellfun



# # special operators ... not sure what to do with them
# nargin - impure?
# nargout
# mfilename
# end - this could be a query







# elementalBinaryOperator; numericalBinaryOperator
# pow2
# #scalbn; ldexp



# eps - float function? but improper - query?










# conversionFunction; constructor
# cell2struct
# struct2cell
# typecast # change datatype without changing underlying data - is this a bit function?
# cast



# other stuff
# complex


# classOperation; pureFunction
# class







# arrayConstructor; arrayOperation






# *** opposite of pure functions *****************************************
impureFunction; root

# dunnno what to do with these
superiorto
superiorfloat
-delete(star(float)>char)
-Class(float* -> char)
#set superior to relationship in oldclass constructor
exit
quit
# only really need one of quit/exit
builtin
# calls builtin - proper

timeFunction; impureFunction
clock;; delete(none>double)
-Class(none -> double)
tic
toc
cputime


matlabSystemFunction; impureFunction
assert
nargoutchk
nargchk
str2func
pause


dynamicMatlabFunction; matlabSystemFunction
eval
evalin
feval
assignin
inputname

matlabEnvironmentFunction; matlabSystemFunction
import
cd
exist
matlabroot
whos
which
version
clear

nargin;; delete(none|char|function_handle>double)
-Class(none|char|function_handle->double)
nargout;;delete(none|char|function_handle>double)
-Class(none|char|function_handle->double)


# methods, fieldnames takes obj or string, allows extra arg '-full'
methods
fieldnames


reportFunction; impureFunction
# errors should be seprated from warnings and displaying stuff?
disp;; delete(any>none);; Class(any -> none)
display
clc
#TODO rething error
error;;delete(opt(char)&opt(char)&opt(star(any))>error)
-Class(char? char? any*->error)
warning;;delete(any&star(opt(any))>char)
-Class(any any* -> char)
echo
# should this be here? - this could be a proper lib function?
diary
# something logging related
# TODO review this:
message;;delete(char&star(opt(any))>char)
-Class(char any* -> char)
lastwarn
lasterror
format


randomFunction; impureFunction
-delete(star(numeric|logical)&(typeString(float)|(none>double)))
-Class((numeric|logical)* typeString(float)|(none->double))
rand
randn
randi;;delete((numeric|logical)&star(numeric|logical)&(typeString(numeric)|(none>double)))
-Class(numeric|logical (numeric|logical)* typeString(numeric)|(none->double))


systemFunction; impureFunction
# should there be a separated operating system category?
computer
beep
dir

operatingSystemCallFunction; systemFunction
unix
dos
system


ioFunction; systemFunction
load
save
input
textscan


posixIoFunction; ioFunction
sprintf;;delete(char&star(any)>char);; Class(char any* -> char)
sscanf
fprintf;;delete(opt(double)&char&star(any) > double); Class(double? char any* -> double)
ftell
ferror
fopen
fread
frewind
fscanf
fseek
fwrite
fgetl
fgets
fclose




# *** library funcitons that are not builtins!! TODO **********************
notABuiltin; root
#conv
#toeplitz
#dyaddown
#flipud
#linspace
imwrite;;delete(numeric&opt(numeric)&char&star(matrix))
-Class(numeric numeric? char matrix*)
sparse;;delete((double|char|logical)&opt(double|char|logical)&opt(double|char|logical)&opt(double|char|logical)&opt(double|char|logical)&opt(double|char|logical)>0)
-Class((double|char|logical) (double|char|logical)* -> 0)
realmax;;delete(typeString(float)|(none>double))
-Class(typeString(float)|(none->double))
histc;;delete(numeric&numeric&opt(numeric)>double&double)
-Class(numeric numeric numeric? -> double double)
blkdiag;;delete(star(numeric)>double)
-Class(numeric* -> double)
toeplitz;;delete((single)&opt(single|double)>0,(single|double)>0,double&(single|double)>1)
-Class(single (single|double)? -> 0, single|double -> 0, double (single|double) -> 1)

# at least variance should be a builtin, std = sqrt(var)
var;;delete(coerce(char|logical>double,float>0)&opt(numeric)&opt(numeric))
-Class(coerce(char|logical -> double, float ->0) numeric? numeric?)
std;;delete(coerce(char|logical>double,float>0)&opt(numeric)&opt(numeric))
-Class(coerce(char|logical -> double, float ->0) numeric? numeric?)
