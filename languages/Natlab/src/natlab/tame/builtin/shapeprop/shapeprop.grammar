%package "natlab.tame.builtin.shapeprop";
%import "natlab.tame.builtin.shapeprop.ast.*";
%import "java.util.*";
%class "ShapePropParser";


%terminals NUMBER, ID, UPPERCASE, LOWERCASE, SCALAR, ANY;
%terminals OROR, ARROW, COMMA, LRPAREN, RRPAREN, QUESTION, MULT, PLUS, LSPAREN, RSPAREN, OR, EQUAL, SQUOTATION;

%left  OR, EQUAL, RSPAREN, SQUOTATION;
%left  COMMA;
%left  RRPAREN;
%left  PLUS, MULT, QUESTION;
%left  ARROW;
%left  OROR;


%typeof NUMBER = "Number";
%typeof ID, UPPERCASE, LOWERCASE, SCALAR, ANY = "String";
%typeof caselist = "SPCaselist";
%typeof case = "SPCase";
%typeof outputlist = "SPOutputlist";
%typeof patternlist = "SPPatternlist";
%typeof pattern, assertStmt = "SPAbstractPattern";
%typeof matchExpr, basicMatchExpr = "SPAbstractMatchExpr";
%typeof vectorExpr = "SPAbstractVectorExpr";
%typeof vertcatExpr = "SPVertcatExpr";
%typeof arglist = "SPArglist";
%typeof scalarExpr = "SPAbstractScalarExpr";
%typeof assignStmt = "SPAssignStmt";
%typeof arg, assignmentLHS, assignmentRHS = "SPAbstractMatchElement";
%typeof funCall = "SPFunCall";


%goal caselist;

caselist
    = case.c                                  {: return new SPCaselist(c, null); :}
    | case.c OROR caselist.l                  {: return new SPCaselist(c, l); :}
    ;

case
    = patternlist.p ARROW outputlist.o        {: return new SPCase(p, o); :}
    ;

outputlist
    = vectorExpr.v                            {: return new SPOutputlist(v, null); :}
    | vectorExpr.v COMMA outputlist.o         {: return new SPOutputlist(v, o); :}
    ;
    
patternlist 
	= pattern.e                               {: return new SPPatternlist(e, null); :}
	| pattern.e COMMA patternlist.p           {: return new SPPatternlist(e, p); :}
	;
    
pattern
    = matchExpr.m                             {: return m; :}
    | assignStmt.a                            {: return a; :}
    | assertStmt.a                            {: return a; :}
    ;
    
matchExpr
    = basicMatchExpr.m OR basicMatchExpr.n    {: return new SPOr(m,n); :}
    | basicMatchExpr.m QUESTION               {: return new SPQuestion(m); :}
    | basicMatchExpr.m MULT                   {: return new SPMult(m); :}
    | basicMatchExpr.m PLUS                   {: return new SPPlus(m); :}
    | basicMatchExpr.m                        {: return m; :}
    ;
    
basicMatchExpr
	= LRPAREN patternlist.p RRPAREN           {: return new SPRParen(p); :}
    | SQUOTATION ID.i SQUOTATION              {: return new SPStringLiteral(i); :}
    | SQUOTATION LOWERCASE.i SQUOTATION       {: return new SPStringLiteral(i); :}
	| vectorExpr.v                            {: return v; :}
    ;

vectorExpr
    = SCALAR.d                                {: return new SPScalar(d); :}  /* used to match a scalar input argument, whose shape is [1,1]. */
    | UPPERCASE.u                             {: return new SPUppercase(u); :}
    | ANY.a                                   {: return new SPAny(a); :}
    | vertcatExpr.v                           {: return v; :}  /* used to match a vertcat vector, something like [m,n], [1,k] or even []. */
    ;
    
vertcatExpr
    = LSPAREN RSPAREN                         {: return new SPVertcatExpr(); :}
    | LSPAREN arglist.al RSPAREN              {: return new SPVertcatExpr(al); :}
    ;
    
arglist
    = arg.a                                   {: return new SPArglist(a, null); :}
    | arg.a COMMA arglist.al                  {: return new SPArglist(a, al); :}
    ;

arg
    = scalarExpr.s                            {: return s; :}
    | vectorExpr.v                            {: return v; :}
    ;
    
scalarExpr
    = NUMBER.n                                {: return new SPNumber(n); :}
    | LOWERCASE.l                             {: return new SPLowercase(l); :}
    ;

assignStmt
    = assignmentLHS.l EQUAL assignmentRHS.r   {: return new SPAssignStmt(l, r); :}
    ;
    
assignmentLHS
    = LOWERCASE.l                             {: return new SPLowercase(l); :}
    | UPPERCASE.u                             {: return new SPUppercase(u); :}
    | UPPERCASE.u LRPAREN scalarExpr.s RRPAREN{: return new SPUpperIndex(u, s); :}
    | ANY.a LRPAREN scalarExpr.s RRPAREN      {: return new SPUpperIndex(a, s); :}
    ;
    
assignmentRHS
    = scalarExpr.s                            {: return s; :}
    | vectorExpr.v                            {: return v; :}
    | funCall.f                               {: return f; :}
    ;

funCall
    = ID.i LRPAREN RRPAREN                    {: return new SPFunCall(i, null); :}
    | ID.i LRPAREN arglist.al RRPAREN         {: return new SPFunCall(i, al); :}
    ;

assertStmt
    = funCall.f                                {: return f; :}
    ;