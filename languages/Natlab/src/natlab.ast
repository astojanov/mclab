// AST for Natlab grammar

Program ::= HelpComment* Stmt*;

abstract HelpComment ::= <Text:String>;
OneLineHelpComment : HelpComment;
MultiLineHelpComment : HelpComment;

abstract Stmt; 
EmptyStmt:Stmt;
ExprStmt:Stmt ::= Expr;
AssignStmt:Stmt ::= Dest:Expr Source:Expr;

abstract Expr;

ColonExpr:Expr ::= Base:Expr [Incr:Expr] Limit:Expr;
Colon:Expr;

abstract Access:Expr;

// LHS of assignments
IdUse:Access ::= <ID:String>;
ParseName:Access ::= <ID:String>;

ParameterizedAccess : Access ::= <ID:String> Arg:Expr*;
MatrixDecl : Access ::= Arg:MatrixRow*;
MatrixRow : Access ::= Arg:Expr*;

// VarAccess : Access ::= <ID:String>;

// Other expressions 
abstract PrimaryExpr : Expr;

ParExpr : PrimaryExpr ::= Expr;

abstract Literal : PrimaryExpr;
IntegerLiteral : Literal ::= <Value:natlab.IntNumericLiteralValue>;
DoubleLiteral : Literal ::= <Value:natlab.FPNumericLiteralValue>;
StringLiteral : Literal ::= <Value:String>;

//-------------------------------------------------------------------
abstract Unary : Expr ::= Operand:Expr;
MinusExpr : Unary ;
PlusExpr : Unary ;
LogNotExpr : Unary ;
TransposeExpr : Unary ;
ArrayTransposeExpr : Unary ;

abstract Binary : Expr ::= LeftOperand:Expr RightOperand:Expr;

abstract ArithmeticExpr : Binary;
abstract MultiplicativeExpr : ArithmeticExpr;
MulExpr : MultiplicativeExpr ;
DivExpr : MultiplicativeExpr ;
LeftDivExpr : MultiplicativeExpr ;
PowExpr : MultiplicativeExpr ;

abstract AdditiveExpr : ArithmeticExpr;
AddExpr : AdditiveExpr ;
SubExpr : AdditiveExpr ;

// Element wise expression
abstract EMultiplicativeExpr : ArithmeticExpr;
EMulExpr : EMultiplicativeExpr ;
EDivExpr : EMultiplicativeExpr ;
ELeftDivExpr : EMultiplicativeExpr ;
EPowExpr : EMultiplicativeExpr ;

abstract LogicalExpr : Binary;
AndLogicalExpr : LogicalExpr ;
OrLogicalExpr : LogicalExpr ;

abstract ShortCircuitExpr : Binary;
ShortCircuitAndExpr : ShortCircuitExpr ;
ShortCircuitOrExpr : ShortCircuitExpr ;

abstract RelationalExpr : Binary;
LTExpr : RelationalExpr ;
GTExpr : RelationalExpr ;
LEExpr : RelationalExpr ;
GEExpr : RelationalExpr ;

abstract EqualityExpr : RelationalExpr;
EQExpr : EqualityExpr ;
NEExpr : EqualityExpr ;

//------- ------------------------------------------------------------
// statement that can be reached by break or continue
abstract BranchTargetStmt : Stmt;  
ForStmt : BranchTargetStmt ::= AssignStmt Stmt*; 
WhileStmt : BranchTargetStmt ::= Expr Stmt*; 

BreakStmt : Stmt;
ContinueStmt : Stmt;

