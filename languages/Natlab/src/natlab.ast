// AST for Natlab grammar
abstract Program;
Script : Program ::= HelpComment* Stmt*;
FunctionList : Program ::= Function*;
EmptyProgram : Program;

abstract ClassBody;
ClassDef : Program ::= Attr:Attribute* <Name:String> SuperClasses:SuperClass* HelpComment* Properties* Methods* ClassEvents*;
Attribute ::= <Key:String> ExprStmt;
SuperClass ::= <Name:String>;
Properties:ClassBody ::= Attr:Attribute* Property*;
Property ::= <Name:String> ExprStmt;
Methods:ClassBody ::= Attr:Attribute* Signature* Function*;
Signature ::= OutputParam:Name* <Name:String> InputParam:Name*;
ClassEvents:ClassBody ::= Attr:Attribute* Event*;
Event ::= <Name:String>;

abstract HelpComment ::= <Text:String>;
OneLineHelpComment : HelpComment;
MultiLineHelpComment : HelpComment;

Name ::= <ID : String>;

Function ::= OutputParam:Name* <Name:String> InputParam:Name* HelpComment* Stmt* NestedFunction:Function*;

abstract Stmt;
ExprStmt : Stmt ::= Expr;
AssignStmt : Stmt ::= LHS:Expr RHS:Expr;
GlobalStmt : Stmt ::= Name*;
PersistentStmt : Stmt ::= Name*;
ShellCommandStmt : Stmt ::= <Command : String>;

BreakStmt : Stmt;
ContinueStmt : Stmt;
ReturnStmt : Stmt;

EmptyStmt : Stmt; //TODO-AC: remove this

ForStmt : Stmt ::= AssignStmt Stmt*;
WhileStmt : Stmt ::= Expr Stmt*;

TryStmt : Stmt ::= TryStmt:Stmt* CatchStmt:Stmt*;

SwitchStmt : Stmt ::= Expr SwitchCaseBlock* [DefaultCaseBlock];
SwitchCaseBlock ::= Expr Stmt*;
DefaultCaseBlock ::= Stmt*;

IfStmt : Stmt ::= IfBlock* [ElseBlock];
IfBlock ::= Condition:Expr Stmt*;
ElseBlock ::= Stmt*;

abstract Expr;
RangeExpr : Expr ::= Lower:Expr [Incr:Expr] Upper:Expr;
ColonExpr : Expr;

abstract LValueExpr : Expr;
NameExpr : LValueExpr ::= Name;
ParameterizedExpr : LValueExpr ::= Target:Expr Arg:Expr*;
CellIndexExpr : LValueExpr ::= Target:Expr Arg:Expr*;
DotExpr : LValueExpr ::= Target:Expr Field:Name;
MatrixExpr : LValueExpr ::= Row*;
CellArrayExpr : LValueExpr ::= Row*;

Row ::= Element:Expr*;

abstract LiteralExpr : Expr;
IntLiteralExpr : LiteralExpr ::= <Value:natlab.IntNumericLiteralValue>;
FPLiteralExpr : LiteralExpr ::= <Value:natlab.FPNumericLiteralValue>;
StringLiteralExpr : LiteralExpr ::= <Value:String>;

abstract UnaryExpr : Expr ::= Operand:Expr;
UMinusExpr : UnaryExpr;
UPlusExpr : UnaryExpr;
NotExpr : UnaryExpr;
MTransposeExpr : UnaryExpr;
ArrayTransposeExpr : UnaryExpr;

abstract BinaryExpr : Expr ::= LHS:Expr RHS:Expr;
PlusExpr : BinaryExpr;
MinusExpr : BinaryExpr;

MTimesExpr : BinaryExpr;
MDivExpr : BinaryExpr;
MLDivExpr : BinaryExpr;
MPowExpr : BinaryExpr;

ETimesExpr : BinaryExpr;
EDivExpr : BinaryExpr;
ELDivExpr : BinaryExpr;
EPowExpr : BinaryExpr;

AndExpr : BinaryExpr;
OrExpr : BinaryExpr;

ShortCircuitAndExpr : BinaryExpr;
ShortCircuitOrExpr : BinaryExpr;

LTExpr : BinaryExpr;
GTExpr : BinaryExpr;
LEExpr : BinaryExpr;
GEExpr : BinaryExpr;
EQExpr : BinaryExpr;
NEExpr : BinaryExpr;

FunctionHandleExpr : Expr ::= Name;
LambdaExpr : Expr ::= InputParam:Name* Body:Expr;