
Aspect aspect =
     ASPECT IDENTIFIER.name stmt_separator_list help_comment.comments* aspect_body.body* END 
	 	{: return aspect(name, comments, body); :}
  ;
  
Body aspect_body =
     properties_block.p stmt_separator_opt_list {: return p; :}
  |  methods_block.m stmt_separator_opt_list {: return m; :}
  |  patterns_block.p stmt_separator_opt_list {: return p; :}
  |  actions_block.a stmt_separator_opt_list {: return a; :}
  ;

Patterns patterns_block =
	 PATTERNS stmt_separator_list patterns_body.body* END {: return new Patterns(body); :}
  ;

Pattern patterns_body =
     IDENTIFIER.name COLON pattern_designators.pd stmt_separator_list {: return new Pattern(name, pd); :}
  ;

Expr pattern_designators =
     pattern_designators_or.pd {: return pd; :}
  |  pattern_designators.l AND pattern_designators_or.pd {: return new AndExpr(l, pd); :}
  ;
  
Expr pattern_designators_or = 
     pattern_designators_unary.pd {: return pd; :}
  |  pattern_designators_or.l OR pattern_designators_unary.pd {: return new OrExpr(l, pd); :}
  ;

Expr pattern_designators_unary = 
     pattern_designator.pd {: return pd; :}
  |  NOT pattern_designator.pd {: return new NotExpr(pd); :}
  ;
     
Expr pattern_designator =
     LPAREN pattern_designators.pd RPAREN {: return pd; :}
  |  CALL LPAREN pattern_list.l RPAREN {: return new PatternDesignator("call", l); :}
  |  EXECUTION LPAREN pattern_list.l RPAREN {: return new PatternDesignator("execution", l); :}
  |  SET LPAREN pattern_list.l RPAREN {: return new PatternDesignator("set", l); :}
  |  GET LPAREN pattern_list.l RPAREN {: return new PatternDesignator("get", l); :}
  |  WITHIN LPAREN pattern_path.l RPAREN {: return new PatternDesignator("within", new List().add(l)); :}
  |  CFLOW LPAREN pattern_path.l RPAREN {: return new PatternDesignator("cflow", new List().add(l)); :}
  ;
  
List pattern_list =
     {: return new List(); :}
  |  pattern_path_sign.p {: return new List().add(p); :}
  |  pattern_simple.s COMMA pattern_path_sign.p {: return new List().add(s).add(p); :}
  ;

Name pattern_path_sign =
     pattern_path.b {: return b; :}
  |  pattern_path.s LPAREN list_dotdot.ls RPAREN {: String pattern = s.getID()+"$"+ls.getNumChild(); if(((Name)ls.getChild(ls.getNumChild()-1)).getID().compareTo("..") == 0) pattern += "+"; return new Name(pattern); :}
  ;
  
Name pattern_path =
     pattern_simple.s {: return s; :}
  |  pattern_path.p DOT pattern_simple.s {: return new Name(p.getID()+"."+s.getID()); :}
  |  pattern_path.p DOTDOT pattern_simple.s {: return new Name(p.getID()+".."+s.getID()); :}
  ;

Name pattern_simple =
     STAR {: return new Name("*"); :}
//|  STARSTAR {: return new Name("**"); :}
  |  IDENTIFIER.name {: return new Name(name); :}
  ;

List list_dotdot =
	 list_star.l {: return l; :}
  |  list_star.l COMMA DOTDOT {: return l.add(new Name("..")); :}
  ;
  
List list_star =
	 STAR {: return new List<Name>().add(new Name("*")); :}
  |  list_star.l COMMA STAR {: return l.add(new Name("*")); :}
  ;
  
Actions actions_block =
	 ACTIONS stmt_separator_list actions_body.body* END {: return new Actions(body); :}
  ;
  
AspectAction actions_body =
     IDENTIFIER.name COLON action_type.type IDENTIFIER.pattern COLON input_params.in stmt_separator help_comment.comments* stmt_or_function.body* END stmt_separator_list
         {: return action(name, type, pattern, in, comments, body); :}
  |  IDENTIFIER.name COLON action_type.type IDENTIFIER.pattern stmt_separator help_comment.comments* stmt_or_function.body* END stmt_separator_list
         {: return action(name, type, pattern, null, comments, body); :}
  ;

Name action_type = 
     BEFORE {: return new Name("before"); :}
  |  AFTER {: return new Name("after"); :}
  |  AROUND {: return new Name("around"); :}
  ;
