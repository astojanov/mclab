// =========================================================================== //
//                                                                             //
// Copyright 2008-2011 Andrew Casey, Jun Li, Jesse Doherty,                    //
//   Maxime Chevalier-Boisvert, Toheed Aslam, Anton Dubrau, Nurudeen Lameed,   //
//   Amina Aslam, Rahul Garg, Soroush Radpour, Olivier Savary Belanger,        //
//   Laurie Hendren, Clark Verbrugge and McGill University.                    //
//                                                                             //
//   Licensed under the Apache License, Version 2.0 (the "License");           //
//   you may not use this file except in compliance with the License.          //
//   You may obtain a copy of the License at                                   //
//                                                                             //
//       http://www.apache.org/licenses/LICENSE-2.0                            //
//                                                                             //
//   Unless required by applicable law or agreed to in writing, software       //
//   distributed under the License is distributed on an "AS IS" BASIS,         //
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  //
//   See the License for the specific language governing permissions and       //
//   limitations under the License.                                            //
//                                                                             //
// =========================================================================== //

abstract Type;
UnionType : Type ::= Type*;
IntersectionType : Type ::= Type*;
ArrowType : Type ::= ArgType : Type  ResultType : Type;
ArgTupleType : Type ::= StaticArgType : Type*  VarArgType;
UnitType : Type;
VarArgType : Type ::= Type;
TupleType : Type ::= ElementType : Type*;
CellArrayType : Type ::= DefaultElementType : Type;
MatrixType : Type ::=  ElementType : BaseType;

abstract BaseType : Type;
abstract PrimitiveType : BaseType;
TypeVarType : BaseType ::= <Name>;
HandleType : BaseType ::= ArrowType;
UnknownType : BaseType;
StructType : BaseType ::= FieldEntry*;


abstract IntType : PrimitiveType;
Int8 : IntType ::= <Signed:boolean> <Complex:boolean>;
Int16 : IntType ::= <Signed:boolean> <Complex:boolean>;
Int32 : IntType ::= <Signed:boolean> <Complex:boolean>;
Int64 : IntType ::= <Signed:boolean> <Complex:boolean>;


abstract FloatType : PrimitiveType;
Float32 : FloatType ::= <Signed:boolean> <Complex:boolean>;
Float64 : FloatType ::= <Signed:boolean> <Complex:boolean>;

CharType : PrimitiveType;
BoolType : PrimitiveType;


FieldEntry ::= <Name> Type;


abstract Shape;

KnownExtentsShape : Shape ::= Extents:KnownExtents;

abstract Rank;
KnownRank : Rank ::= <Dims : int>;

abstract Extents;
KnownExtents :Extents ::= <Dims : java.util.List<Integer>>;
