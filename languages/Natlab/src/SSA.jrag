/*
 *  Converting to SSA Form 
 *  1. Renaming
 */
import java.util.*;

aspect SSAForm {

	// Renaming functions
	public void ASTNode.renaming(String orgName, String newName) {	
		for(int i = 0; i < getNumChild(); i++) {
			getChild(i).renaming(orgName, newName);
		}
	}
	public void Name.renaming(String orgName, String newName) {	
		if(orgName.equals(getID())) {
			setID(newName);
		}
	}
	// Node: ForStmt, If..else.., only means one node
    public void ForStmt.renaming(String orgName, String newName) {	
    	getAssignStmt().renaming(orgName, newName);
    	getStmtList().renaming(orgName, newName);
    }
    public void WhileStmt.renaming(String orgName, String newName) {	
        getExpr().renaming(orgName, newName);
    }

    public void SwitchStmt.renaming(String orgName, String newName) {	
        getExpr().renaming(orgName, newName);
    }

	// Avoid replacing the LHS variable name    
    public void AssignStmt.renaming(String orgName, String newName) {	
		getLHS().renaming(orgName, newName);
		/*	// following is the case of constant propagation
		ASTNode lhs = getLHS();
		if(lhs instanceof ParameterizedExpr) {
			// Allow to rename LHS array variable's arguments 
			((ParameterizedExpr) lhs).getArgList().renaming(orgName, newName);
		} */
		getRHS().renaming(orgName, newName);
    }
	// ------------------------------------------------------------------------
	// Renaming functions
	public void ASTNode.renaming(String orgName, ast.Expr newExpr) {	
		for(int i = 0; i < getNumChild(); i++) {
			getChild(i).renaming(orgName, newExpr);
		}
	}
	public void NameExpr.renaming(String orgName, ast.Expr newExpr) {	
		if(orgName.equals(getName().getID())) {
			// replace by newExpr;
			ast.ASTNode parent = this.getParent();
			int loc = parent.getIndexOfChild(this);
			if(loc>=0)	
				parent.setChild(newExpr, loc);
			else
				System.err.println("Renaming("+orgName+", "+newExpr+") error, loc="+loc);
		}
	}
	// Node: ForStmt, If..else.., only means one node
	public void ForStmt.renaming(String orgName, ast.Expr newExpr) {	
		getAssignStmt().renaming(orgName, newExpr);
		getStmtList().renaming(orgName, newExpr);
	}
	public void WhileStmt.renaming(String orgName, ast.Expr newExpr) {	
		getExpr().renaming(orgName, newExpr);
	}

	public void SwitchStmt.renaming(String orgName, ast.Expr newExpr) {	
		getExpr().renaming(orgName, newExpr);
	}
	
	// Avoid replacing the LHS variable name	
	public void AssignStmt.renaming(String orgName, ast.Expr newExpr) {	
		ASTNode lhs = getLHS();
		if(lhs instanceof ParameterizedExpr) {
			// Allow to rename LHS array variable's arguments 
			((ParameterizedExpr) lhs).getArgList().renaming(orgName, newExpr);
		}
		getRHS().renaming(orgName, newExpr);
	}
	
	// Avoid replacing the Array variable name, just renaming arguments
	public void ParameterizedExpr.renaming(String orgName, ast.Expr newExpr) {	
		getArgList().renaming(orgName, newExpr);
	}
	
	//-------------------------------------------------------------------------
	// getVarName(): return LHS variable name, A(i,j) return A
	// Only can call on AssignStmt/NameExpr/ParameterizedExpr
	public String ASTNode.getVarName() {	
		return "";
	}
    public String AssignStmt.getVarName() {	
    	return getLHS().getVarName();
    }
	public String NameExpr.getVarName() {
		return getName().getVarName();
	}
	public String Name.getVarName() {
		return getID();
	}
	public String ParameterizedExpr.getVarName() {
		return getTarget().getVarName();
	}
}
