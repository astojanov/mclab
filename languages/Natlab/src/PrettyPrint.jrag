//TODO-AC: indentation
//TODO-AC: comment placement
aspect PrettyPrint {
    syn String ASTNode.getPrettyPrinted() {
        StringBuffer buf = new StringBuffer();
        for(beaver.Symbol comment : getComments()) {
            buf.append(comment.value);
            buf.append('\n');
        }
        buf.append(getPrettyPrintedLessComments());
        return buf.toString();
    }

    //default - exception
    syn String ASTNode.getPrettyPrintedLessComments() { throw new UnsupportedOperationException(getClass().getName() + ".getPrettyPrintedLessComments()"); }
    
    //program
    eq EmptyProgram.getPrettyPrintedLessComments() {
        return "";
    }
    
    eq Script.getPrettyPrintedLessComments() {
        StringBuffer buf = new StringBuffer();
        for(HelpComment comment : getHelpComments()) {
            buf.append(comment.getPrettyPrinted());
            buf.append('\n');
        }
        for(Stmt stmt : getStmts()) {
            buf.append(stmt.getPrettyPrinted());
            buf.append('\n');
        }
        return buf.toString();
    }
    
    eq FunctionList.getPrettyPrintedLessComments() {
        StringBuffer buf = new StringBuffer();
        for(Function func : getFunctions()) {
            buf.append(func.getPrettyPrinted());
            buf.append('\n');
        }
        return buf.toString();
    }
    
    eq Function.getPrettyPrintedLessComments() {
        StringBuffer buf = new StringBuffer();
        buf.append("function ");
        buf.append(" [");
        boolean first = true;
        for(Name param : getOutputParams()) {
            if(!first) {
                buf.append(", ");
            }
            buf.append(param.getPrettyPrinted());
            first = false;
        }
        buf.append("] = ");
        buf.append(getName());
        buf.append("(");
        first = true;
        for(Name param : getInputParams()) {
            if(!first) {
                buf.append(", ");
            }
            buf.append(param.getPrettyPrinted());
            first = false;
        }
        buf.append(")");
        buf.append('\n');
        for(HelpComment comment : getHelpComments()) {
            buf.append(comment.getPrettyPrinted());
            buf.append('\n');
        }
        for(Stmt stmt : getStmts()) {
            buf.append(stmt.getPrettyPrinted());
            buf.append('\n');
        }
        for(Function func : getNestedFunctions()) {
            buf.append(func.getPrettyPrinted());
            buf.append('\n');
        }
        buf.append("end");
        return buf.toString();
    }
    
    //help comments
    
    eq HelpComment.getPrettyPrintedLessComments() = getText();
    
    //stmts
    eq EmptyStmt.getPrettyPrintedLessComments() = "";
    eq ExprStmt.getPrettyPrintedLessComments() = getExpr().getPrettyPrinted() + (isOutputSuppressed() ? ";" : "");
    eq AssignStmt.getPrettyPrintedLessComments() = getLHS().getPrettyPrinted() + " = " + getRHS().getPrettyPrinted() + (isOutputSuppressed() ? ";" : "");
    eq GlobalStmt.getPrettyPrintedLessComments() {
        StringBuffer buf = new StringBuffer();
        buf.append("global");
        for(Name name : getNames()) {
            buf.append(" ");
            buf.append(name.getPrettyPrinted());
        }
        if(isOutputSuppressed()) {
            buf.append(";");
        }
        return buf.toString();
    }
    eq PersistentStmt.getPrettyPrintedLessComments() {
        StringBuffer buf = new StringBuffer();
        buf.append("persistent");
        for(Name name : getNames()) {
            buf.append(" ");
            buf.append(name.getPrettyPrinted());
        }
        if(isOutputSuppressed()) {
            buf.append(";");
        }
        return buf.toString();
    }
    eq ShellCommandStmt.getPrettyPrintedLessComments() = "!" + getCommand() + (isOutputSuppressed() ? ";" : "");
    
    eq BreakStmt.getPrettyPrintedLessComments() = "break" + (isOutputSuppressed() ? ";" : "");
    eq ContinueStmt.getPrettyPrintedLessComments() = "continue" + (isOutputSuppressed() ? ";" : "");
    eq ReturnStmt.getPrettyPrintedLessComments() = "return" + (isOutputSuppressed() ? ";" : "");

    eq ForStmt.getPrettyPrintedLessComments() {
        StringBuffer buf = new StringBuffer();
        buf.append("for ");
        buf.append(getAssignStmt().getPrettyPrinted());
        buf.append('\n');
        for(Stmt stmt : getStmts()) {
            buf.append('\t');
            buf.append(stmt.getPrettyPrinted());
            buf.append('\n');
        }
        buf.append("end");
        return buf.toString();
    }

    eq WhileStmt.getPrettyPrintedLessComments() {
        StringBuffer buf = new StringBuffer();
        buf.append("while ");
        buf.append(getExpr().getPrettyPrinted());
        buf.append('\n');
        for(Stmt stmt : getStmts()) {
            buf.append('\t');
            buf.append(stmt.getPrettyPrinted());
            buf.append('\n');
        }
        buf.append("end");
        return buf.toString();
    }

    // if-elseif-else
    eq IfStmt.getPrettyPrintedLessComments() {
        StringBuffer buf = new StringBuffer();
        boolean first = true;
        for(IfBlock block : getIfBlocks()) {
            if(!first) {
                buf.append("else");
            }
            buf.append(block.getPrettyPrinted());
            first = false;
        }
        if(hasElseBlock()) {
            buf.append(getElseBlock().getStructureString());
        }
        buf.append("end");
        return buf.toString();
    }

    eq IfBlock.getPrettyPrintedLessComments() {
        StringBuffer buf = new StringBuffer();
        buf.append("if ");
        buf.append(getCondition().getPrettyPrinted());
        buf.append('\n');
        for(Stmt stmt : getStmts()) {
            buf.append('\t');
            buf.append(stmt.getPrettyPrinted());
            buf.append('\n');
        }
        return buf.toString();
    }

    eq ElseBlock.getPrettyPrintedLessComments() {
        StringBuffer buf = new StringBuffer();
        buf.append("else ");
        buf.append('\n');
        for(Stmt stmt : getStmts()) {
            buf.append('\t');
            buf.append(stmt.getPrettyPrinted());
            buf.append('\n');
        }
        return buf.toString();
    }

    // switch-case
    eq SwitchStmt.getPrettyPrintedLessComments() {
        StringBuffer buf = new StringBuffer();
        buf.append("switch ");
        buf.append(getExpr().getPrettyPrinted());
        buf.append('\n');
        for(SwitchCaseBlock scase : getSwitchCaseBlocks()) {
            buf.append(scase.getPrettyPrinted());
        }
        if(hasDefaultCaseBlock()) {
            buf.append(getDefaultCaseBlock().getPrettyPrinted());
        }
        buf.append("end");
        return buf.toString();
    }
    eq SwitchCaseBlock.getPrettyPrintedLessComments() {
        StringBuffer buf = new StringBuffer();
        buf.append("case ");
        buf.append(getExpr().getPrettyPrinted());
        buf.append('\n');
        for(Stmt stmt : getStmts()) {
            buf.append('\t');
            buf.append(stmt.getPrettyPrinted());
            buf.append('\n');
        }
        return buf.toString();
    }
    eq DefaultCaseBlock.getPrettyPrintedLessComments() {
        StringBuffer buf = new StringBuffer();
        buf.append("otherwise ");
        buf.append('\n');
        for(Stmt stmt : getStmts()) {
            buf.append('\t');
            buf.append(stmt.getPrettyPrinted());
            buf.append('\n');
        }
        return buf.toString();
    }

    // try-catch
    eq TryStmt.getPrettyPrintedLessComments() {
        StringBuffer buf = new StringBuffer();
        buf.append("try ");
        buf.append('\n');
        for(Stmt stmt : getTryStmts()) {
            buf.append('\t');
            buf.append(stmt.getPrettyPrinted());
            buf.append('\n');
        }
        List<Stmt> catchList = getCatchStmts();
        if (catchList.getNumChild()>0) {
            buf.append("catch ");
            buf.append('\n');        
            for(Stmt stmt : catchList) {
                buf.append('\t');
                buf.append(stmt.getPrettyPrinted());
                buf.append('\n');
            }
        }
        buf.append("end");
        return buf.toString();
    }

    //exprs
    
    eq RangeExpr.getPrettyPrintedLessComments() {
        StringBuffer buf = new StringBuffer();
        buf.append('(');
        buf.append(getLower().getPrettyPrinted());
        buf.append(" : ");
        if(hasIncr()) {
            buf.append(getIncr().getPrettyPrinted());
            buf.append(" : ");
        }
        buf.append(getUpper().getPrettyPrinted());
        buf.append(')');
        return buf.toString();
    }
    eq ColonExpr.getPrettyPrintedLessComments() = ":";
    
    eq Name.getPrettyPrintedLessComments() = getID();

    //accesses
    eq NameExpr.getPrettyPrintedLessComments() = getName().getPrettyPrinted();
    eq DotExpr.getPrettyPrintedLessComments() = getTarget().getPrettyPrinted() + "." + getField().getPrettyPrinted();
    eq ParameterizedExpr.getPrettyPrintedLessComments() {
        StringBuffer buf = new StringBuffer();
        buf.append(getTarget().getPrettyPrinted());
        buf.append('(');
        boolean first = true;
        for(Expr arg : getArgs()) {
            if(!first) {
                buf.append(", ");
            }
            buf.append(arg.getPrettyPrinted());
            first = false;
        }
        buf.append(')');
        return buf.toString();
    }
    eq CellIndexExpr.getPrettyPrintedLessComments() {
        StringBuffer buf = new StringBuffer();
        buf.append(getTarget().getPrettyPrinted());
        buf.append('{');
        boolean first = true;
        for(Expr arg : getArgs()) {
            if(!first) {
                buf.append(", ");
            }
            buf.append(arg.getPrettyPrinted());
            first = false;
        }
        buf.append('}');
        return buf.toString();
    }

    eq MatrixExpr.getPrettyPrintedLessComments() {
        StringBuffer buf = new StringBuffer();
        buf.append('[');
        boolean first = true;
        for(Row row : getRows()) {
            if(!first) {
                buf.append("; ");
            }
            buf.append(row.getPrettyPrinted());
            first = false;
        }
        buf.append(']');
        return buf.toString();
    }
    eq CellArrayExpr.getPrettyPrintedLessComments() {
        StringBuffer buf = new StringBuffer();
        buf.append('{');
        boolean first = true;
        for(Row row : getRows()) {
            if(!first) {
                buf.append("; ");
            }
            buf.append(row.getPrettyPrinted());
            first = false;
        }
        buf.append('}');
        return buf.toString();
    }
    eq Row.getPrettyPrintedLessComments() {
        StringBuffer buf = new StringBuffer();
        boolean first = true;
        for(Expr element : getElements()) {
            if(!first) {
                buf.append(", ");
            }
            buf.append(element.getPrettyPrinted());
            first = false;
        }
        return buf.toString();
    }
    
    eq FunctionHandleExpr.getPrettyPrintedLessComments() = "@" + getName().getStructureString();
    eq LambdaExpr.getPrettyPrintedLessComments() {
        StringBuffer buf = new StringBuffer();
        buf.append("(@(");
        boolean first = true;
        for(Name param : getInputParams()) {
            if(!first) {
                buf.append(", ");
            }
            buf.append(param.getPrettyPrinted());
            first = false;
        }
        buf.append(") ");
        buf.append(getBody().getPrettyPrinted());
        buf.append(")");
        return buf.toString();
    }
    
    //literals
    eq IntLiteralExpr.getPrettyPrintedLessComments() = getValue().getText();
    eq FPLiteralExpr.getPrettyPrintedLessComments() = getValue().getText();
    eq StringLiteralExpr.getPrettyPrintedLessComments() = "'" + getValue() + "'";
    
    eq UMinusExpr.getPrettyPrintedLessComments() = "(-" + getOperand().getPrettyPrinted() + ")";
    eq UPlusExpr.getPrettyPrintedLessComments() = "(+" + getOperand().getPrettyPrinted() + ")";
    eq NotExpr.getPrettyPrintedLessComments() = "(~" + getOperand().getPrettyPrinted() + ")";
    eq MTransposeExpr.getPrettyPrintedLessComments() = "(" + getOperand().getPrettyPrinted() + "')";
    eq ArrayTransposeExpr.getPrettyPrintedLessComments() = "(" + getOperand().getPrettyPrinted() + ".')";
    
    syn String BinaryExpr.getPrettyPrintedLessComments(String op) = "(" + getLHS().getPrettyPrinted() + " " + op + " " + getRHS().getPrettyPrinted() + ")";
    
    eq PlusExpr.getPrettyPrintedLessComments() = getPrettyPrintedLessComments("+");
    eq MinusExpr.getPrettyPrintedLessComments() = getPrettyPrintedLessComments("-");
    
    eq MTimesExpr.getPrettyPrintedLessComments() = getPrettyPrintedLessComments("*");
    eq MDivExpr.getPrettyPrintedLessComments() = getPrettyPrintedLessComments("/");
    eq MLDivExpr.getPrettyPrintedLessComments() = getPrettyPrintedLessComments("\\");
    eq MPowExpr.getPrettyPrintedLessComments() = getPrettyPrintedLessComments("^");
    
    eq ETimesExpr.getPrettyPrintedLessComments() = getPrettyPrintedLessComments(".*");
    eq EDivExpr.getPrettyPrintedLessComments() = getPrettyPrintedLessComments("./");
    eq ELDivExpr.getPrettyPrintedLessComments() = getPrettyPrintedLessComments(".\\");
    eq EPowExpr.getPrettyPrintedLessComments() = getPrettyPrintedLessComments(".^");
    
    eq AndExpr.getPrettyPrintedLessComments() = getPrettyPrintedLessComments("&");
    eq OrExpr.getPrettyPrintedLessComments() = getPrettyPrintedLessComments("|");
    eq ShortCircuitAndExpr.getPrettyPrintedLessComments() = getPrettyPrintedLessComments("&&");
    eq ShortCircuitOrExpr.getPrettyPrintedLessComments() = getPrettyPrintedLessComments("||");
    eq LTExpr.getPrettyPrintedLessComments() = getPrettyPrintedLessComments("<");
    eq GTExpr.getPrettyPrintedLessComments() = getPrettyPrintedLessComments(">");
    eq LEExpr.getPrettyPrintedLessComments() = getPrettyPrintedLessComments("<=");
    eq GEExpr.getPrettyPrintedLessComments() = getPrettyPrintedLessComments(">=");
    eq EQExpr.getPrettyPrintedLessComments() = getPrettyPrintedLessComments("==");
    eq NEExpr.getPrettyPrintedLessComments() = getPrettyPrintedLessComments("~=");
}