
aspect UnreachableCode {

	private boolean Stmt.canCompleteNormally = true;
	syn boolean Stmt.canCompleteNormally() = canCompleteNormally;
    public void Stmt.setCanCompleteNormally(boolean canCompleteNormally) {
    	this.canCompleteNormally = canCompleteNormally; 
    }
	
	eq BreakStmt.canCompleteNormally() = false;
	eq ContinueStmt.canCompleteNormally() = false;
	eq ReturnStmt.canCompleteNormally() = false;
	
    private boolean Script.canCompleteNormally = true;
	private boolean Function.canCompleteNormally = true;
	private boolean PropertyAccess.canCompleteNormally = true;
	
	private boolean SwitchCaseBlock.canCompleteNormally = true;
	public boolean SwitchCaseBlock.canCompleteNormally() {
		return canCompleteNormally;
	}
	private boolean IfBlock.canCompleteNormally = true;
	public boolean IfBlock.canCompleteNormally() {
		return canCompleteNormally;
	}
   	
   	private String Stmt.strBreakContinueReturn = "";
	syn String Stmt.strBreakContinueReturn() = strBreakContinueReturn;
    public void Stmt.setBreakContinueReturn(String strBreakContinueReturn) {
    	this.strBreakContinueReturn = strBreakContinueReturn; 
    }
    
    eq BreakStmt.strBreakContinueReturn() = "Break";
	eq ContinueStmt.strBreakContinueReturn() = "Continue";
	eq ReturnStmt.strBreakContinueReturn() = "Return";
    
	private String Script.strBreakContinueReturn = "";
	private String Function.strBreakContinueReturn = "";
	private String PropertyAccess.strBreakContinueReturn = "";
	
	private String SwitchCaseBlock.strBreakContinueReturn = "";
	public String SwitchCaseBlock.strBreakContinueReturn() {
		return strBreakContinueReturn;
	}
	private String IfBlock.strBreakContinueReturn = "";
	public String IfBlock.strBreakContinueReturn() {
		return strBreakContinueReturn;
	}
	
	private boolean ForStmt.checkReachableDone = false;
	private boolean WhileStmt.checkReachableDone = false;
	private boolean SwitchStmt.checkReachableDone = false;
	private boolean SwitchCaseBlock.checkReachableDone = false;
	private boolean DefaultCaseBlock.checkReachableDone = false;
	private boolean IfStmt.checkReachableDone = false;
	private boolean IfBlock.checkReachableDone = false;
	private boolean ElseBlock.checkReachableDone = false;
	private boolean TryStmt.checkReachableDone = false;
    private boolean Script.checkReachableDone = false;
    private boolean Function.checkReachableDone = false;
    private boolean PropertyAccess.checkReachableDone = false;
    
    syn String Expr.isConstantTrue() {
    	String strTrue = "true";
    	String strFalse = "false";
    	String strOther = "other";
    	
    	if(this instanceof IntLiteralExpr) {
    		IntLiteralExpr exp = (IntLiteralExpr) this;
    		if(exp.getValue().getValue().toString().compareTo("0") == 0)
    			return strFalse;
    		else
    			return strTrue;
    	}
       	else if(this instanceof MatrixExpr) {
    		MatrixExpr exp = (MatrixExpr) this;
    		if(exp.getNumRow() == 0)
			    return strFalse;
    		else
    			return strTrue;
    	}
    	else {
    		return strOther;
    	}
    }
    
    syn String LiteralExpr.toString() {
    	if(this instanceof IntLiteralExpr)
    		return ((IntLiteralExpr) this).getValue().getValue().toString();
    	else if(this instanceof FPLiteralExpr) {
    		return ((FPLiteralExpr) this).getValue().getValue().toString();
		} else {
			return "'" + ((StringLiteralExpr) this).getValue() + "'";
		}
    }
    
	////////////
	//Rewrites//
	////////////
	
    rewrite ForStmt {
    	when(!checkReachableDone)
		to ForStmt {
			ForStmt scr = new ForStmt();
			Stmt stmt;

            scr.setAssignStmt(getAssignStmt());

            for( int i=0; i<getNumStmt(); i++ ){
                stmt = getStmt(i);
                scr.addStmt(stmt);
                
                if(!stmt.canCompleteNormally()){
                	if(stmt.strBreakContinueReturn().compareTo("Return") == 0){
	                	scr.setCanCompleteNormally(false);
	                	scr.setBreakContinueReturn(stmt.strBreakContinueReturn());
		            }
                	break;
                }
            }
			
			scr.checkReachableDone = true;
			return scr;
		}
	}

    rewrite WhileStmt {
    	when(!checkReachableDone)
		to WhileStmt {
			WhileStmt scr = new WhileStmt();
			Stmt stmt;

            scr.setExpr(getExpr());
			
			if(getExpr().isConstantTrue().compareTo("false") != 0) {
	            for( int i=0; i<getNumStmt(); i++ ){
	                stmt = getStmt(i);
	                scr.addStmt(stmt);
	                
	                if(!stmt.canCompleteNormally()){
	                	if(stmt.strBreakContinueReturn().compareTo("Return") == 0){
		                	scr.setCanCompleteNormally(false);
		                	scr.setBreakContinueReturn(stmt.strBreakContinueReturn());
			            }
	                	break;
	                }
	            }
            }
			
			scr.checkReachableDone = true;
			return scr;
		}
	}

    rewrite SwitchStmt {
    	when(!checkReachableDone)
		to SwitchStmt {
			SwitchStmt scr = new SwitchStmt();
			SwitchCaseBlock ib = new SwitchCaseBlock();
			DefaultCaseBlock eb = new DefaultCaseBlock();
			int i = 0;
			String caseExpr = "";
			
			scr.setExpr(getExpr());
			
			for( ; i<getNumSwitchCaseBlock(); i++ ){
				ib = getSwitchCaseBlock(i);
                
                if(ib.getExpr() instanceof LiteralExpr) {
                	String ibExpr = ib.getExpr().toString();
                	if(caseExpr.indexOf(ibExpr+",") == -1) {
                		caseExpr += ibExpr + ",";
                	} else {
                		continue;
                	}
                }
                
                if(getExpr() instanceof LiteralExpr && ib.getExpr() instanceof LiteralExpr) {
                	if(getExpr().toString().compareTo(ib.getExpr().toString()) == 0) {
	                	if(!ib.canCompleteNormally()) {
		                	scr.setCanCompleteNormally(false);
		                	scr.setBreakContinueReturn(ib.strBreakContinueReturn());
		                }
		                scr.addSwitchCaseBlock(ib);
		                break;
		            } else {
		            	continue;
		            }
                }
                
                scr.addSwitchCaseBlock(ib);
			}

			if(i == getNumSwitchCaseBlock() && hasDefaultCaseBlock()) {
	            eb = getDefaultCaseBlock();
	            scr.setDefaultCaseBlock(eb);
            }
            
			scr.checkReachableDone = true;
			return scr;
		}
	}
	
    rewrite SwitchCaseBlock {
    	when(!checkReachableDone)
		to SwitchCaseBlock {
			SwitchCaseBlock scr = new SwitchCaseBlock();
			Stmt stmt;

            scr.setExpr(getExpr());

            for( int i=0; i<getNumStmt(); i++ ){
                stmt = getStmt(i);
                scr.addStmt(stmt);
                
                if(!stmt.canCompleteNormally()) {
                	scr.canCompleteNormally = false;
                	scr.strBreakContinueReturn = stmt.strBreakContinueReturn();
                	break;
                }
            }
			
			scr.checkReachableDone = true;
			return scr;
		}
	}

    rewrite DefaultCaseBlock {
    	when(!checkReachableDone)
		to DefaultCaseBlock {
			DefaultCaseBlock scr = new DefaultCaseBlock();
			Stmt stmt;

            for( int i=0; i<getNumStmt(); i++ ){
                stmt = getStmt(i);
                scr.addStmt(stmt);
                
                if(!stmt.canCompleteNormally()){
                	break;
                }
            }
			
			scr.checkReachableDone = true;
			return scr;
		}
	}

    rewrite IfStmt {
    	when(!checkReachableDone)
		to IfStmt {
			IfStmt scr = new IfStmt();
			IfBlock ib = new IfBlock();
			ElseBlock eb = new ElseBlock();
			int i = 0;
			
			for( ; i<getNumIfBlock(); i++ ){
				ib = getIfBlock(i);
                
                if(ib.getCondition().isConstantTrue().compareTo("other") == 0) {
                	scr.addIfBlock(ib);
                	continue;
                }
                
                if(ib.getCondition().isConstantTrue().compareTo("true") == 0) {
                	scr.addIfBlock(ib);
                	if(!ib.canCompleteNormally()) {
	                	scr.setCanCompleteNormally(false);
	                	scr.setBreakContinueReturn(ib.strBreakContinueReturn());
	                }
                	break;
                }
			}

			if(i == getNumIfBlock() && hasElseBlock()){
	            eb = getElseBlock();
	            scr.setElseBlock(eb);
            }
            
			scr.checkReachableDone = true;
			return scr;
		}
	}
	
    rewrite IfBlock {
    	when(!checkReachableDone)
		to IfBlock {
			IfBlock scr = new IfBlock();
			Stmt stmt;

            scr.setCondition(getCondition());
            
            for( int i=0; i<getNumStmt(); i++ ){
                stmt = getStmt(i);
                scr.addStmt(stmt);
                
                if(!stmt.canCompleteNormally()){
            		scr.canCompleteNormally = false;
            		scr.strBreakContinueReturn = stmt.strBreakContinueReturn();
                	break;
                }
            }
			
			scr.checkReachableDone = true;
			return scr;
		}
	}

    rewrite ElseBlock {
    	when(!checkReachableDone)
		to ElseBlock {
			ElseBlock scr = new ElseBlock();
			Stmt stmt;

            for( int i=0; i<getNumStmt(); i++ ){
                stmt = getStmt(i);
                scr.addStmt(stmt);
                
                if(!stmt.canCompleteNormally()){
                	break;
                }
            }
			
			scr.checkReachableDone = true;
			return scr;
		}
	}

    rewrite TryStmt {
    	when(!checkReachableDone)
		to TryStmt {
			TryStmt scr = new TryStmt();
			Stmt stmt;

            for( int i=0; i<getNumTryStmt(); i++ ){
                stmt = getTryStmt(i);
                scr.addTryStmt(stmt);
                
                if(!stmt.canCompleteNormally()){
                	scr.setCanCompleteNormally(false);
                	scr.setBreakContinueReturn(stmt.strBreakContinueReturn());
                	break;
                }
            }
			
            for( int i=0; i<getNumCatchStmt(); i++ ){
                stmt = getCatchStmt(i);
                scr.addCatchStmt(stmt);
                
                if(!stmt.canCompleteNormally()){
                	scr.setCanCompleteNormally(false);
                	scr.setBreakContinueReturn(stmt.strBreakContinueReturn());
                	break;
                }
            }
            
			scr.checkReachableDone = true;
			return scr;
		}
	}

    rewrite Script {
    	when(!checkReachableDone)
		to Script {
			Script scr = new Script();
			Stmt stmt;

            scr.setHelpCommentList(getHelpCommentList());

            for( int i=0; i<getNumStmt(); i++ ){
                stmt = getStmt(i);
                scr.addStmt(stmt);
                
                if(!stmt.canCompleteNormally()){
                	scr.canCompleteNormally = false;
                	scr.strBreakContinueReturn = stmt.strBreakContinueReturn();
                	break;
                }
            }
			
			scr.checkReachableDone = true;
			return scr;
		}
	}

    rewrite Function {
    	when(!checkReachableDone)
		to Function {
			Function fun = new Function();
			Stmt stmt;

			fun.setOutputParamList(getOutputParamList());
			fun.setName(getName());
			fun.setInputParamList(getInputParamList());
            fun.setHelpCommentList(getHelpCommentList());

            for( int i=0; i<getNumStmt(); i++ ){
                stmt = getStmt(i);
                fun.addStmt(stmt);
                
                if(!stmt.canCompleteNormally()){
                	fun.canCompleteNormally = false;
                	fun.strBreakContinueReturn = stmt.strBreakContinueReturn();
                	break;
                }
            }

			fun.setNestedFunctionList(getNestedFunctionList());
			fun.setComments(getComments());
			
			fun.checkReachableDone = true;
			return fun;
		}
	}
	
    rewrite PropertyAccess {
    	when(!checkReachableDone)
		to PropertyAccess {
			PropertyAccess fun = new PropertyAccess();
			Stmt stmt;

			fun.setOutputParamList(getOutputParamList());
			fun.setAccess(getAccess());
			fun.setName(getName());
			fun.setInputParamList(getInputParamList());
            fun.setHelpCommentList(getHelpCommentList());

            for( int i=0; i<getNumStmt(); i++ ){
                stmt = getStmt(i);
                fun.addStmt(stmt);
                
                if(!stmt.canCompleteNormally()){
                	fun.canCompleteNormally = false;
                	fun.strBreakContinueReturn = stmt.strBreakContinueReturn();
                	break;
                }
            }

			fun.setNestedFunctionList(getNestedFunctionList());
			fun.setComments(getComments());
			
			fun.checkReachableDone = true;
			return fun;
		}
	}
}