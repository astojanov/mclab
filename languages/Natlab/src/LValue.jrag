aspect LValue
{

    //getLValues methods, returns a Map of name to Name nodes of all L Value name nodes.

    syn lazy Set<String> Script.getLValues()
    {
        LinkedHashSet<String> names = new LinkedHashSet<String>();
        for( int i=0; i<getNumStmt(); i++ )
            names.addAll( getStmt(i).getLValues() );
        return names;
    }
    syn lazy Set<String> Function.getLValues()
    {
        LinkedHashSet<String> names = new LinkedHashSet<String>();
        for( int i=0; i<getNumStmt(); i++ )
            names.addAll( getStmt(i).getLValues() );
        return names;
    }

    syn lazy Set<String> Stmt.getLValues() = new LinkedHashSet<String>();


    //getLValues equations for Statements
    eq AssignStmt.getLValues() = getLHS().getSymbols();
    eq GlobalStmt.getLValues() 
    {
        LinkedHashSet<String> names = new LinkedHashSet<String>();
        for( int i=0; i<getNumName(); i++ ){
            names.add(getName(i).getID());
        }
        return names;
    }
    eq PersistentStmt.getLValues() 
    {
        LinkedHashSet<String> names = new LinkedHashSet<String>();
        for( int i=0; i<getNumName(); i++ ){
            names.add(getName(i).getID());
        }
        return names;
    }
    eq ForStmt.getLValues()
    {
        LinkedHashSet<String> names = new LinkedHashSet<String>();
        names.addAll( getAssignStmt().getLValues() );
        for( int i=0; i<getNumStmt(); i++ )
            names.addAll(getStmt(i).getLValues() );
        return names;
    }
    eq WhileStmt.getLValues()
    {
        LinkedHashSet<String> names = new LinkedHashSet<String>();
        for( int i=0; i<getNumStmt(); i++ )
            names.addAll(getStmt(i).getLValues() );
        return names;
    }
    eq IfStmt.getLValues()
    {
        LinkedHashSet<String> names = new LinkedHashSet<String>();
        for( int i=0; i<getNumIfBlock(); i++ ){
            for( int j=0; j<getIfBlock(i).getNumStmt(); j++ ){
                names.addAll(getIfBlock(i).getStmt(j).getLValues());
            }
        }
        if( hasElseBlock() )
            for( int i=0; i<getElseBlock().getNumStmt(); i++ )
                names.addAll(getElseBlock().getStmt(i).getLValues());
        return names;
    }
    eq TryStmt.getLValues()
    {
        LinkedHashSet<String> names = new LinkedHashSet<String>();
        for( int i=0; i<getNumTryStmt(); i++ )
            names.addAll( getTryStmt(i).getLValues() );
        for( int i=0; i<getNumCatchStmt(); i++ )
            names.addAll( getCatchStmt(i).getLValues() );
        return names;
    }
    eq SwitchStmt.getLValues()
    {
        LinkedHashSet<String> names = new LinkedHashSet<String>();
        for( int i=0; i<getNumSwitchCaseBlock(); i++){
            SwitchCaseBlock b = getSwitchCaseBlock(i);
            for( int j=0; j<b.getNumStmt(); j++ )
                names.addAll( b.getStmt(j).getLValues() );
        }
        if( hasDefaultCaseBlock() ){
            DefaultCaseBlock b = getDefaultCaseBlock();
            for( int i=0; i< b.getNumStmt(); i++ )
                names.addAll( b.getStmt(i).getLValues() );
        }
        return names;
    }
   
    syn Set<String> ASTNode.getSymbols()
    {
        Set<String> symbols = new LinkedHashSet<String>();
        for( int i = 0; i<getNumChild(); i++ )
            symbols.addAll( getChild(i).getSymbols() );
        return symbols;
    }
    syn Set<String> Expr.getSymbols()
    {
        Set<String> symbols = new LinkedHashSet<String>();
        for( int i = 0; i<getNumChild(); i++ )
            symbols.addAll( getChild(i).getSymbols() );
        return symbols;
    }

    syn Set<String> Name.getSymbols()
    {
        LinkedHashSet<String> names = new LinkedHashSet<String>();
        names.add( getID() );
        return names;
    }

    //getSymbols equations for Expressions
    eq NameExpr.getSymbols() = getName().getSymbols();
    eq ParameterizedExpr.getSymbols() = getTarget().getSymbols();
    eq CellIndexExpr.getSymbols() = getTarget().getSymbols();
    eq DotExpr.getSymbols() = getTarget().getSymbols();
    eq MatrixExpr.getSymbols()
    {
        LinkedHashSet<String> names = new LinkedHashSet<String>();
        for( int i=0; i<getNumRow(); i++ ){
            for( int j=0; j< getRow(i).getNumElement(); j++ ){
                names.addAll( getRow(i).getElement(j).getSymbols() );
            }
        }
        return names;
    }

    syn Set<NameExpr> ASTNode.getNameExpressions()
    {
        Set<NameExpr> symbols = new LinkedHashSet<NameExpr>();
        for( int i = 0; i<getNumChild(); i++ )
            symbols.addAll( getChild(i).getNameExpressions() );
        return symbols;
    }
    syn Set<NameExpr> Expr.getNameExpressions()
    {
        Set<NameExpr> symbols = new LinkedHashSet<NameExpr>();
        for( int i = 0; i<getNumChild(); i++ )
            symbols.addAll( getChild(i).getNameExpressions() );
        return symbols;
    }

    //getNameExpressions equations for Expressions
    eq NameExpr.getNameExpressions()
    {	
        LinkedHashSet<NameExpr> names = new LinkedHashSet<NameExpr>();
        names.add( this );
        return names;
    }
    eq ParameterizedExpr.getNameExpressions() = getTarget().getNameExpressions();
    eq CellIndexExpr.getNameExpressions() = getTarget().getNameExpressions();
    eq DotExpr.getNameExpressions() = getTarget().getNameExpressions();
    eq MatrixExpr.getNameExpressions()
    {
        LinkedHashSet<NameExpr> names = new LinkedHashSet<NameExpr>();
        for( int i=0; i<getNumRow(); i++ ){
            for( int j=0; j< getRow(i).getNumElement(); j++ ){
                names.addAll( getRow(i).getElement(j).getNameExpressions() );
            }
        }
        return names;
    }

}