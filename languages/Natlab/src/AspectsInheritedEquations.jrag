aspect AspectsInheritedEquations {

	//
	//Name Resolution
	//
    eq Aspect.getMethod(int i).isLValue() = false;
    eq Aspect.getAction(int i).isLValue() = false;
    eq Aspect.getProperty(int i).isLValue() = false;
    eq Aspect.getPattern(int i).isLValue() = false;

    eq Aspect.getMethod(int i).getSiblingsInh() = new HashMap<String,Function>();
	eq Aspect.getAction(int i).getSiblingsInh() = new HashMap<String,Function>();

    eq Aspect.getMethod(int i).getParentFunction() = null;
	eq Aspect.getAction(int i).getParentFunction() = null;

	//
	//TypeInference
	//
    eq Aspect.getMethod(int i).getType( Name n ) = localGetType( n );
    eq Aspect.getAction(int i).getType( Name n ) = localGetType( n );
    eq Aspect.getProperty(int i).getType( Name n ) = localGetType( n );
    eq Aspect.getPattern(int i).getType( Name n ) = localGetType( n );

    eq Aspect.getMethod(int i).getSize( Name n ) = localGetSize( n );
    eq Aspect.getAction(int i).getSize( Name n ) = localGetSize( n );
    eq Aspect.getProperty(int i).getSize( Name n ) = localGetSize( n );
    eq Aspect.getPattern(int i).getSize( Name n ) = localGetSize( n );

	//
	//SymbolTable
	//
	eq Aspect.getAction(int i).getScope() = this;
	
	//
	//WeedingFilter
	//
	eq Aspect.getWeedingFilter() = true;
	
	//
	//WeedingErrors
	//
	eq Aspect.getWeedingErrors() {
        for(Properties p : getPropertys()) {
            for(Property prop : p.getPropertys()) {
	        	String name = prop.getName();
	            
	  			if(getName().compareTo(name) == 0) {
	        		error(prop.getPosString(), "A property may not use the same name as the name of the ASPECT");				
				}
	        }
        }
        
        for(Methods methods : getMethods()) {
            for(PropertyAccess prop : methods.getPropAccs())
            	prop.getWeedingErrors();
        
        	for(Function func : methods.getFunctions())
            	func.getWeedingErrors();
        }
        
        String match = "";
        for(Patterns patterns : getPatterns()) {
	    	for(Pattern pattern : patterns.getPatterns()) {
	    		String name = pattern.getName();
	        	if(match.indexOf(name) >= 0) {
	           		error(pattern.getPosString(), name + " has already been defined as pattern");
	           	} else {
	           		match = match + name + ",";
	           	}
		    }
        }
        
        for(Actions actions : getActions()) {
            actions.getWeedingErrors();
        }
       	
        return true;
    }
    
    eq Patterns.getWeedingErrors() {
    	/*
    	String match = "";
    	for(Pattern pattern : getPatterns()) {
    		String name = pattern.getName();
        	if(match.indexOf(name) >= 0) {
           		error(pattern.getPosString(), name + " has already been defined as pattern");
           	} else {
           		match = match + name + ",";
           	}
	    }
	    */
    	//check multiple patterns
    	return true;
    }
    
    eq Actions.getWeedingErrors() {
    	String selectors = "args,newVal,file,dims,";	
    	
    	for(AspectAction action : getAspectActions()) {
    		String match = "";
            for(Name selector : action.getSelectors()) {
            	if(selectors.indexOf(selector.getID()+",") == -1) {
            		error(action.getPosString(), selector.getID() + " is not a valid selector");            	
	           	} else if(match.indexOf(selector.getID()) >= 0) {
	           		error(action.getPosString(), selector.getID() + " has already been defined as selector");
	           	} else {
	           		match = match + selector.getID() + ",";
	           	}
	        }
	    }
            	
    	return true;
    }
}