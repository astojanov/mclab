import java.io.*;

import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;

aspect ASTtoXML {

	private long ASTNode.uID = -1;
	public void ASTNode.setuID(long id) {
            uID = id;
	}
        /*
	public long ASTNode.getuID() {
		return uID;
        }
        */
        inh long ASTNode.makeUId();

        eq ASTNode.getChild(int i).makeUId(){
            long m = getuID();
            
            if( i > 0 ){
                long uid = getChild( i-1 ).getuID();
                m = uid > m ? uid : m;
            }
            uID = m+1;
            return m+1;
        }

        syn lazy long ASTNode.getuID();
        eq ASTNode.getuID() = makeUId();
        syn long CompilationUnits.makeUId() = 0;
	public long CompilationUnits.nodeCounter = 0;

	/*public long ASTNode.nodeCounter() {
	    long counter = 0;
	    ASTNode node = this;
		while(node != null && !(node instanceof CompilationUnits))
	    		node = node.getParent();
	  
	    if( node instanceof CompilationUnits ){
			counter =  ((CompilationUnits)node).nodeCounter++;
	    }
	    return counter;
            }*/

        syn long ASTNode.nodeCounter() = getuID();

	public void Annotation.setNodeCounter(long count){
		ASTNode node = this;
		while(node != null && !(node instanceof CompilationUnits))
	    		node = node.getParent();

	    if( node instanceof CompilationUnits ){
			((CompilationUnits)node).nodeCounter = count;
	    }
	}
    
  	//syn Document ASTNode.ASTtoXML() {
	public Document CompilationUnits.ASTtoXML() {
		try {
	        DocumentBuilderFactory dbfac = DocumentBuilderFactory.newInstance();
	        DocumentBuilder docBuilder = dbfac.newDocumentBuilder();
	        Document doc = docBuilder.newDocument();

	        long id = nodeCounter();
			setuID(id);
			
			Element e = doc.createElement("CompilationUnits");
			e.setAttribute("id", Long.toString(id));
			
			for(Program p : getPrograms()){
		    	p.getXML(doc, e);
			}
		    doc.appendChild(e);
		    	
	        return doc;
		} catch (Exception e) {
            System.out.println(e);
        }
        return null;
    }
    
    public String CompilationUnits.XMLtoString(Document doc) {
    	try {
	    	TransformerFactory transfac = TransformerFactory.newInstance();
	    	transfac.setAttribute("indent-number", new Integer(4));
	        Transformer trans = transfac.newTransformer();
	        trans.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
	        trans.setOutputProperty(OutputKeys.INDENT, "yes");
			//trans.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
			
	        StringWriter sw = new StringWriter();
	        StreamResult result = new StreamResult(sw);
	        DOMSource source = new DOMSource(doc);
	        trans.transform(source, result);
	        
	        return sw.toString();
	        
        } catch (Exception e) {
            System.out.println(e);
        }
        return "";
    }
    
    
    syn boolean ASTNode.getXML(Document doc, Element parent) { throw new UnsupportedOperationException(getClass().getName() + ".getXML()"); }
    
    //program
    eq EmptyProgram.getXML(Document doc, Element parent) {
        return true;
    }
	
    eq Script.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);

		Element e = doc.createElement("Script");
		e.setAttribute("id", Long.toString(id));

		getSymbolTableXML(doc, e);
		
        for(HelpComment comment : getHelpComments()) {
            comment.getXML(doc, e);
        }
        
        Element e1 = doc.createElement("StmtList");
        for(Stmt stmt : getStmts()) {
            stmt.getXML(doc, e1);
        }
        e.appendChild(e1);
        
		parent.appendChild(e);
        return true;
    }
    
    eq FunctionList.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);

		Element e = doc.createElement("FunctionList");
		e.setAttribute("id", Long.toString(id));
		
		getSymbolTableXML(doc, e);
		
        for(Function func : getFunctions()) {
            func.getXML(doc, e);
        }
        parent.appendChild(e);
        return true;
    }
    
    eq Function.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);
		
		Element e = doc.createElement("Function");
		e.setAttribute("id", Long.toString(id));
		e.setAttribute("name", getName());
		getSymbolTableXML(doc, e);

		Element e1 = doc.createElement("InputParamList");
        	for(Name param : getInputParams()) {
            	param.getXML(doc, e1);
        	}
		e.appendChild(e1);

		Element e2 = doc.createElement("OutputParamList");
        	for(Name param : getOutputParams()) {
            	param.getXML(doc, e2);
        	}
		e.appendChild(e2);
        
        for(HelpComment comment : getHelpComments()) {
            comment.getXML(doc, e);
        }
        
        Element e3 = doc.createElement("StmtList");
        for(Stmt stmt : getStmts()) {
            stmt.getXML(doc, e3);
        }
        e.appendChild(e3);
        
        for(Function func : getNestedFunctions()) {
            func.getXML(doc, e);
        }
                
	parent.appendChild(e);      
        return true;
    }
    
    eq ClassDef.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);

        Element e = doc.createElement("ClassDef");
		e.setAttribute("id", Long.toString(id));
		e.setAttribute("name", getName());

        getSymbolTableXML(doc, e);
        
        for(Attribute attr : getAttributes()) {
            attr.getXML(doc, e);
        }        		
		
        for(SuperClass sup : getSuperClasss()) {
            sup.getXML(doc, e);
        }
        
        for(HelpComment comment : getHelpComments()) {
            comment.getXML(doc, e);
        }
        for(Properties prop : getPropertys()) {
            prop.getXML(doc, e);
        }
        for(Methods methods : getMethods()) {
            methods.getXML(doc, e);
        }
        for(ClassEvents events : getClassEvents()) {
            events.getXML(doc, e);
        }

        parent.appendChild(e);
        return true;
    }
    
    eq Properties.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);

        Element e = doc.createElement("Properties");
		e.setAttribute("id", Long.toString(id));

        for(Attribute attr : getAttributes()) {
            attr.getXML(doc, e);
        }
        for(Property prop : getPropertys()) {
            prop.getXML(doc, e);
        }
        
        parent.appendChild(e);
        return true;
    } 
    
    eq Methods.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);

		Element e = doc.createElement("Methods");
		e.setAttribute("id", Long.toString(id));

        for(Attribute attr : getAttributes()) {
            attr.getXML(doc, e);
        }
        for(Signature sign : getSignatures()) {
            sign.getXML(doc, e);
        }
        for(PropertyAccess prop : getPropAccs()) {
            prop.getXML(doc, e);
        }
        for(Function func : getFunctions()) {
            func.getXML(doc, e);
        }

       parent.appendChild(e);
        return true;
    }
    
    eq Signature.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);

       	Element e = doc.createElement("Signature");
		e.setAttribute("id", Long.toString(id));
		e.setAttribute("name", getName());

		Element e1 = doc.createElement("InputParamList");
        	for(Name param : getInputParams()) {
            	param.getXML(doc, e1);
        	}
		e.appendChild(e1);

		Element e2 = doc.createElement("OutputParamList");
        	for(Name param : getOutputParams()) {
            	param.getXML(doc, e2);
        	}
		e.appendChild(e2);

        parent.appendChild(e);
        return true;
    }
    
    eq PropertyAccess.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);
               
		Element e = doc.createElement("PropertyAccess");
		e.setAttribute("id", Long.toString(id));
		e.setAttribute("name", getName());
		e.setAttribute("access", getAccess());
				
		Element e1 = doc.createElement("InputParamList");
        	for(Name param : getInputParams()) {
            	param.getXML(doc, e1);
        	}
		e.appendChild(e1);

		Element e2 = doc.createElement("OutputParamList");
        	for(Name param : getOutputParams()) {
            	param.getXML(doc, e2);
        	}
		e.appendChild(e2);

        for(HelpComment comment : getHelpComments()) {
            comment.getXML(doc, e);
        }
        
        Element e3 = doc.createElement("StmtList");
        for(Stmt stmt : getStmts()) {
            stmt.getXML(doc, e3);
        }
        e.appendChild(e3);
        
        for(Function func : getNestedFunctions()) {
            func.getXML(doc, e);
        }
           
		parent.appendChild(e);   
        return true;
    }
    
    eq ClassEvents.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);

		Element e = doc.createElement("ClassEvents");
		e.setAttribute("id", Long.toString(id));

        for(Attribute attr : getAttributes()) {
            attr.getXML(doc, e);
        }

        for(Event eve : getEvents()) {
            eve.getXML(doc, e);
        }

        parent.appendChild(e);
        return true;
    }
     
    eq Attribute.getXML(Document doc, Element parent) {
    	long id = nodeCounter();
        setuID(id);
	
        	Element e = doc.createElement("Attribute");
		e.setAttribute("id", Long.toString(id));
		e.setAttribute("name", getKey());
		
        getExpr().getXML(doc, e);

        parent.appendChild(e);
        return true;
    }
    
    eq SuperClass.getXML(Document doc, Element parent) {
    	long id = nodeCounter();
        setuID(id);

		Element e = doc.createElement("SuperClass");
		e.setAttribute("id", Long.toString(id));
		e.setAttribute("name", getName());

        parent.appendChild(e);
        return true;
    }
    
    eq Property.getXML(Document doc, Element parent) {
    	long id = nodeCounter();
        setuID(id);	

        Element e = doc.createElement("Property");
		e.setAttribute("id", Long.toString(id));
		e.setAttribute("name", getName());
		
        getExpr().getXML(doc, e);

        parent.appendChild(e);
        return true;
    }

    eq Event.getXML(Document doc, Element parent) {
    	long id = nodeCounter();
        setuID(id);

	      Element e = doc.createElement("Event");
		e.setAttribute("id", Long.toString(id));
		e.setAttribute("name", getName());

        parent.appendChild(e);
        return true;
    }
    
    eq SuperClassMethodExpr.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);

		Element e = doc.createElement("SuperClassMethodExpr");
		e.setAttribute("id", Long.toString(id));

        getFuncName().getXML(doc, e);
        getClassName().getXML(doc, e);

            parent.appendChild(e);
		return true;
    }
    
    eq HelpComment.getXML(Document doc, Element parent) {
    	long id = nodeCounter();
        setuID(id);
    	String name = getClass().getName();
				
		Element e = doc.createElement(name.substring(name.lastIndexOf('.')+1));
		e.setAttribute("id", Long.toString(id));
		e.setAttribute("text", getText());

        parent.appendChild(e);
        return true;
    }
    
    eq EmptyStmt.getXML(Document doc, Element parent) {
		return true;
    }
    
    eq ExprStmt.getXML(Document doc, Element parent) {
    	long id = nodeCounter();
        setuID(id);

        Element e = doc.createElement("ExprStmt");
        e.setAttribute("id", Long.toString(id));
        e.setAttribute("outputSuppressed", Boolean.toString(isOutputSuppressed()));
        
        getExpr().getXML(doc, e);

        parent.appendChild(e);
        return true;
    }
    
    eq AssignStmt.getXML(Document doc, Element parent) {
    	long id = nodeCounter();
        setuID(id);

        	Element e = doc.createElement("AssignStmt");
		e.setAttribute("id", Long.toString(id));
        e.setAttribute("outputSuppressed", Boolean.toString(isOutputSuppressed()));

        getLHS().getXML(doc, e);
        getRHS().getXML(doc, e);

        parent.appendChild(e);
        return true;
    }
     
    eq GlobalStmt.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);

		Element e = doc.createElement("GlobalStmt");
		e.setAttribute("id", Long.toString(id));
        e.setAttribute("outputSuppressed", Boolean.toString(isOutputSuppressed()));

        for(Name name : getNames()) {
            name.getXML(doc, e);
        }

        parent.appendChild(e);
        return true;
    }
    
    eq PersistentStmt.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);

		Element e = doc.createElement("PersistentStmt");
		e.setAttribute("id", Long.toString(id));
        e.setAttribute("outputSuppressed", Boolean.toString(isOutputSuppressed()));

        for(Name name : getNames()) {
            name.getXML(doc, e);
        }

        parent.appendChild(e);
        return true;
    }
    
    eq ShellCommandStmt.getXML(Document doc, Element parent) {
    	long id = nodeCounter();
        setuID(id);

		Element e = doc.createElement("ShellCommandStmt");
		e.setAttribute("id", Long.toString(id));
		e.setAttribute("command", getCommand());
        e.setAttribute("outputSuppressed", Boolean.toString(isOutputSuppressed()));

        parent.appendChild(e);
        return true;
    }
    
    eq BreakStmt.getXML(Document doc, Element parent) {
    	long id = nodeCounter();
        setuID(id);

		Element e = doc.createElement("BreakStmt");
		e.setAttribute("id", Long.toString(id));
        e.setAttribute("outputSuppressed", Boolean.toString(isOutputSuppressed()));

        parent.appendChild(e);
        return true;
    }
    
    eq ContinueStmt.getXML(Document doc, Element parent) {
    	long id = nodeCounter();
        setuID(id);

		Element e = doc.createElement("ContinueStmt");
		e.setAttribute("id", Long.toString(id));
        e.setAttribute("outputSuppressed", Boolean.toString(isOutputSuppressed()));

        parent.appendChild(e);
        return true;
    }
    
    eq ReturnStmt.getXML(Document doc, Element parent) {
    	long id = nodeCounter();
        setuID(id);

		Element e = doc.createElement("ReturnStmt");
		e.setAttribute("id", Long.toString(id));
        e.setAttribute("outputSuppressed", Boolean.toString(isOutputSuppressed()));

        parent.appendChild(e);
        return true;
    }

    eq ForStmt.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);

		Element e = doc.createElement("ForStmt");
		e.setAttribute("id", Long.toString(id));

        getAssignStmt().getXML(doc, e);

        Element e1 = doc.createElement("StmtList");
        for(Stmt stmt : getStmts()) {
            stmt.getXML(doc, e1);
        }
        e.appendChild(e1);
        
        parent.appendChild(e);
        return true;
    }

    eq WhileStmt.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);

		Element e = doc.createElement("WhileStmt");
		e.setAttribute("id", Long.toString(id));

        getExpr().getXML(doc, e);

        Element e1 = doc.createElement("StmtList");
        for(Stmt stmt : getStmts()) {
            stmt.getXML(doc, e1);
        }
        e.appendChild(e1);
              
        parent.appendChild(e);
        return true;
    }

    eq IfStmt.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);

		Element e = doc.createElement("IfStmt");
		e.setAttribute("id", Long.toString(id));

        for(IfBlock block : getIfBlocks()) {
            block.getXML(doc, e);
        }
        if(hasElseBlock()) {
            getElseBlock().getXML(doc, e);
        } 
     
        parent.appendChild(e);
        return true;
    }

    eq IfBlock.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);

		Element e = doc.createElement("IfBlock");
		e.setAttribute("id", Long.toString(id));

        getCondition().getXML(doc, e);

        Element e1 = doc.createElement("StmtList");
        for(Stmt stmt : getStmts()) {
            stmt.getXML(doc, e1);
        }
        e.appendChild(e1);

        parent.appendChild(e);
        return true;
    }

    eq ElseBlock.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);
		
		Element e = doc.createElement("ElseBlock");
		e.setAttribute("id", Long.toString(id));

        Element e1 = doc.createElement("StmtList");
        for(Stmt stmt : getStmts()) {
            stmt.getXML(doc, e1);
        }
        e.appendChild(e1);
       	
        parent.appendChild(e); 
        return true;
    }

    eq SwitchStmt.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);

        Element e = doc.createElement("SwitchStmt");
		e.setAttribute("id", Long.toString(id));

        getExpr().getXML(doc, e);

        for(SwitchCaseBlock scase : getSwitchCaseBlocks()) {
            scase.getXML(doc, e);
        }
        if(hasDefaultCaseBlock()) {
            getDefaultCaseBlock().getXML(doc, e);
        } 
    
		parent.appendChild(e);
        return true;
    }
    
    eq SwitchCaseBlock.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);

        	Element e = doc.createElement("SwitchCaseBlock");
		e.setAttribute("id", Long.toString(id));

        getExpr().getXML(doc, e);

        Element e1 = doc.createElement("StmtList");
        for(Stmt stmt : getStmts()) {
            stmt.getXML(doc, e1);
        }
        e.appendChild(e1);

        parent.appendChild(e);
        return true;
    }
    
    eq DefaultCaseBlock.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);

	      Element e = doc.createElement("DefaultCaseBlock");
		e.setAttribute("id", Long.toString(id));	

        Element e1 = doc.createElement("StmtList");
        for(Stmt stmt : getStmts()) {
            stmt.getXML(doc, e1);
        }
        e.appendChild(e1); 
     
        parent.appendChild(e);
        return true;
    }

    eq TryStmt.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);

		Element e = doc.createElement("TryStmt");
		e.setAttribute("id", Long.toString(id));	

		Element e1 = doc.createElement("StmtList");
        for(Stmt stmt : getTryStmts()) {
            stmt.getXML(doc, e1);
        }
        e.appendChild(e1);
       
        List<Stmt> catchList = getCatchStmts();
        if (catchList.getNumChild()>0) {      
	        Element e2 = doc.createElement("StmtList");
	        for(Stmt stmt : catchList) {
	            stmt.getXML(doc, e2);
	        }
	        e.appendChild(e2);
	    }

        parent.appendChild(e);
        return true;
    }
    
    eq RangeExpr.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);
		
		Element e = doc.createElement("RangeExpr");
		e.setAttribute("id", Long.toString(id));	
        getLower().getXML(doc, e);

        if(hasIncr()) {
            getIncr().getXML(doc, e);
        }
        
       getUpper().getXML(doc, e);

        parent.appendChild(e);
        return true;
    }
    
    eq ColonExpr.getXML(Document doc, Element parent) {
    	long id = nodeCounter();
        setuID(id);

		Element e = doc.createElement("ColonExpr");
		e.setAttribute("id", Long.toString(id));
	
        parent.appendChild(e);
        return true;
    }
    
    eq EndExpr.getXML(Document doc, Element parent) {
    	long id = nodeCounter();
        setuID(id);

		Element e = doc.createElement("EndExpr");
		e.setAttribute("id", Long.toString(id));	

        parent.appendChild(e);
        return true;
    }
    
    eq Name.getXML(Document doc, Element parent) {
    	long id = nodeCounter();
        setuID(id);

		Element e = doc.createElement("Name");
		e.setAttribute("id", Long.toString(id));	
		e.setAttribute("nameId", getID());	

        parent.appendChild(e);
        return true;
    }

    eq NameExpr.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);
		
		Element e = doc.createElement("NameExpr");
		e.setAttribute("id", Long.toString(id));
        getName().getXML(doc, e);

        parent.appendChild(e);
        return true;
    }
    
    eq DotExpr.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);
		
		Element e = doc.createElement("DotExpr");
		e.setAttribute("id", Long.toString(id));

      getTarget().getXML(doc, e);
	getField().getXML(doc, e);

        parent.appendChild(e);
        return true;
    }
    
    eq ParameterizedExpr.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);
		
		Element e = doc.createElement("ParameterizedExpr");
		e.setAttribute("id", Long.toString(id));

        getTarget().getXML(doc, e);

        for(Expr arg : getArgs()) {
            arg.getXML(doc, e);
        }    

		parent.appendChild(e);
        return true;
    }
    
    eq CellIndexExpr.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);
		
		Element e = doc.createElement("CellIndexExpr");
		e.setAttribute("id", Long.toString(id));

        getTarget().getXML(doc, e);

        for(Expr arg : getArgs()) {
            arg.getXML(doc, e);
        }

        parent.appendChild(e);
        return true;
    }

    eq MatrixExpr.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);
		
		Element e = doc.createElement("MatrixExpr");
		e.setAttribute("id", Long.toString(id));

        for(Row row : getRows()) {
            row.getXML(doc, e);
        }

        parent.appendChild(e);
        return true;
    }
    
    eq CellArrayExpr.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);

		Element e = doc.createElement("CellArrayExpr");
		e.setAttribute("id", Long.toString(id));

        for(Row row : getRows()) {
            row.getXML(doc, e);
        }

        parent.appendChild(e);
        return true;
    }
    
    eq Row.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);
		
		Element e = doc.createElement("Row");
		e.setAttribute("id", Long.toString(id));

        for(Expr element : getElements()) {
            element.getXML(doc, e);
        }

        parent.appendChild(e);
        return true;
    }
    
    eq FunctionHandleExpr.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);
		
		Element e = doc.createElement("FunctionHandleExpr");
		e.setAttribute("id", Long.toString(id));

        getName().getXML(doc, e);

        parent.appendChild(e);
        return true;
    }

    eq LambdaExpr.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);
		
		Element e = doc.createElement("LambdaExpr");
		e.setAttribute("id", Long.toString(id));

        for(Name param : getInputParams()) {
            param.getXML(doc, e);
        }

        getBody().getXML(doc, e);

        parent.appendChild(e);
        return true;
    }
    
    eq IntLiteralExpr.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);

		Element e = doc.createElement("IntLiteralExpr");
		e.setAttribute("id", Long.toString(id));
		e.setAttribute("value", getValue().getText());

        parent.appendChild(e);
        return true;
    }

    eq FPLiteralExpr.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);

		Element e = doc.createElement("FPLiteralExpr");
		e.setAttribute("id", Long.toString(id));
		e.setAttribute("value", getValue().getText());

        parent.appendChild(e);
        return true;
    }
    
    eq StringLiteralExpr.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);

		Element e = doc.createElement("StringLiteralExpr");
		e.setAttribute("id", Long.toString(id));
		e.setAttribute("value", getValue());

        parent.appendChild(e);
        return true;
    }
    
    eq UnaryExpr.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);

    		String name = getClass().getName();

		Element e = doc.createElement(name.substring(name.lastIndexOf('.')+1));
		e.setAttribute("id", Long.toString(id));

        getOperand().getXML(doc, e);

        parent.appendChild(e);
        return true;
    }
    
    eq BinaryExpr.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);
    		String name = getClass().getName(); 

		Element e = doc.createElement(name.substring(name.lastIndexOf('.')+1));
		e.setAttribute("id", Long.toString(id));

        getLHS().getXML(doc, e);
        getRHS().getXML(doc, e);

        parent.appendChild(e);
        return true;
    }

    eq Annotation.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);

		Element e = doc.createElement("Annotation");
		e.setAttribute("id", Long.toString(id));
		e.setAttribute("text", getText());

        parent.appendChild(e);
        return true;
    }
    
    eq ExpandedAnnotation.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);

		Element e = doc.createElement("ExpandedAnnotation");
		e.setAttribute("id", Long.toString(id));
                //TODO-JD: Should we even include the annotations in the XML?
		//getanno().getXML(doc, e, nodeCounter());
        setNodeCounter(getanno().getNodeCounter());

        parent.appendChild(e);
        return true;
    }

    eq VariableDecl.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);
		
		Element e = doc.createElement("VariableDecl");
		e.setAttribute("id", Long.toString(id));
		e.setAttribute("varId", getID());
                if( getType() == null )
                    System.err.println("UH OH " + getID() + " is null in xml printing");
                else{
                    e.setAttribute("type", getType().dumpString());
                }

        parent.appendChild(e);
        return true;
    }

    eq FunctionDecl.getXML(Document doc, Element parent) {
        long id = nodeCounter();
        setuID(id);
        
        Element e = doc.createElement("FunctionDecl");
        e.setAttribute("id", Long.toString(id));
        e.setAttribute("name", getName());
        
        getSymbolTableXML(doc, e);
        
        Element e1 = doc.createElement("ParamDeclList");
        for(VariableDecl vd : getParamDecls()) {
            vd.getXML(doc, e1);
        }
        e.appendChild(e1);
        
        Element e2 = doc.createElement("InputParamList");
        for(Name param : getInputParams()) {
            param.getXML(doc, e2);
        }
        e.appendChild(e2);
        
        Element e3 = doc.createElement("OutputParamList");
        for(Name param : getOutputParams()) {
            param.getXML(doc, e3);
        }
        e.appendChild(e3);
        
        for(HelpComment comment : getHelpComments()) {
            comment.getXML(doc, e);
        }

        Element eNested = doc.createElement("NestedFunctionList");
        for(Function func : getNestedFunctions()) {
            func.getXML(doc, eNested);
        }
        e.appendChild(eNested);
        
        Element e4 = doc.createElement("StmtList");
        for(Stmt stmt : getStmts()) {
            stmt.getXML(doc, e4);
        }
        e.appendChild(e4);
        
        parent.appendChild(e);
        return true;
    }

}