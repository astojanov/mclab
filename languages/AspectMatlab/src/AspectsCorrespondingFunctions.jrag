import aspectMatlab.AspectsEngine;

/*
//	Expression Simplification
*/

aspect AspectsCorrespondingFunctions {
	
	syn boolean Program.aspectsCorrespondingFunctions() { throw new UnsupportedOperationException(getClass().getName() + ".aspectCorrespondingFunctions()"); }
     
    eq EmptyProgram.aspectsCorrespondingFunctions() = true;

    eq Script.aspectsCorrespondingFunctions() {
    	for(Stmt stmt : getStmts()) {
    		stmt.aspectsCorrespondingFunctions();
		}
		
		return true;
    }
    
    eq FunctionList.aspectsCorrespondingFunctions() {
        for(Function func : getFunctions()) {
        	func.aspectsCorrespondingFunctions();
    	}
    	
        return true;
    }
    
    eq ClassDef.aspectsCorrespondingFunctions() {

        return true;
    }
       
    public void Function.aspectsCorrespondingFunctions() {       
    	//if(!getName().startsWith("AM_CF_")) {
	    	for(Stmt stmt : getStmts()) {
	    		stmt.aspectsCorrespondingFunctions();
	        }
	        
	        //Transform the input params to assignment stmts
	        AspectsEngine.generateCorrespondingStmt(getStmts(), getInputParams());
	        
	        for(Function func : getNestedFunctions()) {
	    			func.aspectsCorrespondingFunctions();
	    	}
    	//}
    }
    
	syn Boolean Stmt.aspectsCorrespondingFunctions() { return true; }
              
    eq ExprStmt.aspectsCorrespondingFunctions() {
    	getExpr().aspectsCorrespondingFunctions();
    	return true;
    }
    
    eq AssignStmt.aspectsCorrespondingFunctions() {
    	if(getRHS().getWeavability())
    		getRHS().aspectsCorrespondingFunctions();
    	
    	if(getLHS() instanceof ParameterizedExpr) {
    		for(Expr arg : ((ParameterizedExpr)getLHS()).getArgs()) {
           		if(!arg.aspectsCorrespondingFunctions())
           			return false;
        	}
        } else if(getLHS() instanceof CellIndexExpr) {
    		for(Expr arg : ((CellIndexExpr)getLHS()).getArgs()) {
           		if(!arg.aspectsCorrespondingFunctions())
           			return false;
        	}
        }
    	
    	return true;
    }
    
    eq ForStmt.aspectsCorrespondingFunctions() {
	   	getAssignStmt().aspectsCorrespondingFunctions();
	   	for(Stmt stmt : getStmts()) {
           	stmt.aspectsCorrespondingFunctions();
        }
        
        AspectsEngine.transformForStmt((ast.List)getParent());
        
        return true;
    }
    
    eq WhileStmt.aspectsCorrespondingFunctions() {
    	//TODO: is it correct?
    	//getExpr().aspectsCorrespondingFunctions();
    	
	   	for(Stmt stmt : getStmts()) {
           	stmt.aspectsCorrespondingFunctions();
        }
        
        AspectsEngine.transformWhileStmt((ast.List)getParent());
        
        return true;
    } 
    
    eq TryStmt.aspectsCorrespondingFunctions() {
	   	for(Stmt stmt : getTryStmts()) {
           	stmt.aspectsCorrespondingFunctions();
        }
        for(Stmt stmt : getCatchStmts()) {
           	stmt.aspectsCorrespondingFunctions();
        }
        
        return true;
    } 
    
    eq SwitchStmt.aspectsCorrespondingFunctions() {
    	getExpr().aspectsCorrespondingFunctions();
    	
	   	for(SwitchCaseBlock sb : getSwitchCaseBlocks()) {
	   		sb.getExpr().aspectsCorrespondingFunctions();
	   	
           	for(Stmt stmt : sb.getStmts()) {
	           	stmt.aspectsCorrespondingFunctions();
	        }
        }
        
        if(hasDefaultCaseBlock()) {
	        for(Stmt stmt : getDefaultCaseBlock().getStmts()) {
		        stmt.aspectsCorrespondingFunctions();
		    }
	    }
	    
	    return true;
    } 
    
    eq IfStmt.aspectsCorrespondingFunctions() {
	   	for(IfBlock ib : getIfBlocks()) {
	   		ib.getCondition().aspectsCorrespondingFunctions();
	   		
           	for(Stmt stmt : ib.getStmts()) {
	           	stmt.aspectsCorrespondingFunctions();
	        }
        }
        
        if(hasElseBlock()) {
	        for(Stmt stmt : getElseBlock().getStmts()) {
		        stmt.aspectsCorrespondingFunctions();
		    }
	    }
	    
	    return true;
    }
	
	syn boolean Expr.aspectsCorrespondingFunctions() { return true; }
 	
 	eq NameExpr.aspectsCorrespondingFunctions() {
		//AspectsEngine.generateCorrespondingFunction(this);
		AspectsEngine.generateCorrespondingStmt(this);
		return true;
	}
	
	eq ParameterizedExpr.aspectsCorrespondingFunctions() {
		for(Expr arg : getArgs()) {
           	if(!arg.aspectsCorrespondingFunctions())
           		return false;
        }
        
        //TODO
 		//getTarget().aspectsCorrespondingFunctions();
        //AspectsEngine.generateCorrespondingFunction(this);
        AspectsEngine.generateCorrespondingStmt(this);
        
		return true;
 	}
 	
 	eq RangeExpr.aspectsCorrespondingFunctions() {
 		if(!getLower().aspectsCorrespondingFunctions())
           	return false;
        if(!getUpper().aspectsCorrespondingFunctions())
           	return false;
        //getLower().aspectsCorrespondingFunctions();
 		//getUpper().aspectsCorrespondingFunctions();
 		
 		if(hasIncr()) {
 			if(!getIncr().aspectsCorrespondingFunctions())
           		return false;
 			//getIncr().aspectsCorrespondingFunctions();
 		}
 		
 		return true;
 	}

	eq CellIndexExpr.aspectsCorrespondingFunctions() { 		
 		for(Expr arg : getArgs()) {
           	if(!arg.aspectsCorrespondingFunctions())
           		return false;
        }
 		
 		//TODO
 		//getTarget().aspectsCorrespondingFunctions();
 		//AspectsEngine.generateCorrespondingFunction(this);
 		AspectsEngine.generateCorrespondingStmt(this);
 		
 		return true;
 	}
 	
 	eq DotExpr.aspectsCorrespondingFunctions() {
 		//getField().aspectsCorrespondingFunctions();
 		
 		//TODO
 		//getTarget().aspectsCorrespondingFunctions();
 		//AspectsEngine.generateCorrespondingFunction(this);
 		AspectsEngine.generateCorrespondingStmt(this);
 		
 		return true;
 	}

	eq MatrixExpr.aspectsCorrespondingFunctions() {
		for(Row row : getRows()) {
			for(Expr exp : row.getElements()) {
				exp.aspectsCorrespondingFunctions();
			}
        }
        
        return true;
    }
	
	eq CellArrayExpr.aspectsCorrespondingFunctions() {
		for(Row row : getRows()) {
			for(Expr exp : row.getElements()) {
				exp.aspectsCorrespondingFunctions();
			}
        }
        
        return true;
    }
    
    eq SuperClassMethodExpr.aspectsCorrespondingFunctions() {
		//getClassName().aspectsCorrespondingFunctions();
 		//getFuncName().aspectsCorrespondingFunctions();
 		
 		return true;
    }
    
	eq UnaryExpr.aspectsCorrespondingFunctions() {
		//getOperand().aspectsCorrespondingFunctions();
 		if(!getOperand().aspectsCorrespondingFunctions())
           		return false;
           		
 		return true;
    }
	
	eq BinaryExpr.aspectsCorrespondingFunctions() {
		//getLHS().aspectsCorrespondingFunctions();
 		//getRHS().aspectsCorrespondingFunctions();
 		if(!getLHS().aspectsCorrespondingFunctions())
           		return false;
        if(!getRHS().aspectsCorrespondingFunctions())
           		return false;
           		
 		return true;
    }
	
	eq FunctionHandleExpr.aspectsCorrespondingFunctions() {
		//getName().aspectsCorrespondingFunctions();
 		
 		return true;
    }
    
    eq LambdaExpr.aspectsCorrespondingFunctions() {
 		//TODO
 		//getBody().aspectsCorrespondingFunctions();
 		
 		//for(Name arg : getInputParams()) {
        //   	arg.aspectsCorrespondingFunctions();
        //}
 		
 		return true;
 	}
 	
 	eq EndExpr.aspectsCorrespondingFunctions() {
 		//can't take it out of array
 		return false;
 	}
}