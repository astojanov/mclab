aspect GlobalStructure {

    syn Boolean Program.weaveGlobalStructure(ast.List<Stmt> stmts) { throw new UnsupportedOperationException(getClass().getName() + ".weaveGlobalStructure()"); }
     
	eq FunctionList.weaveGlobalStructure(ast.List<Stmt> stmts) {
		for(Function func : getFunctions()) {
			func.weaveGlobalStructure(stmts);
		}

		return true;
    }  
    
    eq Script.weaveGlobalStructure(ast.List<Stmt> stmts) {
    	for(int i=stmts.getNumChild()-1; i>=0; i--) {
    		Stmt s = stmts.getChild(i);
			getStmts().insertChild(s, 0);
		}
		return true;
    } 
    
    eq ClassDef.weaveGlobalStructure(ast.List<Stmt> stmts) {
    	for(Methods methods : getMethods()) {
            methods.weaveGlobalStructure(stmts);
        }
        
		return true;
    } 
    
    eq Aspect.weaveGlobalStructure(ast.List<Stmt> stmts) {
    	//TODO: weaving into aspect itself
    	
		return true;
    }
    
    public void Function.weaveGlobalStructure(ast.List<Stmt> stmts) {
    	for(int i=stmts.getNumChild()-1; i>=0; i--) {
    		Stmt s = stmts.getChild(i);
			getStmts().insertChild(s, 0);
		}
    }
    
    public void Methods.weaveGlobalStructure(ast.List<Stmt> stmts) {       
        for(PropertyAccess prop : getPropAccs())
            prop.weaveGlobalStructure(stmts);
        
        for(Function func : getFunctions())
            func.weaveGlobalStructure(stmts);
    }
    
    public void PropertyAccess.weaveGlobalStructure(ast.List<Stmt> stmts) {       
        for(int i=stmts.getNumChild()-1; i>=0; i--) {
    		Stmt s = stmts.getChild(i);
			getStmts().insertChild(s, 0);
		}
    }

}