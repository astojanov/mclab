aspect ShadowMatch {
	
	syn boolean Expr.ShadowMatch(String target, String pattern, int args, ASTNode jp) = false;
 	
 	eq PatternDesignator.ShadowMatch(String target, String pattern, int args, ASTNode jp) {
		String type = getName();

		String variable = "";
		if(getArgs().getNumChild() > 0) {
			variable = getArgs().getChild(getArgs().getNumChild()-1).getID();
			variable = variable.substring(variable.lastIndexOf('.')+1);
		}

		String tar = variable;
		String dim = "-1";
		boolean more = false;

		if(variable.contains("$")) {
			tar = variable.substring(0, variable.lastIndexOf('$'));
			dim = variable.substring(variable.lastIndexOf('$')+1);

			if(dim.contains("+")) {
				more = true;
				dim = dim.substring(0, dim.lastIndexOf('+'));
			}
		}
		
		if(type.compareTo("within") == 0)
			return checkWithin(jp, (getArgs().getNumChild() < 2) ? "*":getArgs().getChild(0).getID(), tar);
			
		int dims = Integer.valueOf(dim);
		boolean match = false;
		
		if(
			//Joinpoint name matching
			((tar.compareTo("*") == 0)
				|| (tar.compareTo(target) == 0)
				|| (type.contains("loop") && target.contains(tar+","))
				)
			
			//Selective matching
			&& (args == -1 || dims == -1 || (!more && dims == args) || (more && dims <= args))
			
			//Joinpoint type matching
			&& ((type.compareTo(pattern) == 0) 
				|| (pattern.compareTo("getorcall") == 0 && (type.compareTo("get") == 0 || type.compareTo("call") == 0))
				//|| (pattern.compareTo("loop") && type.contains("loop"))
				)
			)
			match = true;
		
 		return match;
 	}
 	
 	eq AndExpr.ShadowMatch(String target, String pattern, int args, ASTNode jp) {
 		return (getLHS().ShadowMatch(target, pattern, args, jp) && getRHS().ShadowMatch(target, pattern, args, jp));
 	}
 	
 	eq OrExpr.ShadowMatch(String target, String pattern, int args, ASTNode jp) {
 		return (getLHS().ShadowMatch(target, pattern, args, jp) || getRHS().ShadowMatch(target, pattern, args, jp));
 	}
 	
 	eq NotExpr.ShadowMatch(String target, String pattern, int args, ASTNode jp) {
 		return !(getOperand().ShadowMatch(target, pattern, args, jp));
 	}
 	
 	private boolean PatternDesignator.checkWithin(ASTNode node, String type, String name) {
		if(type.compareTo("*") == 0 && name.compareTo("*") == 0)
			return true;
		
		//while(node != null && !(
		//		((type.compareTo("function") == 0) && node instanceof Function)
		//		|| ((type.compareTo("script") == 0) && node instanceof Script)
		//		|| ((type.compareTo("class") == 0) && node instanceof ClassDef)
		//		|| ((type.compareTo("aspect") == 0) && node instanceof Aspect)
		//		|| ((type.compareTo("loop") == 0) && (node instanceof ForStmt || node instanceof WhileStmt))
		//	))
		//	node = node.getParent();
		
		while(node != null){
			if(node instanceof Function && (type.compareTo("*") == 0 || type.compareTo("function") == 0))
				return (name.compareTo("*") == 0) || ((Function)node).getName().compareTo(name) == 0;
			else if(node instanceof ClassDef && (type.compareTo("*") == 0 || type.compareTo("class") == 0))
				return (name.compareTo("*") == 0) || ((ClassDef)node).getName().compareTo(name) == 0;
			else if(node instanceof Aspect && (type.compareTo("*") == 0 || type.compareTo("aspect") == 0))
				return (name.compareTo("*") == 0) || ((Aspect)node).getName().compareTo(name) == 0;
			else if(node instanceof Script && (type.compareTo("*") == 0 || type.compareTo("script") == 0)){
				String file = ((Script)node).getFileName();
				return (name.compareTo("*") == 0) || file.substring(0, file.lastIndexOf(".")).compareTo(name) == 0;
			} else if((node instanceof ForStmt || node instanceof WhileStmt) && (type.compareTo("*") == 0 || type.compareTo("loop") == 0))
				return (name.compareTo("*") == 0) || AspectsEngine.fetchLoopVariables((Stmt)node).contains(name+",");
			
			node = node.getParent();
		}
		
		return false;
 	}
}