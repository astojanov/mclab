
/*
Author: Toheed Aslam
Date: May 01, 2010
*/

/*
//	Matching a shadow according to patterns
*/

aspect ShadowMatch {
	
	
	syn boolean Expr.ShadowMatch(String target, String pattern, int args, ASTNode jp) = false;
 	
 
 	eq PatternDesignator.ShadowMatch(String target, String pattern, int args, ASTNode jp) {
		String type = getName();

		String variable = "";
		if(getArgs().getNumChild() > 0) {
			variable = getArgs().getChild(getArgs().getNumChild()-1).getID();
			//variable = variable.substring(variable.lastIndexOf('.')+1);
		}

		String tar = variable;
		String dim = "-1";
		boolean more = false;

		if(variable.contains("$")) {
			tar = variable.substring(0, variable.lastIndexOf('$'));
			dim = variable.substring(variable.lastIndexOf('$')+1);

			if(dim.contains("+")) {
				more = true;
				dim = dim.substring(0, dim.lastIndexOf('+'));
			}
		}
		//System.err.println("Type \t| Target \t| Pattern \t| Variable");
	   // System.err.println(type + "\t:" + target + "\t:" + pattern + "\t:" + tar + "\t:" + jp.getClass());
	    
	    
		if(type.compareTo("within") == 0)
			return checkWithin(jp, (getArgs().getNumChild() < 2) ? "*":getArgs().getChild(0).getID(), tar);
	
		    
		    	
		int dims = Integer.valueOf(dim);
		boolean match = false;
		
		if(
			//Joinpoint name matching
			((java.util.regex.Pattern.matches(tar, target))
				|| (type.contains("loop") && (java.util.regex.Pattern.matches(tar+",", AspectsEngine.fetchLoopVariables((Stmt)jp))))
				|| (pattern.compareTo("getorcallsimple") == 0) //for expression simplification
				)
			
			//Selective matching
			&& (args == -1 || dims == -1 || (!more && dims == args) || (more && dims <= args))
			
			//Joinpoint type matching
			&& ((type.compareTo(pattern) == 0) 
				|| (pattern.compareTo("getorcall") == 0 && (type.compareTo("get") == 0 || type.compareTo("call") == 0 || type.compareTo("op")==0))
				|| (pattern.compareTo("getorcallsimple") == 0 && (type.compareTo("get") == 0 || type.compareTo("call") == 0)) //for expression simplification
				//|| (pattern.compareTo("loop") && type.contains("loop"))
				)
			)
			match = true;
		
 		return match;
 	}
 	
 	eq AndExpr.ShadowMatch(String target, String pattern, int args, ASTNode jp) {
 		return (getLHS().ShadowMatch(target, pattern, args, jp) && getRHS().ShadowMatch(target, pattern, args, jp));
 	}
 	
 	eq OrExpr.ShadowMatch(String target, String pattern, int args, ASTNode jp) {
 		return (getLHS().ShadowMatch(target, pattern, args, jp) || getRHS().ShadowMatch(target, pattern, args, jp));
 	}
 	
 	eq NotExpr.ShadowMatch(String target, String pattern, int args, ASTNode jp) {
 		return !(getOperand().ShadowMatch(target, pattern, args, jp));
 	}
 	
 	eq NameExpr.ShadowMatch(String target, String pattern, int args, ASTNode jp) {
 		return (AspectsEngine.patternsListNew.containsKey(getName().getID())
 				&& AspectsEngine.patternsListNew.get(getName().getID()).ShadowMatch(target, pattern, args, jp));
 	}
 	
 	eq BinaryExpr.ShadowMatch(String target, String pattern, int args, ASTNode jp){
 		
 		String unparsedClass = getClass().toString();
 		String parsedClass = unparsedClass.replaceAll("class ast.","");
 		//System.err.println("in binexpr Shadowmatch with class "+parsedClass);
 		if(AspectsEngine.patternsListNew.containsKey(pattern)){
 			PatternDesignator thisIsNew = (PatternDesignator)AspectsEngine.patternsListNew.get(pattern);
 			if("op".contentEquals(thisIsNew.getName())){
 			     for(Name foo:thisIsNew.getArgList()){
 			         if(foo.getPrettyPrinted().contentEquals(parsedClass)){
 			         	return true;
 			         }
 			     }
 			}
 		}
 		return false;
 	}
	
 	
 	
 	private boolean PatternDesignator.checkWithin(ASTNode node, String type, String name) {
		if(type.compareTo("*") == 0 && name.compareTo(".*") == 0)
			return true;
		
		while(node != null){
			if(node instanceof Function && (type.compareTo("*") == 0 || type.compareTo("function") == 0))
				return (name.compareTo(".*") == 0) || (java.util.regex.Pattern.matches(name, ((Function)node).getName()));
			else if(node instanceof ClassDef && (type.compareTo("*") == 0 || type.compareTo("class") == 0))
				return (name.compareTo(".*") == 0) || (java.util.regex.Pattern.matches(name, ((ClassDef)node).getName()));
			else if(node instanceof Aspect && (type.compareTo("*") == 0 || type.compareTo("aspect") == 0))
				return (name.compareTo(".*") == 0) || (java.util.regex.Pattern.matches(name, ((Aspect)node).getName()));
			else if(node instanceof Script && (type.compareTo("*") == 0 || type.compareTo("script") == 0)){
				String file = ((Script)node).getFileName();
				return (name.compareTo(".*") == 0) || (java.util.regex.Pattern.matches(name, file.substring(0, file.lastIndexOf("."))));
			} else if((node instanceof ForStmt || node instanceof WhileStmt) && (type.compareTo("*") == 0 || type.compareTo("loop") == 0)){
				return (name.compareTo(".*") == 0) || (java.util.regex.Pattern.matches(name+",", AspectsEngine.fetchLoopVariables((Stmt)node)));
			} else if((node instanceof BinaryExpr) && (type.compareTo("*") == 0 || type.equals("op"))){
				if(name.equals("PlusExpr")){
					return (name.compareTo(".*") == 0 || (node instanceof PlusExpr));
				}else if(name.equals("MinusExpr")){
					return (name.compareTo(".*") == 0 || (node instanceof MinusExpr));
				}else if(name.equals("MTimesExpr")){
					return (name.compareTo(".*") == 0 || (node instanceof MTimesExpr));
				}else if(name.equals("MLDivExpr")){
					return (name.compareTo(".*") == 0 || (node instanceof MLDivExpr));
				}else if(name.equals("ELDivExpr")){
					return (name.compareTo(".*") == 0 || (node instanceof ELDivExpr));
				}else if(name.equals("MDivExpr")){
					return (name.compareTo(".*") == 0 || (node instanceof MDivExpr));
				}else if(name.equals("EPowExpr")){
					return (name.compareTo(".*") == 0 || (node instanceof EPowExpr));
				}else if(name.equals("MPowExpr")){
					return (name.compareTo(".*") == 0 || (node instanceof MPowExpr));
				}else if(name.equals("MTransposeExpr")){
					return (name.compareTo(".*") == 0 || (node instanceof MTransposeExpr));
				}else if(name.equals("ArrayTransposeExpr")){
					return (name.compareTo(".*") == 0 || (node instanceof ArrayTransposeExpr));
				}
			}
			
			node = node.getParent();
		}
		
		return false;
 	}
}
